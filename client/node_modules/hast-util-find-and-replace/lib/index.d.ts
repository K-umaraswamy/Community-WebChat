/**
 * Find patterns in a tree and replace them.
 *
 * The algorithm searches the tree in *preorder* for complete values in `Text`
 * nodes.
 * Partial matches are not supported.
 *
 * @template {Node} Tree
 *   Node type.
 * @param {Tree} tree
 *   Tree to change.
 * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find
 *   Patterns to find.
 * @param {Replace | Options | null | undefined} [replace]
 *   Things to replace with (when `find` is `Find`) or configuration.
 * @param {Options | null | undefined} [options]
 *   Configuration (when `find` is not `Find`).
 * @returns {Tree}
 *   Given, modified, tree.
 */
export function findAndReplace<Tree extends Node>(
  tree: Tree,
  find: Find | FindAndReplaceSchema | FindAndReplaceList,
  replace?: Replace | Options | null | undefined,
  options?: Options | null | undefined
): Tree
/**
 * Default tag names to ignore.
 *
 * The defaults are `math`, `script`, `style`, `svg`, and `title`.
 *
 * @type {Array<string>}
 */
export const defaultIgnore: Array<string>
export type Text = import('hast').Text
export type Root = import('hast').Root
export type Element = import('hast').Element
export type Content = import('hast').Content
export type Test = import('hast-util-is-element').Test
export type VisitorResult = import('unist-util-visit-parents').VisitorResult
export type Node = Root | Content
/**
 * Info on the match.
 */
export type RegExpMatchObject = {
  /**
   *  The index of the search at which the result was found.
   */
  index: number
  /**
   *  A copy of the search string in the text node.
   */
  input: string
  /**
   *  All ancestors of the text node, where the last node is the text itself.
   */
  stack: [Root, ...Array<Element>, Text]
}
/**
 * Callback called when a search matches.
 */
export type ReplaceFunction = (
  ...parameters: any[]
) => Array<Content> | Content | string | false | undefined | null
/**
 * Pattern to find.
 *
 * Strings are escaped and then turned into global expressions.
 */
export type Find = string | RegExp
/**
 * Several find and replaces, in array form.
 */
export type FindAndReplaceList = Array<[Find, Replace]>
/**
 * Several find and replaces, in object form.
 */
export type FindAndReplaceSchema = Record<string, Replace>
/**
 * Find and replace in tuple form.
 */
export type FindAndReplaceTuple = [Find, Replace]
/**
 * Thing to replace with.
 */
export type Replace = string | ReplaceFunction
/**
 * Normalized find and replace.
 */
export type Pair = [RegExp, ReplaceFunction]
/**
 * All find and replaced.
 */
export type Pairs = Array<[RegExp, ReplaceFunction]>
/**
 * Configuration.
 */
export type Options = {
  /**
   * Test for which elements to ignore.
   */
  ignore?: Test | null | undefined
}
