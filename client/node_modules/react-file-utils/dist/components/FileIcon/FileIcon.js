var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import React from 'react';
import { iconMap } from './iconMap';
export function mimeTypeToIcon(type, version, mimeType) {
    var _a;
    if (type === void 0) { type = 'standard'; }
    if (version === void 0) { version = '1'; }
    var theMap = ((_a = iconMap[version]) === null || _a === void 0 ? void 0 : _a[type]) || iconMap[version]['standard'];
    if (!mimeType)
        return theMap.fallback;
    var icon = theMap[mimeType];
    if (icon)
        return icon;
    if (mimeType.startsWith('audio/'))
        return theMap['audio/'];
    if (mimeType.startsWith('video/'))
        return theMap['video/'];
    if (mimeType.startsWith('image/'))
        return theMap['image/'];
    if (mimeType.startsWith('text/'))
        return theMap['text/'];
    return theMap.fallback;
}
export var FileIcon = function (props) {
    var _a = props.big, big = _a === void 0 ? false : _a, mimeType = props.mimeType, _b = props.size, size = _b === void 0 ? 50 : _b, _c = props.sizeSmall, sizeSmall = _c === void 0 ? 20 : _c, _d = props.type, type = _d === void 0 ? 'standard' : _d, _e = props.version, version = _e === void 0 ? '1' : _e, rest = __rest(props, ["big", "mimeType", "size", "sizeSmall", "type", "version"]);
    var Icon = mimeTypeToIcon(type, version, mimeType);
    return React.createElement(Icon, __assign({}, rest, { size: big ? size : sizeSmall }));
};
