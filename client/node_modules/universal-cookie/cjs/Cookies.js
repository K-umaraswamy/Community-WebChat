"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var cookie = _interopRequireWildcard(require("cookie"));
var _utils = require("./utils");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var Cookies = /*#__PURE__*/function () {
  function Cookies(cookies, options) {
    var _this = this;
    _classCallCheck(this, Cookies);
    this.changeListeners = [];
    this.HAS_DOCUMENT_COOKIE = false;
    this.cookies = (0, _utils.parseCookies)(cookies, options);
    new Promise(function () {
      _this.HAS_DOCUMENT_COOKIE = (0, _utils.hasDocumentCookie)();
    })["catch"](function () {});
  }
  _createClass(Cookies, [{
    key: "_updateBrowserValues",
    value: function _updateBrowserValues(parseOptions) {
      if (!this.HAS_DOCUMENT_COOKIE) {
        return;
      }
      this.cookies = cookie.parse(document.cookie, parseOptions);
    }
  }, {
    key: "_emitChange",
    value: function _emitChange(params) {
      for (var i = 0; i < this.changeListeners.length; ++i) {
        this.changeListeners[i](params);
      }
    }
  }, {
    key: "get",
    value: function get(name) {
      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
      var parseOptions = arguments.length > 2 ? arguments[2] : undefined;
      this._updateBrowserValues(parseOptions);
      return (0, _utils.readCookie)(this.cookies[name], options);
    }
  }, {
    key: "getAll",
    value: function getAll() {
      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var parseOptions = arguments.length > 1 ? arguments[1] : undefined;
      this._updateBrowserValues(parseOptions);
      var result = {};
      for (var name in this.cookies) {
        result[name] = (0, _utils.readCookie)(this.cookies[name], options);
      }
      return result;
    }
  }, {
    key: "set",
    value: function set(name, value, options) {
      if (_typeof(value) === 'object') {
        value = JSON.stringify(value);
      }
      this.cookies = Object.assign(Object.assign({}, this.cookies), _defineProperty({}, name, value));
      if (this.HAS_DOCUMENT_COOKIE) {
        document.cookie = cookie.serialize(name, value, options);
      }
      this._emitChange({
        name: name,
        value: value,
        options: options
      });
    }
  }, {
    key: "remove",
    value: function remove(name, options) {
      var finalOptions = options = Object.assign(Object.assign({}, options), {
        expires: new Date(1970, 1, 1, 0, 0, 1),
        maxAge: 0
      });
      this.cookies = Object.assign({}, this.cookies);
      delete this.cookies[name];
      if (this.HAS_DOCUMENT_COOKIE) {
        document.cookie = cookie.serialize(name, '', finalOptions);
      }
      this._emitChange({
        name: name,
        value: undefined,
        options: options
      });
    }
  }, {
    key: "addChangeListener",
    value: function addChangeListener(callback) {
      this.changeListeners.push(callback);
    }
  }, {
    key: "removeChangeListener",
    value: function removeChangeListener(callback) {
      var idx = this.changeListeners.indexOf(callback);
      if (idx >= 0) {
        this.changeListeners.splice(idx, 1);
      }
    }
  }]);
  return Cookies;
}();
exports["default"] = Cookies;
module.exports = exports.default;