import { useRef, useCallback, useEffect } from 'react'
import { NewMessageModel } from '../../classes/Message/types'
import Room from '../../classes/Room'
import { UseViewMessagesConfig, UseViewMessagesMethods } from './types'

/**
 * React hook that returns a function useful for marking messages as viewed on the backend.
 * It works by only clearing unread count when you've reached the most recent message, leveraging React Native FlatList's onViewableItemsChanged.
 * This is only useful if you're using the Juice chat backend.
 *
 * @example
 * ```js
 * const onViewMessages = useViewMessages({ roomId: 'some_chat_room_id' })
 *
 * return <Juice.Chat onViewMessages={onViewMessages} />
 * ```
 */
export default function<Model extends NewMessageModel = NewMessageModel>(
	config: UseViewMessagesConfig,
	methods: UseViewMessagesMethods<Model> = {}
) {
	const { roomId } = config
	const lastUploadedMessageId = useRef<string | null>(null)
	const { onViewMessages } = methods

	const roomIdRef = useRef(roomId)
	const onViewMessagesRef = useRef(onViewMessages)

	useEffect(() => {
		roomIdRef.current = roomId
		if (onViewMessages) onViewMessagesRef.current = onViewMessages
	}, [roomId, onViewMessages])

	return useCallback(
		({
			visibleMessages,
			latestMessageId
		}: {
			visibleMessages: Model[] | null
			latestMessageId: string | null
		}) => {
			const message =
				visibleMessages && visibleMessages.find(i => i.id === latestMessageId)
			if (
				visibleMessages &&
				visibleMessages.length &&
				onViewMessagesRef.current
			) {
				onViewMessagesRef.current({ visibleMessages })
			}
			if (message && message.id !== lastUploadedMessageId.current) {
				lastUploadedMessageId.current = message.id
				new Room({ id: roomIdRef.current }).viewMessage(
					message.id,
					message.createdAt
				)
			}
		},
		[]
	)
}
