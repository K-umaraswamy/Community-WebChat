import { useEffect, useRef } from 'react'
import { Room } from '../../index'
import { fuego } from '../../components/ChatProvider'
import { UseTypingConfig } from './types'

/**
 * useTyping updates the backend every time a user types, setting it to false after a certain delay.
 *
 * @param config { text, id } A dictionary that takes in the Input's current text value and the chatroom ID.
 * @param delay How long the timer delay should be before the backend is told we're no longer typing.
 *
 * @returns undefined
 */
export default (config: UseTypingConfig, delay: number = 1500) => {
	const { text = '', id } = config
	const { path } = new Room({ id })
	const ref = fuego.db.doc(path)
	const timer = useRef<number>()
	const user = fuego.auth().currentUser as firebase.User
	const uid = (user && user.uid) || 'tester_name'
	// ensures that typing only happens on update, not on mount
	const mounted = useRef(false)
	const lastTyped = useRef(0)

	useEffect(() => {
		try {
			if (mounted.current) {
				const typedAt = Date.now()
				// const last = lastTyped.current
				lastTyped.current = typedAt
				// if ((typedAt - last) / 1000 >= delay) {
				ref.update({
					[`members.${uid}.typing`]: true
					// [`members.${uid}.lastTyped`]: new Date()
				})
				timer.current = setTimeout(() => {
					ref.update({
						[`members.${uid}.typing`]: false
					})
				}, delay)
				// }
			} else {
				mounted.current = true
			}
		} catch (e) {
			console.error('use typing update error', e)
		}

		return () => {
			// cleanup on update
			if (timer.current) clearTimeout(timer.current)
		}
	}, [text, uid, delay, path])

	useEffect(() => {
		return () => {
			try {
				// mark indicator as false
				ref.update({
					[`members.${uid}.typing`]: false
				})
			} catch (e) {
				console.error('unmount usetyping error', e)
			}
		}
	}, [])
}
