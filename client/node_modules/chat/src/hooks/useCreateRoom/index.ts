import { useState, useRef, useEffect } from 'react'
import { NewRoomModel } from '../../classes/Room/types'
import Room from '../../classes/Room'

function useCreateRoom<RoomModel extends NewRoomModel>() {
	const [loading, setLoading] = useState(false)
	const [error, setError] = useState(null)
	const roomRef = useRef<RoomModel | null>(null)
	const recipientsRef = useRef<string[] | null>(null)

	useEffect(() => {
		const start = async () => {
			if (loading && roomRef.current && recipientsRef.current) {
				try {
					roomRef.current = null
					recipientsRef.current = null
					await new Room(roomRef.current).create()
				} catch (e) {
					console.error('useCreateRoom hook error:', e)
				}
			}
		}
		start()
	}, [loading])

	const create = (room: RoomModel) => {
		roomRef.current = room
		setLoading(true)
	}

	return { create, loading, error }
}

export default useCreateRoom
