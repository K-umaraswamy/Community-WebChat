import { useState, useRef, useEffect, useCallback } from 'react'
import { NewMessageModel } from '../../../classes/Message/types'
import Message from '../../../classes/Message'

export default function<MessageModel extends NewMessageModel>() {
	const [uploading, setUploading] = useState(false)
	const [error, setError] = useState(null)
	const messageRef = useRef<MessageModel | null>(null)
	const recipientsRef = useRef<string[] | null>(null)

	useEffect(() => {
		if (uploading) {
			const run = async () => {
				try {
					if (messageRef.current && recipientsRef.current)
						await new Message(messageRef.current).sendToGroup(
							recipientsRef.current
						)
					messageRef.current = null
					recipientsRef.current = null
					setUploading(false)
				} catch (e) {
					console.error(`failure sending message from useSendToPeople`, e)
					setError(e)
				}
			}
			run()
		}
	}, [uploading])

	const send = useCallback((message: MessageModel, recipients: string[]) => {
		messageRef.current = message
		recipientsRef.current = recipients
		setUploading(true)
	}, [])

	return { send, uploading, error }
}
