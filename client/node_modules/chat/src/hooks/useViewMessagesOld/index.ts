import { useRef, useMemo, useCallback, useEffect } from 'react'
import { NewMessageModel } from '../../classes/Message/types'
import { FlatListProps, ViewToken } from 'react-native'
import Room from '../../classes/Room'

export default function<Model extends NewMessageModel>({
	messages,
	roomId
}: {
	messages: Model[] | null
	roomId: string
}) {
	const lastMessageId = useRef<string | null>(null)
	const formatted: Model[] = useMemo(() => messages || [], [messages])

	const messagesRef = useRef<Model[]>([])
	const roomIdRef = useRef('')

	useEffect(() => {
		roomIdRef.current = roomId
		messagesRef.current = formatted
	}, [formatted, roomId])

	const onViewableItemsChanged: FlatListProps<
		Model
	>['onViewableItemsChanged'] = useCallback(info => {
		info.viewableItems.forEach((item: ViewToken) => {
			if (!item.isViewable) return
			const message = item.item as Model
			const id = message.id
			const mostRecentMessageId = messagesRef.current[0].id
			if (id === mostRecentMessageId && lastMessageId.current !== id) {
				lastMessageId.current = id
				new Room({ id: roomIdRef.current }).viewMessage(id, message.createdAt)
			}
		})
	}, [])
	return onViewableItemsChanged
}
