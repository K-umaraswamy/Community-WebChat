import React, { useMemo, FunctionComponent, useCallback } from 'react'
import { BubbleProps } from '../types'
import { View, Text, StyleSheet } from 'react-native'
import { LinearGradient } from 'expo-linear-gradient'
import { MessageMedia } from '../../../classes/Message/types'
import Media from '../Media'

const isValidColor = (color: string) =>
	/(#(?:[0-9a-f]{ 2 }){ 2,4 }|(#[0-9a-f]{3})|(rgb|hsl)a?\((-?\d+%?[,\s]+){2,3}\s*[d\.]+%?\)|\b(transparent|black|silver|gray|whitesmoke|maroon|red|purple|fuchsia|green|lime|olivedrab|yellow|navy|blue|teal|aquamarine|orange|aliceblue|antiquewhite|aqua|azure|beige|bisque|blanchedalmond|blueviolet|brown|burlywood|cadetblue|chartreuse|chocolate|coral|cornflowerblue|cornsilk|crimson|darkblue|darkcyan|darkgoldenrod|darkgray|darkgreen|darkgrey|darkkhaki|darkmagenta|darkolivegreen|darkorange|darkorchid|darkred|darksalmon|darkseagreen|darkslateblue|darkslategray|darkslategrey|darkturquoise|darkviolet|deeppink|deepskyblue|dimgray|dimgrey|dodgerblue|firebrick|floralwhite|forestgreen|gainsboro|ghostwhite|goldenrod|gold|greenyellow|grey|honeydew|hotpink|indianred|indigo|ivory|khaki|lavenderblush|lavender|lawngreen|lemonchiffon|lightblue|lightcoral|lightcyan|lightgoldenrodyellow|lightgray|lightgreen|lightgrey|lightpink|lightsalmon|lightseagreen|lightskyblue|lightslategray|lightslategrey|lightsteelblue|lightyellow|limegreen|linen|mediumaquamarine|mediumblue|mediumorchid|mediumpurple|mediumseagreen|mediumslateblue|mediumspringgreen|mediumturquoise|mediumvioletred|midnightblue|mintcream|mistyrose|moccasin|navajowhite|oldlace|olive|orangered|orchid|palegoldenrod|palegreen|paleturquoise|palevioletred|papayawhip|peachpuff|peru|pink|plum|powderblue|rosybrown|royalblue|saddlebrown|salmon|sandybrown|seagreen|seashell|sienna|skyblue|slateblue|slategray|slategrey|snow|springgreen|steelblue|tan|thistle|tomato|turquoise|violet|wheat|white|yellowgreen|rebeccapurple)\b)/i.test(
		color
	)

const Bubble: FunctionComponent<BubbleProps> = props => {
	const containerStyles = useMemo(() => {
		return [
			styles.container,
			props.isMe ? meStyles.container : otherStyles.container,
			props.style
		]
	}, [props.style, props.isMe])

	const textStyles = useMemo(() => {
		const color = (props.textColor && { color: props.textColor }) || {}
		return [
			styles.text,
			props.isMe ? meStyles.text : otherStyles.text,
			color,
			props.textStyle
		]
	}, [props.textStyle, props.isMe, props.textColor])

	const backgroundColor = useMemo(() => {
		let color: string[] = []
		if (Array.isArray(props.backgroundColor)) {
			color = props.backgroundColor
		}
		if (typeof props.backgroundColor === 'string') {
			color = [props.backgroundColor, props.backgroundColor]
		}
		const invalidColors = [
			...Array.from(new Set(color.filter(color => !isValidColor(color))))
		]
		if (invalidColors.length) {
			console.warn(
				`🍏 Juice warning: The background color value you gave to the Bubble component doesn't seem to be valid. Each color should be a HEX color or CSS color string, matching this format: #abc123, but instead, it got these: ${invalidColors}, which don't match the format. If you gave a valid CSS color and it works, you can ignore this.`
			)
		}
		return (
			color || (props.isMe ? ['#7B16FF', '#7114EA'] : ['#f1f7f8', '#f8f8f8'])
		)
	}, [props.backgroundColor, props.isMe])

	const { renderMedia: propsRenderMedia } = props
	const renderMedia = useCallback(() => {
		if (propsRenderMedia === null) return null

		if (!props.mediaContentType) return null

		const media: MessageMedia = {
			url: props.mediaUrl || '',
			uri: props.mediaUri,
			height: props.mediaHeight || 0,
			width: props.mediaWidth || 0,
			contentType: props.mediaContentType
		}
		if (propsRenderMedia) return propsRenderMedia({ media })

		return <Media {...media} />
	}, [
		props.mediaUrl,
		props.mediaUri,
		props.mediaHeight,
		props.mediaWidth,
		props.mediaContentType,
		propsRenderMedia
	])

	const { text, renderText: propsRenderText } = props
	const renderText = useCallback(() => {
		if (text) {
			if (propsRenderText) return propsRenderText({ style: textStyles, text })
			return <Text style={textStyles}>{text}</Text>
		}
		return null
	}, [textStyles, text, propsRenderText])

	return (
		<View style={containerStyles} ref={props.bubbleRef}>
			<LinearGradient
				colors={backgroundColor}
				start={[0.1, 0.1]}
				end={[0.9, 0.9]}
				style={styles.gradient}
			>
				{renderMedia()}
				{renderText()}
			</LinearGradient>
		</View>
	)
}

export default React.memo(Bubble)

const styles = StyleSheet.create({
	container: {
		maxWidth: '80%',
		borderRadius: 20,
		overflow: 'hidden'
	},
	text: {
		textAlign: 'left',
		fontSize: 16,
		paddingHorizontal: 12,
		paddingVertical: 10
	},
	gradient: {
		flex: 1
	}
})

const meStyles = StyleSheet.create({
	container: {
		// backgroundColor: 'rgb(123, 22, 255)',
		marginLeft: 5
	},
	text: {
		color: 'white'
	}
})

const otherStyles = StyleSheet.create({
	container: {
		// backgroundColor: 'lightgray',
		marginRight: 5
	},
	text: {
		color: 'black'
	}
})
