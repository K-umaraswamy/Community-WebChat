import React, { useState, useCallback, useMemo, useEffect } from 'react'
import uuid from 'uuid'
import { View, StyleSheet, Keyboard } from 'react-native'
import { isIphoneX, getBottomSpace } from 'react-native-iphone-x-helper'
import { ComposerProps, InputProps, SendButtonProps } from '../types'
import Input from './Input'
import Send from './Send'
import { MessageMedia, NewMessageModel } from '../../../classes/Message/types'

// const emptyMedia: ComposerProps['media'][] = []

const Composer = (props: ComposerProps) => {
	// First, we set up a state manager for the composer's text.
	const [textState, setText] = useState(props.initialText || '')
	// if you pass a text prop, use that state instead
	const [text, onChangeText] = useMemo(
		() => [
			props.text !== undefined ? props.text : textState,
			props.text !== undefined ? props.onInputTextChanged : setText,
		],
		[props.text, textState, props.onInputTextChanged]
	)

	const [mediaState, setMedia] = useState<ComposerProps['media'][]>([])
	const [media, onChangeMedia] = [
		props.media || mediaState,
		(props.media && props.onChangeMedia) || setMedia,
	]

	// track whether or not the keyboard is open to style the bottom based on where or not you're on an iPhone X
	const [keyboardOpen, setKeyboardOpen] = useState(false)
	useEffect(() => {
		const show = () => {
			setKeyboardOpen(true)
		}
		const hide = () => {
			setKeyboardOpen(false)
		}
		Keyboard.addListener('keyboardWillShow', show)
		Keyboard.addListener('keyboardWillHide', hide)
		return () => {
			Keyboard.removeListener('keyboardWillShow', show)
			Keyboard.removeListener('keyboardWillHide', hide)
		}
	}, [])

	const { user } = props
	const messagesReadyToSend = useMemo(() => {
		const messages: NewMessageModel[] = []
		if (media && media.length) {
			;(media as MessageMedia[]).forEach((item: MessageMedia) => {
				const message: NewMessageModel = {
					user,
					text: '',
					id: uuid.v4(),
					createdAt: new Date(),
					media: item,
				}
				messages.push(message)
			})
		}
		if (text) {
			const message: NewMessageModel = {
				user,
				text: text && text.trim(),
				id: uuid.v4(),
				createdAt: new Date(),
			}
			messages.push(message)
		}
		return messages
	}, [user, text, media])

	const { onSend } = props
	const send = useCallback(() => {
		if (messagesReadyToSend.length) {
			if (onChangeText) onChangeText('')
			if (onChangeMedia) onChangeMedia([])
			onSend(messagesReadyToSend)
		}
	}, [onChangeText, onChangeMedia, messagesReadyToSend, onSend])

	const { textInputProps, renderTextInput } = props
	const renderInput = useCallback(() => {
		if (renderTextInput === null) return null

		const onSubmitEditing: InputProps['onSubmitEditing'] = () => {
			if (props.sendOnKeyboardReturn) send()
		}

		const inputProps: InputProps = {
			inputProps: textInputProps,
			onChangeText,
			text,
			containerStyle: props.inputContainerStyle,
			placeholderColor: props.placeholderColor,
			placeholderText: props.placeholderText,
			style: props.inputStyle,
			tintColor: props.tintColor,
			inputRef: props.inputRef,
			sendOnKeyboardReturn: props.sendOnKeyboardReturn,
			onSubmitEditing,
		}

		if (renderTextInput) return renderTextInput(inputProps)

		return <Input {...inputProps} />
	}, [
		onChangeText,
		text,
		textInputProps,
		renderTextInput,
		props.inputContainerStyle,
		props.placeholderColor,
		props.placeholderText,
		props.inputStyle,
		props.tintColor,
		// TODO leave or take out?
		props.inputRef,
		props.sendOnKeyboardReturn,
		send,
	])

	const { renderSendButton } = props
	const sendButtonMode =
		props.sendButtonMode?.({ hasText: !!(text && text.trim()) }) ?? 'icon'
	const renderSend = useCallback(() => {
		if (renderSendButton === null) return null

		// const mode: ChatProps['sendButtonMode'] = {
		// 	empty: 'hidden',
		// 	withText: 'icon',
		// 	...(sendButtonMode || {}),
		// }
		const sendProps: SendButtonProps = {
			onSend: send,
			text,
			media: media as MessageMedia[],
			user,
			// mode: (text && text.trim ? mode.withText : mode.empty) || 'icon',
			mode: sendButtonMode,
			containerStyle: props.sendButtonContainerStyle,
			tintColor: props.tintColor,
		}
		if (renderSendButton) return renderSendButton(sendProps)

		return <Send {...sendProps} />
	}, [
		send,
		text,
		user,
		media,
		renderSendButton,
		sendButtonMode,
		props.sendButtonContainerStyle,
		props.tintColor,
	])

	const containerStyle = useMemo(() => {
		const paddingBottom = keyboardOpen && isIphoneX() ? 10 : getBottomSpace()
		return [styles.container, { paddingBottom }, props.containerStyle]
	}, [props.containerStyle, keyboardOpen])

	return (
		<View style={[containerStyle]}>
			<View style={styles.wrapper}>
				{renderInput()}
				{renderSend()}
			</View>
		</View>
	)
}

Composer.displayName = 'Juice.Composer'

export default React.memo(Composer)

const styles = StyleSheet.create({
	container: {
		paddingBottom: 10,
		paddingTop: 5,
	},
	wrapper: {
		flexDirection: 'row',
		alignItems: 'flex-end',
	},
})
