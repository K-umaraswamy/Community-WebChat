import React, { useRef, useCallback, FunctionComponent } from 'react'

import { TouchableProps } from '../../types'
import {
	LongPressGestureHandler,
	State,
	TapGestureHandler
} from 'react-native-gesture-handler'

const Touchable: FunctionComponent<TouchableProps> = props => {
	const doubleTapRef = useRef<TapGestureHandler>(null)
	const { onLongPress, onPress, onDoubleTap: handleDoubleTap, id } = props
	const onHandlerStateChange = useCallback(
		event => {
			if (event.nativeEvent.state === State.ACTIVE) {
				if (onLongPress) onLongPress(id)
				// alert("I'm being pressed for so long")
			}
		},
		[onLongPress, id]
	)
	const onSingleTap = useCallback(
		event => {
			if (event.nativeEvent.state === State.ACTIVE) {
				if (onPress) onPress(id)
			}
		},
		[onPress, id]
	)
	const onDoubleTap = useCallback(
		event => {
			if (event.nativeEvent.state === State.ACTIVE) {
				if (handleDoubleTap) handleDoubleTap(id)
			}
		},
		[handleDoubleTap, id]
	)
	return (
		<LongPressGestureHandler
			onHandlerStateChange={onHandlerStateChange}
			minDurationMs={props.longPressDelay || 500}
		>
			<TapGestureHandler
				onHandlerStateChange={onSingleTap}
				waitFor={doubleTapRef}
			>
				<TapGestureHandler
					maxDelayMs={props.doubleTapDelay || 500}
					ref={doubleTapRef}
					onHandlerStateChange={onDoubleTap}
					numberOfTaps={2}
				>
					{props.children}
				</TapGestureHandler>
			</TapGestureHandler>
		</LongPressGestureHandler>
	)
}

export default Touchable
