import React, { useCallback, useRef } from 'react'
import { RectButton } from 'react-native-gesture-handler'
import { View, StyleSheet } from 'react-native'
import Title from './Title'
import ItemDate from './ItemDate'
import {
	InboxItemProps,
	InitialsProps,
	SwipeableProps,
	UnreadIndicatorProps
} from '../types'
import { ExistingRoomModel } from '../../../classes/Room/types'
import UnreadIndicator from './UnreadIndicator'
import Subtitle from './Subtitle'
import Avatar from '../../Avatar'
import Initials from './Initials'
import Swipeable from './Swipeable/index'
import TypingIndicator from '../../TypingIndicator'

function Item<InboxItem extends ExistingRoomModel = ExistingRoomModel>(
	props: InboxItemProps<InboxItem>
) {
	const renderCount = useRef(1)
	renderCount.current++
	function renderTitle() {
		if (props.renderTitle) return props.renderTitle(props.name)
		if (props.renderTitle === null) return null

		const TitleComponent = props.TitleComponent || Title

		return (
			<TitleComponent
				title={props.name}
				style={props.titleStyle}
				containerStyle={props.titleContainerStyle}
			/>
		)
	}
	function renderDate() {
		if (props.renderDate) return props.renderDate(props.lastMessageCreatedAt)
		if (props.renderDate === null) return null

		const DateComponent = props.DateComponent || ItemDate

		return (
			<DateComponent
				dateToStringFunc={props.dateToStringFunc}
				date={props.lastMessageCreatedAt}
				style={props.dateStyle}
			/>
		)
	}
	function renderUnreadIndicator() {
		if (!props.showUnreadIndicator) return null

		let position = 'center' as UnreadIndicatorProps['position']
		if (
			props.unreadIndicatorPosition &&
			props.unreadIndicatorPosition.includes('-')
		) {
			// ex: turn bottom-left into bottom
			// why? this component is only concerned w vertical position
			position = props.unreadIndicatorPosition.split(
				'-'
			)[0] as UnreadIndicatorProps['position']
		}

		const backgroundColor = props.unreadIndicatorColor || 'blue'

		const indicatorProps: UnreadIndicatorProps = {
			unreadCount: props.unreadCount,
			textColor: props.unreadTextColor,
			showCount: props.showUnreadIndicatorCount,
			backgroundStyle: props.unreadIndicatorStyle,
			textStyle: props.unreadIndicatorTextStyle,
			position,
			backgroundColor,
			type: props.unreadIndicatorType || 'gradient',
			gradientProps: props.unreadIndicatorGradientProps || {
				colors: ['red', 'blue']
			},
			show: props.showUnreadIndicator,
			size: props.unreadIndicatorSize
		}

		if (props.renderUnreadIndicator)
			return props.renderUnreadIndicator(indicatorProps)
		if (props.renderUnreadIndicator === null) return null

		const UnreadIndicatorComponent =
			props.UnreadIndicatorComponent || UnreadIndicator

		return <UnreadIndicatorComponent {...indicatorProps} />
	}
	function renderSubtitle() {
		if (props.renderSubtitle === null) return null
		if (props.showTypingIndicator && props.numberOfPeopleTyping)
			return renderTypingIndicator()

		if (props.renderSubtitle) return props.renderSubtitle(props.lastMessageText)

		const SubtitleComponent = props.SubtitleComponent || Subtitle

		return (
			<SubtitleComponent
				textStyle={props.subtitleTextStyle}
				lastMessageText={props.lastMessageText}
			/>
		)
	}

	// function renderAvatarOrInitials() {
	// 	// not destructuring for clarity of where the variables come from
	// 	const avatar = props.avatar
	// 	const prioritizeAvatar = props.prioritizeAvatarOverInitials
	// 	const size = props.avatarSize
	// 	const members = props.members

	// 	if (avatar && prioritizeAvatar) {
	// 		const imageProps = props.avatarImageProps
	// 		if (props.renderAvatar)
	// 			props.renderAvatar({ imageProps, size, avatar, members })
	// 		if (props.renderAvatar === null) return null

	// 		const AvatarComponent = props.AvatarComponent || Avatar

	// 		return <AvatarComponent {...imageProps} size={size} avatar={avatar} />
	// 	}
	// }

	function renderAvatarOrInitials() {
		if (props.disableAvatar) return null

		const avatar = props.avatar
		const initials = props.initials
		const prioritizeAvatar = props.prioritizeAvatarOverInitials !== false
		let size = props.avatarSize || 55
		const imageProps = props.avatarImageProps
		const textStyle = props.initialsTextStyle
		const initialsContainerStyle = props.initialsContainerStyle

		const InitialsComponent = props.InitialsComponent || Initials
		const AvatarComponent = props.AvatarComponent || Avatar

		if (Array.isArray(avatar)) {
			size /= 2
			return (
				<>
					{avatar.map((member, i) => {
						if (member.avatar && prioritizeAvatar) {
							const avatarProps = {
								imageProps,
								size,
								avatar: member.avatar
							}
							if (props.renderAvatar) return props.renderAvatar(avatarProps)
							if (props.renderAvatar === null) return null

							return <AvatarComponent {...avatarProps} />
						}

						const initialsProps: InitialsProps = {
							textStyle,
							containerStyle: initialsContainerStyle,
							initials,
							size,
							textColor: props.initialsTextColor,
							backgroundColor: props.initialsBackgroundColor
						}

						if (props.renderInitials) return props.renderInitials(initialProps)
						if (props.renderInitials === null) return null

						return (
							<InitialsComponent
								key={initials + i.toString()}
								{...initialsProps}
							/>
						)
					})}
				</>
			)
		}

		if (avatar && prioritizeAvatar) {
			const avatarProps = {
				imageProps,
				size,
				avatar
			}
			if (props.renderAvatar) return props.renderAvatar(avatarProps)
			if (props.renderAvatar === null) return null

			return <AvatarComponent {...avatarProps} />
		}

		const initialProps: InitialsProps = {
			initials,
			size,
			textStyle,
			containerStyle: initialsContainerStyle,
			textColor: props.initialsTextColor,
			backgroundColor: props.initialsBackgroundColor
		}

		if (props.renderInitials) return props.renderInitials(initialProps)
		if (props.renderInitials === null) return null

		return <InitialsComponent {...initialProps} />
	}

	function typingIndicator() {
		if (props.renderTypingIndicator) return props.renderTypingIndicator()
		if (props.renderTypingIndicator === null) return null

		return (
			<View style={{ marginTop: 5 }}>
				<TypingIndicator />
			</View>
		)
	}

	const renderTypingIndicator = useCallback(typingIndicator, [
		props.renderTypingIndicator
	])

	const unreadIndicatorIsOnRight = !!(
		props.showTypingIndicator &&
		props.unreadIndicatorPosition &&
		props.unreadIndicatorPosition.includes('right')
	)

	const flexDirection = unreadIndicatorIsOnRight ? 'row-reverse' : 'row'

	// if row-reverse, this flips to the other side
	const paddingLeft = props.showUnreadIndicator ? 5 : 10

	const swipeableProps: SwipeableProps = {
		id: props.id,
		rightActions: props.swipeRightActions,
		leftActions: props.swipeLeftActions,
		renderAction: props.renderSwipeAction,
		actionWidth: props.swipeActionWidth,
		gestureHandlerProps: props.swipeableRowProps,
		renderLeftActions: props.renderLeftActions,
		renderRightActions: props.renderRightActions,
		textStyle: props.actionTextStyle
	}

	const ContainerComponent = props.swipeable ? Swipeable : View

	return (
		<ContainerComponent {...swipeableProps}>
			<RectButton
				onPress={props.onPress}
				style={{ backgroundColor: props.backgroundColor }}
			>
				<View
					style={[
						{
							paddingLeft,
							...styles.container,
							...(props.containerStyle || {})
						},
						{ flexDirection }
					]}
				>
					{renderUnreadIndicator()}
					<View style={[styles.wrapper]}>
						{renderAvatarOrInitials()}
						<View style={styles.inner}>
							<View style={styles.content}>
								{renderTitle()}
								{renderDate()}
							</View>
							{renderSubtitle()}
						</View>
					</View>
				</View>
			</RectButton>
		</ContainerComponent>
	)
}

export default React.memo(Item)

const styles = StyleSheet.create({
	container: {
		flexDirection: 'row',
		paddingVertical: 10,
		justifyContent: 'center',
		marginBottom: 5,
		paddingRight: 10
	},
	wrapper: {
		flex: 1,
		flexDirection: 'row'
	},
	content: {
		flexDirection: 'row',
		justifyContent: 'space-between'
	},
	inner: {
		flex: 1,
		paddingLeft: 10
	}
})
