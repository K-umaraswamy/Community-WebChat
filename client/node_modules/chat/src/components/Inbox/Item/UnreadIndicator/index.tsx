import React from 'react'
import { View, Text, StyleSheet, ViewStyle } from 'react-native'
import { UnreadIndicatorProps } from '../../types'
import { LinearGradient } from 'expo-linear-gradient'

const Indicator = (props: UnreadIndicatorProps) => {
	if (!props.show) return null

	let size = props.size || (props.showCount ? 20 : 15)

	// set vertical position
	let justifyContent = 'center'
	if (props.position === 'bottom') justifyContent = 'flex-end'
	if (props.position === 'top') justifyContent = 'flex-start'

	// determine width
	const characterCount =
		(props.unreadCount && props.unreadCount.toString().length) || 1

	let width = size
	if (props.showCount && characterCount === 2) width = size * 1.1
	else if (props.showCount && characterCount === 3) width = size * 1.5

	// indicator should be invisible if the count is 0, no?
	const opacity = props.unreadCount ? 1 : 0

	// if it's a gradient, set the gradient as the component
	const BackgroundComponent = props.type === 'gradient' ? LinearGradient : View

	return (
		<View
			style={[
				styles.container,
				{
					justifyContent,
					width: props.showCount ? size * 1.5 : size,
					opacity
				} as ViewStyle
			]}
		>
			<BackgroundComponent
				style={[
					styles.background,
					{
						backgroundColor: props.backgroundColor,
						width,
						height: size,
						borderRadius: size / 2
					},
					props.backgroundStyle || {}
				]}
				{...(props.gradientProps || {
					colors: ['red', 'blue']
				})}
			>
				<Text
					style={[
						styles.text,
						props.textStyle || {},
						props.textColor ? { color: props.textColor } : {}
					]}
				>
					{!!props.showCount && (props.unreadCount || '')}
				</Text>
			</BackgroundComponent>
		</View>
	)
}
const styles = StyleSheet.create({
	container: {
		alignItems: 'center'
	},
	background: {
		overflow: 'hidden',
		alignItems: 'center',
		justifyContent: 'center',
		backgroundColor: 'blue'
	},
	text: {
		color: 'white'
	}
})

export default React.memo(Indicator)
