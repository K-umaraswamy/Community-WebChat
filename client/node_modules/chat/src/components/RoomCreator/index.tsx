import React, { useMemo, useRef, useState, useEffect } from 'react'
import BottomSheet from 'reanimated-bottom-sheet'
import Header from './Header'
import Content from './Content'
import Animated from 'react-native-reanimated'
import {
	RoomCreatorProps,
	Selected,
	RoomCreatorContentProps,
	RoomCreatorHeaderProps
} from './types'

const { Value, useCode, block, cond, eq, call, and } = Animated

const initialSelected: Selected = {}

function RoomCreator(props: RoomCreatorProps) {
	const sheetRef = useRef<BottomSheet>(null)
	const callbackNode = useMemo(() => props.callbackNode || new Value(1), [
		props.callbackNode
	])
	const [selectedState, setSelected] = useState<Selected>(initialSelected)
	const [text, setText] = useState('')

	const ref = props.sheetRef !== undefined ? props.sheetRef : sheetRef

	// should we handle selected state or not
	const selected = props.selected || selectedState

	const ready = useMemo(
		() =>
			props.isReadyFunc
				? props.isReadyFunc(selected)
				: !!Object.keys(selected).filter(Boolean).length,
		[props, selected]
	)

	const mounted = useRef(0)

	useCode(
		() =>
			block([
				cond(
					// if the sheet just opened
					eq(callbackNode, 1),
					call([], onDidClose),
					// if the sheet just closed
					cond(
						and(eq(callbackNode, 0), (mounted.current, 1)),
						call([], onDidOpen)
					)
				)
			]),
		[callbackNode, onDidClose, onDidOpen]
	)

	useEffect(() => {
		if (!mounted.current) mounted.current = 1
	}, [])

	function reset() {
		setSelected(initialSelected)
		setText('')
	}

	const toggleSelected = (id: string) => {
		if (props.onSelectItem) return props.onSelectItem(id)

		setSelected(currentlySelected => {
			const user = props.users.find(u => u.id === id)
			if (currentlySelected[id] || !user) {
				const { [id]: pressed, ...ommitted } = currentlySelected
				return ommitted
			}
			return {
				...currentlySelected,
				[id]: user.type
			}
		})
	}

	const open = () => ref.current && ref.current.snapTo(1)
	const close = () => ref.current && ref.current.snapTo(0)

	if (props.creatorRef) {
		props.creatorRef.current = {
			open,
			close
		}
	}

	// useEffect(() => {
	// 	if (props.isOpen === true) open()
	// 	else close()
	// }, [props.isOpen])

	function onDidClose() {
		if (props.onDidClose) props.onDidClose()
		reset()
	}

	function onDidOpen() {
		if (props.onDidOpen) props.onDidOpen()
	}

	const renderHeader = () => {
		const headerProps: RoomCreatorHeaderProps = {
			callbackNode,
			image: props.headerImage,
			imageStyle: props.headerImageStyle,
			subtitle: props.headerSubtitle,
			subtitleStyle: props.headerSubtitleStyle,
			title: props.headerTitle || 'New Message',
			titleStyle: props.headerTitleStyle,
			backgroundColor: props.headerBackgroundColor || '#f8f8f8',
			containerStyle: props.headerContainerStyle
		}
		if (props.renderHeader) return props.renderHeader(headerProps)
		if (props.renderHeader === null) return null

		return <Header {...headerProps} />
	}

	const renderContent = () => {
		const contentProps: RoomCreatorContentProps = {
			toggleSelected,
			selected,
			renderFooter: props.renderFooter,
			buttons: props.buttons,
			renderButton: props.renderButton,
			ButtonComponent: props.ButtonComponent,
			users: props.users,
			renderItem: props.renderItem,
			ready,
			renderSelectedIcon: props.renderSelectedIcon,
			selectedIconActiveColor: props.selectedIconActiveColor,
			selectedIconInactiveColor: props.selectedIconInactiveColor,
			enableTextInput: props.enableTextInput,
			inputContainerStyle: props.inputContainerStyle,
			inputStyle: props.inputStyle,
			showInputWhenNotReady: props.showInputWhenNotReady,
			inputProps: props.inputProps,
			onChangeText: setText,
			text
		}
		if (props.renderContent) return props.renderContent(contentProps)
		if (props.renderContent === null) return null

		return <Content {...contentProps} />
	}

	const snapPoints = useMemo(() => props.snapPoints || ['0%', '90%'], [
		props.snapPoints
	])

	const initialSnap = props.startOpen ? 1 : 0

	const renderSheet = () => {
		return (
			<BottomSheet
				{...{ initialSnap }}
				{...props.sheetProps}
				{...{
					renderHeader,
					renderContent,
					snapPoints,
					callbackNode,
					ref
				}}
			/>
		)
	}

	return <>{renderSheet()}</>
}

export default RoomCreator
