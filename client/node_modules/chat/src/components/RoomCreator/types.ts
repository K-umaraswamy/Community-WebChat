import { ReactNode, ComponentType, ReactElement } from 'react'
import Animated from 'react-native-reanimated'
import BottomSheet from 'reanimated-bottom-sheet'
import {
	NewMessageModel,
	SendFromFeedRecipients,
	SendFromFeedRecipientArray
} from '../../classes/Message/types'
import { RoomMembers } from '../../classes/Room/types'
import {
	TextStyle,
	StyleProp,
	ImageStyle,
	ViewStyle,
	TextInputProps
} from 'react-native'
// import { RoomCreatorItemProps } from './types'

export interface RoomCreatorRef {
	open: () => void
	close: () => void
}

interface RoomCreatorItem extends User {
	type: Selected[keyof Selected]
}

export interface RoomCreatorProps {
	renderHeader?: null | ((props: RoomCreatorHeaderProps) => ReactNode)
	renderContent?: null | ((props: RoomCreatorContentProps) => ReactNode)
	snapPoints?: [string, string] | [number, number]
	callbackNode?: Animated.Value<number>
	sheetProps?: Omit<BottomSheet['props'], 'snapPoints'>
	sheetRef?: React.MutableRefObject<BottomSheet>
	creatorRef?: React.MutableRefObject<RoomCreatorRef>
	message?: null | NewMessageModel
	renderFooter?: null | ((props: RoomCreatorFooterProps) => ReactNode)
	disableSendAsGroup?: boolean
	onSendSeparately?: RoomCreatorFunctions['onSendSeparately']
	onCreateRoom?: RoomCreatorFunctions['onCreateRoom']
	onSendAsGroup?: RoomCreatorFunctions['onSendAsGroup']
	selected?: Selected
	/**
	 * (Optional) Function called when a user is pressed.
	 * If used, the internal state manager of pressed items is disabled.
	 *
	 * **Important** you must use the `selected` too prop if you use this prop.
	 *
	 * @param id - the ID of the pressed user
	 *
	 * @example
	 * ```javascript
	 * return <Inbox selected={selected} onSelectItem />
	 * ```
	 */
	onSelectItem?: (id: string) => void
	users: Array<RoomCreatorItem>
	onDidClose?: () => void
	onDidOpen?: () => void
	text?: string
	onChangeText?: string
	disableComposer?: boolean
	isReadyFunc?: (selected: Selected) => boolean
	startOpen?: boolean
	buttons: Buttons
	renderButton?: (props: RenderButtonProps) => ReactNode | null
	ButtonComponent?: ComponentType<RenderButtonProps>
	headerTitle?: string
	headerTitleStyle?: RoomCreatorHeaderProps['titleStyle']
	headerSubtitle?: RoomCreatorHeaderProps['subtitle']
	headerSubtitleStyle?: RoomCreatorHeaderProps['subtitleStyle']
	headerImage?: RoomCreatorHeaderProps['image']
	headerImageStyle?: RoomCreatorHeaderProps['imageStyle']
	renderItem?: null | ((props: RoomCreatorItemProps) => ReactElement)
	selectedIconActiveColor?: string
	selectedIconInactiveColor?: string
	renderSelectedIcon?: (iconProps: SelectedIconProps) => ReactNode | null
	/**
	 * Optionally enable text box. Text will be passed to onPress function for all buttons.
	 */
	enableTextInput?: RoomCreatorFooterProps['enableTextInput']
	inputStyle?: RoomCreatorFooterProps['inputStyle']
	inputContainerStyle?: RoomCreatorFooterProps['inputContainerStyle']
	showInputWhenNotReady?: RoomCreatorFooterProps['showInputWhenNotReady']
	inputProps?: RoomCreatorInputProps['inputProps']
	headerBackgroundColor?: string
	headerContainerStyle?: ViewStyle
}

export type RoomCreatorFunctions = {
	onSendSeparately: (details: {
		message: NewMessageModel
		members: SendFromFeedRecipients
	}) => Promise<void>
	onCreateRoom: (members: RoomMembers) => void
	onSendAsGroup: (details: {
		message: NewMessageModel
		members: SendFromFeedRecipientArray['recipients']
	}) => Promise<any>
}

export interface RoomCreatorItemProps {
	name: string
	id: string
	avatar: string
	selected: boolean
	handle?: string
	toggleSelected: (id: string) => void
	renderSelectedIcon?: RoomCreatorProps['renderSelectedIcon']
	selectedIconActiveColor?: RoomCreatorProps['selectedIconActiveColor']
	selectedIconInactiveColor?: RoomCreatorProps['selectedIconInactiveColor']
}

export interface SelectedIconProps {
	activeColor: string
	inactiveColor: string
	active: boolean
}

export interface RoomCreatorContentProps {
	toggleSelected: (id: string) => void
	selected: Selected
	renderFooter?: RoomCreatorProps['renderFooter']
	renderButton?: RoomCreatorProps['renderButton']
	buttons: RoomCreatorProps['buttons']
	ButtonComponent?: RoomCreatorProps['ButtonComponent']
	users: RoomCreatorProps['users']
	renderItem?: RoomCreatorProps['renderItem']
	ready: boolean
	renderSelectedIcon?: RoomCreatorProps['renderSelectedIcon']
	selectedIconActiveColor?: RoomCreatorProps['selectedIconActiveColor']
	selectedIconInactiveColor?: RoomCreatorProps['selectedIconInactiveColor']
	enableTextInput?: RoomCreatorFooterProps['enableTextInput']
	inputStyle?: RoomCreatorFooterProps['inputStyle']
	inputContainerStyle?: RoomCreatorFooterProps['inputContainerStyle']
	showInputWhenNotReady?: RoomCreatorFooterProps['showInputWhenNotReady']
	inputProps?: RoomCreatorInputProps['inputProps']
	text: RoomCreatorInputProps['text']
	onChangeText: RoomCreatorInputProps['onChangeText']
}

export interface RoomCreatorHeaderProps {
	callbackNode: Animated.Value<number>
	title: string
	subtitle?: string
	image?: string
	imageStyle?: StyleProp<ImageStyle>
	titleStyle?: StyleProp<TextStyle>
	subtitleStyle?: StyleProp<TextStyle>
	backgroundColor?: string
	containerStyle?: ViewStyle
}

export interface RoomCreatorFooterProps {
	ButtonComponent?: RoomCreatorProps['ButtonComponent']
	renderButton?: RoomCreatorProps['renderButton']
	buttons: RoomCreatorProps['buttons']
	ready: boolean
	selected: Selected
	enableTextInput: boolean
	inputStyle?: RoomCreatorInputProps['inputStyle']
	inputContainerStyle?: RoomCreatorInputProps['inputContainerStyle']
	inputProps?: RoomCreatorInputProps['inputProps']
	showInputWhenNotReady: boolean
	text: RoomCreatorInputProps['text']
	onChangeText: RoomCreatorInputProps['onChangeText']
}

export interface RoomCreatorInputProps {
	text: string
	onChangeText: TextInputProps['onChangeText']
	inputProps?: TextInputProps
	inputStyle?: TextInputProps['style']
	inputContainerStyle?: StyleProp<ViewStyle>
}

export interface Selected {
	[id: string]: 'room' | 'user'
}

/**
 * Buttons will show up at the bottom of the room creator
 *
 * @example
 * Note that in the example below, you will need to make sure that selected matches the proper schema for members. It is left this way for simplicity.
 * ```javascript
 * <Inbox
 * 	buttons={[
 * 	 {
 * 	   text: 'Start Chat',
 *     onPress: (selected) => new Room({ members: selected }).create()
 * 	 }
 * 	]}
 * />
 * ```
 *
 *
 */
export interface Button {
	text: string
	onPress: (config: {
		selected: Selected
		ready: boolean
		loading: boolean
		text: string
	}) => any | Promise<any>
	disabledString?: string
	color?: string
	textColor?: string
	disabledColor?: string
	disabledTextColor?: string
	ready?: boolean
	loading?: boolean
}

export interface RenderButtonProps {
	backgroundColor: string
	text: string
	textColor: string
	onPress: () => void
	ready: boolean
	index: number
	loading: boolean
}

export interface User {
	id: string
	name: string
	avatar: string
	handle?: string
}

export type Buttons = Button[]
