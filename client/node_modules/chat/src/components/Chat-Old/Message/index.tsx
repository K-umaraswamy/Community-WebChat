import React, {
	useCallback,
	useRef,
	MutableRefObject,
	useMemo,
	FunctionComponent
} from 'react'
import { View, StyleSheet, Text } from 'react-native'
import { MessageProps } from '../types'
import { NewMessageModel } from '../../../classes/Message/types'
import Bubble from '../Bubble'
import { Avatar, Initials } from '../..'
import { AvatarProps, InitialsProps } from '../../Inbox/types'
import { getInitials } from '../../../helpers/getInitials'

const Message = <Model extends NewMessageModel = NewMessageModel>(
	props: MessageProps<Model>
) => {
	const bubble = useRef<View>()

	const { renderFooter } = props
	const footer = useCallback(
		() => (renderFooter ? renderFooter({ id: props.id }) : null),
		[props.id, renderFooter]
	)

	const containerStyle = useMemo(() => {
		return [
			styles.container,
			props.isMe ? meStyles.container : otherStyles.container,
			props.messageContainerStyle
		]
	}, [props.isMe, props.messageContainerStyle])

	const wrapperStyle = useMemo(() => {
		return [
			styles.wrapper,
			props.isMe ? meStyles.wrapper : otherStyles.wrapper,
			props.messageWrapperStyle
		]
	}, [props.isMe, props.messageWrapperStyle])

	const maybeRenderName = useCallback(() => {
		return props.showName && props.name ? (
			<Text style={styles.name}>{props.name}</Text>
		) : null
	}, [props.showName, props.name])

	const {
		renderAvatar,
		avatar,
		avatarImageProps,
		avatarSize,
		showAvatar,
		name,
		renderInitials,
		initialsBackgroundColor,
		initialsTextColor
	} = props
	const renderAvatarOrInitials = useCallback(() => {
		if (renderAvatar === null) return null
		// we make opacity 0 instead of hiding it to maintain the same width from the side
		const opacity = showAvatar === false ? 0 : 1
		const size = avatarSize || 40

		const Container: FunctionComponent<{}> = ({ children }) => (
			<View style={{ opacity }}>{children}</View>
		)

		if (avatar) {
			const avatarProps: AvatarProps = {
				avatar: avatar,
				imageProps: avatarImageProps,
				size
			}
			if (renderAvatar) return renderAvatar(avatarProps)
			return (
				<Container>
					<Avatar {...avatarProps} />
				</Container>
			)
		}
		const initialsProps: InitialsProps = {
			initials: getInitials(name),
			size,
			textColor: initialsTextColor,
			backgroundColor: initialsBackgroundColor || props.tintColor
		}
		if (renderInitials) return renderInitials(initialsProps)
		return (
			<Container>
				<Initials {...initialsProps} />
			</Container>
		)
	}, [
		avatar,
		avatarImageProps,
		avatarSize,
		renderAvatar,
		showAvatar,
		name,
		renderInitials,
		initialsBackgroundColor,
		initialsTextColor,
		props.tintColor
	])

	return (
		<View style={containerStyle}>
			<View style={wrapperStyle}>
				{renderAvatarOrInitials()}
				<View>
					{maybeRenderName()}
					<Bubble
						text={props.text}
						isMe={props.isMe}
						style={props.bubbleStyle}
						textStyle={props.bubbleTextStyle}
						bubbleRef={bubble as MutableRefObject<View>}
					/>
				</View>
			</View>
			{footer()}
		</View>
	)
}

export default React.memo(Message)

const styles = StyleSheet.create({
	container: {
		marginTop: 1,
		flexDirection: 'row'
	},
	// wrapper is concerned with which side the avatar is on relative to the bubble
	wrapper: {
		flex: 1
	},
	name: {
		marginLeft: 5
	}
})

const meStyles = StyleSheet.create({
	container: {
		justifyContent: 'flex-end'
	},
	wrapper: {
		flexDirection: 'row-reverse'
	}
})

const otherStyles = StyleSheet.create({
	container: {
		justifyContent: 'flex-end'
	},
	wrapper: {
		flexDirection: 'row'
	}
})
