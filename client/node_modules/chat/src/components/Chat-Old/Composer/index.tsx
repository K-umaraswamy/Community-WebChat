import React, { useState, useCallback, useMemo } from 'react'
import uuid from 'uuid'
import { View, StyleSheet } from 'react-native'
import { ComposerProps, InputProps, SendButtonProps, ChatProps } from '../types'
import Input from './Input'
import { MessageMedia, NewMessageModel, MessageMediaWithUri } from '../../../classes/Message/types'
import Send from './Send'

const emptyMedia: Omit<MessageMedia, 'url'>[] = []

export default React.memo((props: ComposerProps) => {
	// First, we set up a state manager for the composer's text.
	const [textState, setText] = useState(props.initialText || '')
	// if you pass a text prop, use that state instead
	const [text, onChangeText] = [
		props.text || textState,
		(props.text && props.onInputTextChanged) || setText
	]

	const [mediaState, setMedia] = useState<MessageMediaWithUri[]>(emptyMedia)
	const [media, onChangeMedia] = [
		props.media || mediaState,
		(props.media && props.onChangeMedia) || setMedia
	]

	const { textInputProps, renderTextInput } = props
	const renderInput = useCallback(() => {
		if (renderTextInput === null) return null

		const inputProps: InputProps = {
			inputProps: textInputProps,
			onChangeText,
			text,
			containerStyle: props.inputContainerStyle,
			placeholderColor: props.placeholderColor,
			placeholderText: props.placeholderText,
			style: props.inputStyle,
			tintColor: props.tintColor,
			inputRef: props.inputRef
		}

		if (renderTextInput) return renderTextInput(inputProps)

		return <Input {...inputProps} />
	}, [
		onChangeText,
		text,
		textInputProps,
		renderTextInput,
		props.inputContainerStyle,
		props.placeholderColor,
		props.placeholderText,
		props.inputStyle,
		props.tintColor,
		// TODO leave or take out?
		props.inputRef
	])

	const { user } = props
	const messagesReadyToSend = useMemo(() => {
		const messages: NewMessageModel[] = []
		if (media.length) {
			;(media as MessageMedia[]).forEach(item => {
				const message: NewMessageModel = {
					user,
					text: '',
					id: uuid.v4(),
					createdAt: new Date(),
					media: item
				}
				messages.push(message)
			})
		}
		if (text) {
			const message: NewMessageModel = {
				user,
				text: text && text.trim(),
				id: uuid.v4(),
				createdAt: new Date()
			}
			messages.push(message)
		}
		return messages
	}, [user, text, media])

	const { onSend } = props
	const send = useCallback(() => {
		if (messagesReadyToSend.length) {
			onChangeText('')
			onChangeMedia([])
			onSend(messagesReadyToSend)
		}
	}, [onChangeText, onChangeMedia, messagesReadyToSend, onSend])

	const { renderSendButton, sendButtonMode } = props
	const renderSend = useCallback(() => {
		if (renderSendButton === null) return null

		const mode: ChatProps['sendButtonMode'] = {
			empty: 'hidden',
			withText: 'icon',
			...(sendButtonMode || {})
		}
		const sendProps: SendButtonProps = {
			onSend: send,
			text,
			media,
			user,
			mode: (text && text.trim ? mode.withText : mode.empty) || 'icon'
		}
		if (renderSendButton) return renderSendButton(sendProps)

		return <Send {...sendProps} />
	}, [send, text, user, media, renderSendButton, sendButtonMode])

	return (
		<View style={props.containerStyle}>
			<View style={styles.wrapper}>
				{renderInput()}
				{renderSend()}
			</View>
		</View>
	)
})

const styles = StyleSheet.create({
	container: {},
	wrapper: {
		flexDirection: 'row'
	}
})
