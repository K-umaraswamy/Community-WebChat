import { FieldValue } from '@firebase/firestore-types'
import { ReactionOption } from '../Reaction/types'

export interface Message {
	id: string
	// roomId: string
}

export interface NewMessageModel extends Omit<Message, 'roomId'> {
	text: string
	createdAt: Date
	user: {
		id: string
		name: string
		avatar: string
	}
	// image?: string
	// // You can also add a video prop:
	// video?: string
	system?: boolean
	media?: MessageMedia
	reactions?: {
		[option in ReactionOption]: string[]
	}
	// Any additional custom parameters are passed through
}

export interface MessageMediaWithUrl {
	url: string
	uri?: string
	height: number
	width: number
	contentType: 'video' | 'image'
}

export interface MessageMediaWithUri {
	url: string
	uri?: string
	height: number
	width: number
	contentType: 'video' | 'image'
}

export type MessageMedia = MessageMediaWithUrl | MessageMediaWithUri

// export interface MessageMedia {
// 	url?: string
// 	uri: string
// 	height: number
// 	width: number
// 	contentType: 'video' | 'image'
// }

export interface NewMessageFormattedForServer
	extends Omit<NewMessageModel, 'createdAt'> {
	createdAt: FieldValue
}

export function isNewMessageModel(
	message: MessageModel
): message is NewMessageModel {
	return !!(message as NewMessageModel)
}

export function isNewMessageFormattedForServer(
	message: MessageModel
): message is NewMessageFormattedForServer {
	return !!(message as NewMessageFormattedForServer)
}

export interface EditMessageModel extends Message {
	text?: string
}

export type SendToRecipients = string[]

// you might send a message to multiple rooms
export type RoomId = string | string[]

// the message model can be one of them
export type MessageModel =
	| Message
	| NewMessageModel[]
	| EditMessageModel
	| MessageModelDocument[]
	| NewMessageFormattedForServer[]
	| NewMessageFormattedForServer

export interface MessageModelDocument
	extends Omit<NewMessageModel, 'createdAt'> {
	id: string
	createdAt: firebase.firestore.Timestamp
}

export type SendFromFeedRecipient =
	| {
			id: string // roomId
	  }
	| SendFromFeedRecipientArray

export interface SendFromFeedRecipientArray {
	recipients: { id: string; name: string }[]
}

export const recipientHasId = (
	recipient: SendFromFeedRecipient
): recipient is { id: string } => !!(recipient as { id: string })

export const recipientHasMembers = (
	recipient: SendFromFeedRecipient
): recipient is SendFromFeedRecipientArray =>
	!!(recipient as SendFromFeedRecipientArray)

export type SendFromFeedRecipients = SendFromFeedRecipient[]

export interface SendFromFeedModel extends Omit<NewMessageModel, 'id'> {
	recipients: SendFromFeedRecipientArray['recipients']
}
