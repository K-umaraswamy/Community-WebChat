import { ReactionConfig } from './types'
import Room from '../Room'
import { fuego } from '../../components/ChatProvider'
import { LastMessageServer } from '../Room/types'

export default class {
	private config: ReactionConfig
	constructor(config: ReactionConfig) {
		this.config = config
	}
	get path() {
		const { messagesPath } = new Room({ id: this.config.roomId })
		return `${messagesPath}/${this.config.messageId}`
	}
	verb(): { add: string; remove: string } {
		switch (this.config.reaction) {
			case 'like':
				return { add: 'liked', remove: 'unliked' }
			case 'love':
				return { add: 'loved', remove: 'unloved' }
			default: {
				console.warn(
					'reaction type is not valid. see reaction class:',
					this.config.reaction
				)
				return { add: '', remove: '' }
			}
		}
	}
	async add() {
		const { uid } = fuego.auth().currentUser as firebase.User
		const batch = fuego.db.batch()
		const messageRef = fuego.db.doc(this.path)
		batch.update(messageRef, {
			[`reactions.${this.config.reaction}`]: fuego.firebase.firestore.FieldValue.arrayUnion(
				uid
			)
		})
		const { path: roomPath } = new Room({ id: this.config.roomId })
		const roomRef = fuego.db.doc(roomPath)

		batch.update(roomRef, {
			lastMessage: this.makeLastMessage({ remove: false })
		})
		return batch.commit()
	}
	async remove() {
		const { uid } = fuego.auth().currentUser as firebase.User
		const batch = fuego.db.batch()
		const messageRef = fuego.db.doc(this.path)
		batch.update(messageRef, {
			[`reactions.${this.config.reaction}`]: fuego.firebase.firestore.FieldValue.arrayRemove(
				uid
			)
		})
		const { path: roomPath } = new Room({ id: this.config.roomId })
		const roomRef = fuego.db.doc(roomPath)

		batch.update(roomRef, {
			lastMessage: this.makeLastMessage({ remove: true })
		})
		return batch.commit()
	}
	makeReactionDescriptionText(remove?: boolean): string {
		if (this.config.descriptionText === null) return ''
		const { displayName } = fuego.auth().currentUser as firebase.User
		const { myName } = this.config
		const name = myName || displayName || ''
		const verb = remove ? this.verb().remove : this.verb().add
		if (this.config.descriptionText) {
			if (typeof this.config.descriptionText === 'string')
				return this.config.descriptionText
			if (typeof this.config.descriptionText !== 'function') {
				console.error(
					'üçá Juice Reaction error. The descriptionText property should be either 1) a string or 2) a function that returns a string. Instead, you passed',
					this.config.descriptionText,
					' of type ',
					typeof this.config.descriptionText,
					'. See the docs or command+hover over the descriptionText property in VS Code to details.'
				)
			} else {
				return this.config.descriptionText({
					reaction: this.config.reaction,
					name: name || '',
					text: this.config.text,
					verb,
					remove: !!remove
				})
			}
		}
		const firstName = name && name.split(' ')[0]
		let text = `${firstName} ${verb} a message`
		if (this.config.text) {
			text = `${firstName} ${verb} "${this.config.text}"`
		}
		return text
	}
	makeLastMessage(options: { remove?: boolean }): LastMessageServer {
		const { displayName: name = '' } = fuego.auth().currentUser as firebase.User
		return {
			id: '',
			createdAt: fuego.firebase.firestore.FieldValue.serverTimestamp(),
			name: name || '',
			system: true,
			text: this.makeReactionDescriptionText(options.remove)
		}
	}
}
