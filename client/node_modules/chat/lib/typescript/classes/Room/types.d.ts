import { FieldValue, Timestamp } from '@firebase/firestore-types';
import * as firebase from 'firebase';
export interface LastMessage {
    createdAt: Date;
    text: string;
    name: string;
    system: boolean;
    id: string;
}
export interface LastMessageServer extends Omit<LastMessage, 'createdAt'> {
    createdAt: FieldValue;
}
/**
 * Unread count schema in the members dictionary for each room
 */
export interface UnreadCount {
    count: number;
    /**
     * The timestamp of the last time you cleared messages.
     */
    lastCleared: Date;
    /**
     * Details of the last message you saw.
     */
    lastSeen: {
        id: string;
        createdAt: Date;
    };
}
export interface UnreadCountDocument extends Omit<UnreadCount, 'lastCleared'> {
    lastCleared: firebase.firestore.Timestamp;
}
export interface UnreadCountServer extends Omit<UnreadCount, 'lastCleared'> {
    lastCleared: firebase.firestore.FieldValue;
}
export interface RoomPropertiesModel {
    id: string;
    avatar?: string;
    members?: RoomMembers;
    name?: string;
}
export interface Typing {
    state: 'typing' | 'nothing';
    lastChanged: typeof firebase.database.ServerValue.TIMESTAMP;
}
export interface RoomMember {
    typing?: Typing;
    exists: boolean;
    name: string;
    nickname?: string;
    avatar?: string;
    joinedAt: FieldValue;
    unreadCount?: UnreadCount;
}
export interface ExistingRoomMember {
    nickname?: string;
    avatar?: string;
}
export interface NewRoomMember extends RoomMember {
}
/**
 * Dictionary of members in the room.
 */
export interface RoomMembers {
    [id: string]: RoomMember;
}
/**
 * Configuration for the room class. Members doesn't need to include me.
 *
 * @example
 * ```
 * const room = new Room(config: NewRoomModel)
 * await room.create()
 * ```
 */
export interface NewRoomModel extends Omit<RoomPropertiesModel, 'id'> {
    members: RoomMembers;
}
export interface CreateCallableRoomModel extends Partial<RoomPropertiesModel> {
    recipients: string[];
}
export interface EditRoomModel extends Omit<RoomPropertiesModel, 'members'> {
    members?: RoomMembers;
    name?: string;
    lastMessage?: LastMessage;
}
export interface ExistingRoomModel extends RoomPropertiesModel {
    lastMessage: LastMessage;
    members: RoomMembers;
    unreadCount?: number;
    createdAt: FieldValue;
    lastEdited: FieldValue;
    currentMembers: string[];
}
export interface CreateRoomModel extends Omit<Omit<ExistingRoomModel, 'id'>, 'lastMessage'> {
    lastMessage: LastMessageServer;
}
export interface CreateRoomCallableModel extends Omit<RoomPropertiesModel, 'id'> {
    members: RoomMembers;
}
interface LastMessageDocument extends Omit<LastMessage, 'createdAt'> {
    createdAt: Timestamp;
}
export interface ExistingRoomDocument extends Omit<ExistingRoomModel, 'lastMessage'> {
    lastMessage: LastMessageDocument;
}
export declare type RoomModel = RoomPropertiesModel | NewRoomModel | ExistingRoomModel | CreateCallableRoomModel;
export declare function currentUserExists(user: firebase.User | null): user is firebase.User;
export declare function roomIsEditModel(room: RoomModel): room is EditRoomModel;
export declare function roomIsNewModel(room: RoomModel): room is NewRoomModel;
export declare function roomIsCreateCallable(room: RoomModel): room is CreateCallableRoomModel;
export {};
