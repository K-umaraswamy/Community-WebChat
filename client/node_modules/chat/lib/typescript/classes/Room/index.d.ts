import { RoomModel, RoomMembers } from './types';
export default class {
    private room;
    constructor(room: RoomModel);
    get path(): string;
    get messagesPath(): string;
    getUnreadCount(): number;
    /**
     * Views message function for a room.
     *
     * To use this in a react component out-of-the-box, I recommend using the [[useViewMessage]] hook. It will handle all this for you.
     *
     * @param messageId ID of the message you're viewing
     * @param messageCreatedAt Timestamp of the message which you're viewing, found in message.createdAt
     *
     * @remarks
     * If you aren't using the useViewMessage hook:
     * This function should be used with care. You don't want to send 500 writes if someone views 500 messages.
     * You only want to send a read for the most recent message being viewed, assuming it's someone else's message.
     * Also, you should be memoizing the last message you sent that you viewed to avoid repeats. Again, this is all handled by useViewMessages.
     *
     * @returns Promise that only resolves while you're online.
     */
    viewMessage(messageId: string, messageCreatedAt: Date): Promise<void>;
    getArrayOfMembersOtherThanMe(): import("./types").RoomMember[];
    getName(): string;
    getInitials(maxNumberOfInitials?: number): string;
    /**
     * @returns
     * A promise.all array of responses. The first array is for adding a system message; the second is for updating the room object.
     */
    leave(): Promise<void | null>;
    join(): Promise<void> | null;
    addMembers(members: RoomMembers): Promise<void>;
    removeMembers(members: RoomMembers): Promise<void>;
    create(): Promise<void | null>;
    createViaCallable(): Promise<firebase.functions.HttpsCallableResult>;
    edit(): Promise<void> | null;
    getUsersTyping(): import("./types").RoomMember[];
    updateOnFirebase(): Promise<void>;
    addToFirebase(): Promise<void>;
}
