import { MessageModel, RoomId, NewMessageModel, SendFromFeedRecipients } from './types';
import { RoomMembers, RoomMember } from '../Room/types';
import { ReactionOption } from '../Reaction/types';
export default class {
    private message;
    constructor(message: MessageModel);
    /**
     * A function to send one message to many different existing rooms/group chats separately.
     *
     * @param recipients An array of rooms ids where this message will be sent to separately
     * @returns Promise that returns a room ID if there is only one (or promise that resolves as null if the message object isn't valid)
     */
    sendToRooms(recipients: string[]): Promise<import("firebase").functions.HttpsCallableResult>;
    /**
     * A function to send one message to many different people individually.
     * For each recipient, if a room for them doesn't exist, it will get created and the message will be added to it.
     * If the room does exist, the message will be added to it.
     *
     * @param recipients An array of user ids whom this message will be sent to separately
     * @returns Promise that returns a room ID (or promise that resolves as null if the message object isn't valid)
     */
    sendToPeople(recipients: string[]): Promise<import("firebase").functions.HttpsCallableResult>;
    /**
     * Sends message to a group. This is useful when you don't have a room id but do have a list of people you want to send a message to. If you want to send the message to them separately, try sendToPeople instead.
     * This function will create a group chat with the specified users if one doesn't exist yet. If it does exist already, then it will add to that existing room.
     * @param recipients Array of uids for people in the group this message should send to.
     * @returns Promise that returns a room ID (or promise that resolves as null if the message object isn't valid)
     */
    sendToGroup(recipients: string[]): Promise<import("firebase").functions.HttpsCallableResult>;
    /**
     *  deprecated: fuck this function
     */
    sendFromFeed(to: SendFromFeedRecipients): Promise<any[]>;
    /**
     * Send message by adding it directly to the backend
     * @param roomId The id of the room you want to send this to. Could also be an array of ids, if the same message should go to multiple rooms.
     */
    send(roomId: RoomId): void;
    edit(roomId: string): Promise<void>;
    formatForRender(): NewMessageModel[] | NewMessageModel | null;
    formatForSend(): this;
    addToFirebase(roomId: RoomId): Promise<void>;
    updateOnFirebase(roomId: string): Promise<void>;
    getUsersWhoReacted(reaction: ReactionOption, { roomMembers }: {
        roomMembers: RoomMembers;
    }): RoomMember[];
}
