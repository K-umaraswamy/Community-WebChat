import { FlatListProps, ViewStyle, Animated, TextStyle, ImageProps, ListRenderItemInfo } from 'react-native';
import { ReactNode, ComponentType } from 'react';
import { SwipeableProperties } from 'react-native-gesture-handler/Swipeable';
import { LinearGradient } from 'expo-linear-gradient';
import { ExistingRoomModel, RoomMembers, LastMessage } from '../../classes/Room/types';
export default interface InboxProps<InboxItem extends ExistingRoomModel = ExistingRoomModel> {
    flatListProps?: Omit<Omit<FlatListProps<InboxItem>, 'renderItem'>, 'data'>;
    keyExtractor?: FlatListProps<InboxItem>['keyExtractor'];
    renderItem?: FlatListProps<InboxItem>['renderItem'];
    /**
     * if you want to use your own renderItem function, but include the props we made
     * the alternative is a normal props.renderItem() which gets the raw flatlist data
     */
    renderItemWithProps?: (props: InboxItemProps<InboxItem>) => ReactNode;
    rooms: Array<InboxItem>;
    renderHeader?: null | ((headerProps: InboxMethodProps<InboxItem>['renderHeader']) => ReactNode);
    renderFooter?: null | ((footerProps: InboxMethodProps<InboxItem>['renderFooter']) => ReactNode);
    ContainerComponent?: ComponentType;
    HeaderComponent?: ComponentType<InboxMethodProps<InboxItem>['renderHeader']>;
    FooterComponent?: ComponentType<InboxMethodProps<InboxItem>['renderFooter']>;
    InboxItemComponent?: ComponentType<InboxItemProps<InboxItem>>;
    containerStyle?: ViewStyle;
    roomNameFunc?: (arg: InboxMethodProps<InboxItem>['roomNameFunc']) => string;
    onPressItem: (id: string, pointerInside?: boolean) => void;
    animatedScrollNode?: Animated.Value;
    extraData?: FlatListProps<InboxItem>['extraData'];
    bigHeader?: boolean;
    headerTitle?: string;
    renderItemTitle?: ((title: string) => ReactNode) | null;
    renderItemDate?: ((date: Date) => ReactNode) | null;
    ItemTitleComponent?: ComponentType<InboxItemTitleProps>;
    titleStyle?: TextStyle;
    titleContainerStyle?: ViewStyle;
    ItemDateComponent?: ComponentType<DateProps>;
    dateToStringFunc?: DateProps['dateToStringFunc'];
    dateStyle?: TextStyle;
    unreadIndicatorColor?: UnreadIndicatorProps['backgroundColor'];
    unreadTextColor?: UnreadIndicatorProps['textColor'];
    showUnreadIndicatorCount?: UnreadIndicatorProps['showCount'];
    showUnreadIndicator?: UnreadIndicatorProps['show'];
    UnreadIndicatorComponent?: ComponentType<UnreadIndicatorProps>;
    renderUnreadIndicator?: ((props: UnreadIndicatorProps) => ReactNode) | null;
    unreadIndicatorStyle?: UnreadIndicatorProps['backgroundStyle'];
    unreadIndicatorTextStyle?: UnreadIndicatorProps['textStyle'];
    unreadIndicatorPostion?: 'left' | 'right' | 'bottom-left' | 'bottom-right' | 'top-right' | 'top-left' | 'center-left' | 'center-right';
    onPressNewRoom?: () => void;
    renderItemSubtitle?: (lastMessageText: string) => ReactNode;
    ItemSubtitleComponent?: ComponentType<InboxItemSubtitleProps>;
    itemSubtitleTextStyle?: InboxItemSubtitleProps['textStyle'];
    renderAvatar?: null | ((props: AvatarProps) => ReactNode);
    renderInitials?: null | ((props: InitialsProps) => ReactNode);
    ItemAvatarComponent?: ComponentType<AvatarProps>;
    ItemInitialsComponent?: ComponentType<InitialsProps>;
    prioritizeAvatarOverInitials?: boolean;
    roomInitialsFunc?: (arg: InboxMethodProps<InboxItem>['roomInitialsFunc']) => string;
    avatarSize?: AvatarProps['size'];
    avatarImageProps?: AvatarProps['imageProps'];
    initialsTextStyle?: InitialsProps['textStyle'];
    initialsContainerStyle?: InitialsProps['containerStyle'];
    fallbackToMultipleAvatarsIfNoGroupAvatar?: boolean;
    fallbackToMultipleAvatarsIfNoGroupName?: boolean;
    disableAvatar?: boolean;
    initialsBackgroundColor?: InitialsProps['backgroundColor'];
    initialsTextColor?: InitialsProps['textColor'];
    onLongPressItem?: (id: string, pointerInside?: boolean) => void;
    swipeableRow?: boolean;
    safeArea?: boolean;
    /**
     * An array of items that will show on the right when the user swipes.
     *
     * @example
     * ```javascript
     * import { Inbox, Room } from 'usechat'
     * import { Animated } from 'react-native'
     * import { Ionicons } from '@expo/vector-icons'
     *
     * return (
     * 	<Inbox
     *   swipeActionWidth={80}
     *   swipeRightActions={[
     *  	 {
     *  		 text: 'Delete',
     *  		 backgroundColor: 'red',
     *  		 color: 'white',
     *  		 renderIcon: progress => (
     *  			 <Animated.View
     *  				 style={{
     *  					 transform: [
     *  						 { scale: progress.interpolate({ inputRange: [0, 1.2], outputRange: [0.5, 1.2], extrapolate: 'clamp' }) },
     *  					 ],
     *  					 opacity: progress.interpolate({ inputRange: [0, 1], outputRange: [0, 1] }),
     *  				 }}
     *  			 >
     *  				 <Ionicons style={{ marginTop: 10 }} name="ios-trash" size={30} color="white" />
     *  			 </Animated.View>
     *  		 ),
     *  		 onPress: id => new Room({ id }).leave(),
     *  	 },
     *   ]}
     * 	/>
     * )
     * ```
     */
    swipeRightActions?: SwipeableProps['leftActions'];
    /**
     * An array of items that will show on the left when the user swipes.
     *
     * @example
     * ```javascript
     * import { Inbox, Room } from 'usechat'
     * import { Animated } from 'react-native'
     * import { Ionicons } from '@expo/vector-icons'
     *
     * return (
     * 	<Inbox
     *   swipeActionWidth={80}
     *   swipeLeftActions={[
     *  	 {
     *  		 text: 'Delete',
     *  		 backgroundColor: 'red',
     *  		 color: 'white',
     *  		 renderIcon: progress => (
     *  			 <Animated.View
     *  				 style={{
     *  					 transform: [
     *  						 { scale: progress.interpolate({ inputRange: [0, 1.2], outputRange: [0.5, 1.2], extrapolate: 'clamp' }) },
     *  					 ],
     *  					 opacity: progress.interpolate({ inputRange: [0, 1], outputRange: [0, 1] }),
     *  				 }}
     *  			 >
     *  				 <Ionicons style={{ marginTop: 10 }} name="ios-trash" size={30} color="white" />
     *  			 </Animated.View>
     *  		 ),
     *  		 onPress: id => new Room({ id }).leave(),
     *  	 },
     *   ]}
     * 	/>
     * )
     * ```
     */
    swipeLeftActions?: SwipeableProps['rightActions'];
    renderSwipeAction?: SwipeableProps['renderAction'];
    swipeActionWidth?: SwipeableProps['actionWidth'];
    itemBackgroundColor?: string;
    swipeableRowProps?: SwipeableProps['gestureHandlerProps'];
    enableRoomTransitions?: boolean;
    roomTransitionConfig?: ReactNode;
    showTypingIndicator?: boolean;
    renderTypingIndicator?: () => ReactNode | null;
    membersToTypingStringFunc?: (members: RoomMembers) => string;
    maxNumberOfInitials?: number;
    unreadIndicatorType?: UnreadIndicatorProps['type'];
    unreadIndicatorGradientProps?: UnreadIndicatorProps['gradientProps'];
    unreadIndicatorSize?: UnreadIndicatorProps['size'];
    itemContainerStyle?: ViewStyle;
    renderRightActions?: SwipeableProps['renderRightActions'];
    renderLeftActions?: SwipeableProps['renderLeftActions'];
    actionTextStyle?: SwipeableProps['textStyle'];
    separatorColor?: string;
    separatorSize?: number;
}
export interface InboxMethodProps<InboxItem extends ExistingRoomModel = ExistingRoomModel> {
    renderItem: ListRenderItemInfo<InboxItem>;
    renderHeader: {
        scrollY: Animated.Value;
        big?: boolean;
        onPressNewRoom?: InboxProps<InboxItem>['onPressNewRoom'];
    };
    renderFooter: {
        scrollY: Animated.Value;
    };
    roomInitialsFunc: {
        members: RoomMembers;
        name: string;
        maxNumberOfInitials: InboxProps<InboxItem>['maxNumberOfInitials'];
    };
    roomNameFunc: {
        members: RoomMembers;
        name: string;
    };
}
export interface InboxItemProps<InboxItem extends ExistingRoomModel = ExistingRoomModel> {
    onPress?: (pointerInside?: boolean) => ReturnType<InboxProps<InboxItem>['onPressItem']>;
    onLongPress?: (pointerInside?: boolean) => void;
    lastMessageCreatedAt: LastMessage['createdAt'];
    lastMessageText: LastMessage['text'];
    name: string;
    unreadCount: ExistingRoomModel['unreadCount'];
    renderTitle?: InboxProps<InboxItem>['renderItemTitle'];
    TitleComponent?: InboxProps<InboxItem>['ItemTitleComponent'];
    renderDate?: InboxProps<InboxItem>['renderItemDate'];
    titleContainerStyle?: InboxProps<InboxItem>['titleContainerStyle'];
    titleStyle?: InboxProps<InboxItem>['titleStyle'];
    DateComponent?: InboxProps<InboxItem>['ItemDateComponent'];
    unreadTextColor?: InboxProps<InboxItem>['unreadTextColor'];
    unreadIndicatorColor?: InboxProps<InboxItem>['unreadIndicatorColor'];
    showUnreadIndicatorCount?: InboxProps<InboxItem>['showUnreadIndicatorCount'];
    showUnreadIndicator: InboxProps<InboxItem>['showUnreadIndicator'];
    UnreadIndicatorComponent?: InboxProps<InboxItem>['UnreadIndicatorComponent'];
    renderUnreadIndicator?: InboxProps<InboxItem>['renderUnreadIndicator'];
    unreadIndicatorStyle?: InboxProps<InboxItem>['unreadIndicatorStyle'];
    unreadIndicatorTextStyle?: InboxProps<InboxItem>['unreadIndicatorTextStyle'];
    unreadIndicatorPosition?: InboxProps<InboxItem>['unreadIndicatorPostion'];
    dateToStringFunc?: InboxProps<InboxItem>['dateToStringFunc'];
    renderSubtitle?: InboxProps<InboxItem>['renderItemSubtitle'];
    SubtitleComponent?: InboxProps<InboxItem>['ItemSubtitleComponent'];
    subtitleTextStyle?: InboxProps<InboxItem>['itemSubtitleTextStyle'];
    roomInitialsFunc?: InboxProps<InboxItem>['roomInitialsFunc'];
    renderAvatar?: InboxProps<InboxItem>['renderAvatar'];
    renderInitials?: InboxProps<InboxItem>['renderInitials'];
    AvatarComponent?: InboxProps<InboxItem>['ItemAvatarComponent'];
    InitialsComponent?: InboxProps<InboxItem>['ItemInitialsComponent'];
    prioritizeAvatarOverInitials?: InboxProps<InboxItem>['prioritizeAvatarOverInitials'];
    avatar?: string | {
        initials: string;
        avatar: string;
    }[];
    avatarSize?: AvatarProps['size'];
    avatarImageProps?: AvatarProps['imageProps'];
    initials: string;
    initialsTextStyle?: InitialsProps['textStyle'];
    initialsContainerStyle?: InitialsProps['containerStyle'];
    disableAvatar?: InboxProps<InboxItem>['disableAvatar'];
    initialsBackgroundColor?: InitialsProps['backgroundColor'];
    initialsTextColor?: InitialsProps['textColor'];
    swipeRightActions?: SwipeableProps['leftActions'];
    swipeLeftActions?: SwipeableProps['rightActions'];
    renderSwipeAction?: SwipeableProps['renderAction'];
    swipeActionWidth?: SwipeableProps['actionWidth'];
    swipeable?: boolean;
    id: string;
    backgroundColor: InboxProps<InboxItem>['itemBackgroundColor'];
    swipeableRowProps?: SwipeableProps['gestureHandlerProps'];
    unreadIndicatorType?: UnreadIndicatorProps['type'];
    unreadIndicatorGradientProps?: UnreadIndicatorProps['gradientProps'];
    unreadIndicatorSize?: UnreadIndicatorProps['size'];
    containerStyle?: InboxProps<InboxItem>['itemContainerStyle'];
    dateStyle?: InboxProps<InboxItem>['dateStyle'];
    renderRightActions?: SwipeableProps['renderRightActions'];
    renderLeftActions?: SwipeableProps['renderLeftActions'];
    actionTextStyle?: SwipeableProps['textStyle'];
    renderTypingIndicator?: InboxProps<InboxItem>['renderTypingIndicator'];
    showTypingIndicator?: InboxProps<InboxItem>['showTypingIndicator'];
    numberOfPeopleTyping?: number;
}
export interface DateProps {
    date: Date;
    dateToStringFunc?: (date: Date) => string;
    style?: TextStyle;
}
export interface InboxItemTitleProps {
    title: string;
    style?: TextStyle;
    containerStyle?: ViewStyle;
}
export interface InboxItemSubtitleProps {
    lastMessageText: string;
    textStyle?: TextStyle;
}
export interface UnreadIndicatorProps {
    backgroundColor?: string;
    textColor?: string;
    showCount?: boolean;
    show?: boolean;
    unreadCount?: number;
    backgroundStyle?: ViewStyle;
    textStyle?: TextStyle;
    position: 'bottom' | 'top' | 'center';
    type: 'gradient' | 'solid';
    gradientProps?: LinearGradient['props'];
    size?: number;
}
export interface AvatarProps {
    avatar: ExistingRoomModel['avatar'];
    size: number;
    imageProps?: ImageProps;
    ImageComponent?: ComponentType;
}
export interface InitialsProps {
    size: number;
    initials: string;
    textStyle?: TextStyle;
    containerStyle?: ViewStyle;
    textColor?: string;
    backgroundColor?: string;
}
export interface SwipeableProps {
    rightActions?: null | SwipeableAction[];
    leftActions?: null | SwipeableAction[];
    id: string;
    actionWidth?: number;
    gestureHandlerProps?: SwipeableProperties;
    textStyle?: TextStyle;
    renderLeftActions?: null | ((actions: SwipeableAction[], progress: Animated.Value | Animated.AnimatedInterpolation, drag: Animated.AnimatedInterpolation) => ReactNode);
    renderRightActions?: null | ((action: SwipeableAction[], progress: Animated.Value | Animated.AnimatedInterpolation, drag: Animated.AnimatedInterpolation) => ReactNode);
    renderAction?: null | ((action: SwipeableAction, index: number, progress: Animated.Value | Animated.AnimatedInterpolation, drag: Animated.AnimatedInterpolation, side: 'left' | 'right') => ReactNode);
}
export interface SwipeableAction {
    text: string;
    renderIcon?: (progress?: Animated.Value | Animated.AnimatedInterpolation, drag?: Animated.AnimatedInterpolation) => ReactNode;
    color: string;
    backgroundColor: string;
    onPress?: (inboxItemId: string) => void;
}
