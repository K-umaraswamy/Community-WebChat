import { EditRoomModel, CreateCallableRoomModel, ExistingRoomDocument, ExistingRoomModel } from '../../classes/Room/types';
import { UseRoomType } from './types';
import { QueryDataHandler } from '@nandorojo/fuego/lib/typescript/hooks/useFuego/types';
declare const _default: ({ id, ...config }: UseRoomType, options?: QueryDataHandler<ExistingRoomDocument>) => {
    data: ExistingRoomModel | null;
    loading: boolean;
    error: import("@nandorojo/fuego/lib/typescript/hooks/useFuego/types").QueryError;
    ref: import("@nandorojo/fuego").FirestoreRefType;
    create: (room: CreateCallableRoomModel) => Promise<import("firebase").functions.HttpsCallableResult>;
    edit: (room: EditRoomModel) => Promise<void> | null;
    usersAreTyping: boolean;
    namesOfUsersTyping: string[];
};
/**
 * Fetches or subscribes to a chatroom. It automatically handles unmounts, etc.
 *
 * @param config - config dictionary.
 * @param config.id - Required: the unique ID for this chatroom, typically generated by the backend. If using the [[useInbox]] hook, each item in [[useInbox]]'s data array has this ID.
 * @param config.listen Boolean to determine if this room should update state as a subscription. Default false.
 * @param options - added options dictionary for useRoom
 *
 * @remarks Look at the fuego library's useFuego hook to see all the available arguments for config and options.
 *
 * @returns { data: room, loading, error, ref, create, edit, usersAreTyping, namesOfUsersTyping } data is formatted for rendering room.
 */
export default _default;
