{"version":3,"sources":["index.ts"],"names":["useRef","useMemo","useCallback","useEffect","Room","messages","roomId","lastMessageId","formatted","messagesRef","roomIdRef","current","onViewableItemsChanged","info","viewableItems","forEach","item","isViewable","message","id","mostRecentMessageId","viewMessage","createdAt"],"mappings":"AAAA,OAASA,MAAT,CAAiBC,OAAjB,CAA0BC,WAA1B,CAAuCC,SAAvC,KAAwD,OAAxD,CAGA,MAAOC,CAAAA,IAAP,KAAiB,oBAAjB,CAEA,cAAe,eAMZ,IALFC,CAAAA,QAKE,MALFA,QAKE,CAJFC,MAIE,MAJFA,MAIE,CACF,GAAMC,CAAAA,aAAa,CAAGP,MAAM,CAAgB,IAAhB,CAA5B,CACA,GAAMQ,CAAAA,SAAkB,CAAGP,OAAO,CAAC,iBAAMI,CAAAA,QAAQ,EAAI,EAAlB,EAAD,CAAuB,CAACA,QAAD,CAAvB,CAAlC,CAEA,GAAMI,CAAAA,WAAW,CAAGT,MAAM,CAAU,EAAV,CAA1B,CACA,GAAMU,CAAAA,SAAS,CAAGV,MAAM,CAAC,EAAD,CAAxB,CAEAG,SAAS,CAAC,UAAM,CACfO,SAAS,CAACC,OAAV,CAAoBL,MAApB,CACAG,WAAW,CAACE,OAAZ,CAAsBH,SAAtB,CACA,CAHQ,CAGN,CAACA,SAAD,CAAYF,MAAZ,CAHM,CAAT,CAKA,GAAMM,CAAAA,sBAEqB,CAAGV,WAAW,CAAC,SAAAW,IAAI,CAAI,CACjDA,IAAI,CAACC,aAAL,CAAmBC,OAAnB,CAA2B,SAACC,IAAD,CAAqB,CAC/C,GAAI,CAACA,IAAI,CAACC,UAAV,CAAsB,OACtB,GAAMC,CAAAA,OAAO,CAAGF,IAAI,CAACA,IAArB,CACA,GAAMG,CAAAA,EAAE,CAAGD,OAAO,CAACC,EAAnB,CACA,GAAMC,CAAAA,mBAAmB,CAAGX,WAAW,CAACE,OAAZ,CAAoB,CAApB,EAAuBQ,EAAnD,CACA,GAAIA,EAAE,GAAKC,mBAAP,EAA8Bb,aAAa,CAACI,OAAd,GAA0BQ,EAA5D,CAAgE,CAC/DZ,aAAa,CAACI,OAAd,CAAwBQ,EAAxB,CACA,GAAIf,CAAAA,IAAJ,CAAS,CAAEe,EAAE,CAAET,SAAS,CAACC,OAAhB,CAAT,EAAoCU,WAApC,CAAgDF,EAAhD,CAAoDD,OAAO,CAACI,SAA5D,EACA,CACD,CATD,EAUA,CAXwC,CAWtC,EAXsC,CAFzC,CAcA,MAAOV,CAAAA,sBAAP,CACA","sourcesContent":["import { useRef, useMemo, useCallback, useEffect } from 'react'\nimport { NewMessageModel } from '../../classes/Message/types'\nimport { FlatListProps, ViewToken } from 'react-native'\nimport Room from '../../classes/Room'\n\nexport default function<Model extends NewMessageModel>({\n\tmessages,\n\troomId\n}: {\n\tmessages: Model[] | null\n\troomId: string\n}) {\n\tconst lastMessageId = useRef<string | null>(null)\n\tconst formatted: Model[] = useMemo(() => messages || [], [messages])\n\n\tconst messagesRef = useRef<Model[]>([])\n\tconst roomIdRef = useRef('')\n\n\tuseEffect(() => {\n\t\troomIdRef.current = roomId\n\t\tmessagesRef.current = formatted\n\t}, [formatted, roomId])\n\n\tconst onViewableItemsChanged: FlatListProps<\n\t\tModel\n\t>['onViewableItemsChanged'] = useCallback(info => {\n\t\tinfo.viewableItems.forEach((item: ViewToken) => {\n\t\t\tif (!item.isViewable) return\n\t\t\tconst message = item.item as Model\n\t\t\tconst id = message.id\n\t\t\tconst mostRecentMessageId = messagesRef.current[0].id\n\t\t\tif (id === mostRecentMessageId && lastMessageId.current !== id) {\n\t\t\t\tlastMessageId.current = id\n\t\t\t\tnew Room({ id: roomIdRef.current }).viewMessage(id, message.createdAt)\n\t\t\t}\n\t\t})\n\t}, [])\n\treturn onViewableItemsChanged\n}\n"]}