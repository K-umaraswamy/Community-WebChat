{"version":3,"sources":["index.ts"],"names":["useEffect","useRef","Room","fuego","config","delay","text","id","path","ref","db","doc","timer","user","auth","currentUser","uid","mounted","lastTyped","current","typedAt","Date","now","update","setTimeout","e","console","error","clearTimeout"],"mappings":"mEAAA,OAASA,SAAT,CAAoBC,MAApB,KAAkC,OAAlC,CACA,OAASC,IAAT,KAAqB,aAArB,CACA,OAASC,KAAT,KAAsB,+BAAtB,CAWA,eAAe,SAACC,MAAD,CAAmD,IAAzBC,CAAAA,KAAyB,2DAAT,IAAS,kBACvCD,MADuC,CACzDE,IADyD,CACzDA,IADyD,uBAClD,EADkD,cAC9CC,EAD8C,CACvCH,MADuC,CAC9CG,EAD8C,UAEhD,GAAIL,CAAAA,IAAJ,CAAS,CAAEK,EAAE,CAAFA,EAAF,CAAT,CAFgD,CAEzDC,IAFyD,MAEzDA,IAFyD,CAGjE,GAAMC,CAAAA,GAAG,CAAGN,KAAK,CAACO,EAAN,CAASC,GAAT,CAAaH,IAAb,CAAZ,CACA,GAAMI,CAAAA,KAAK,CAAGX,MAAM,EAApB,CACA,GAAMY,CAAAA,IAAI,CAAGV,KAAK,CAACW,IAAN,GAAaC,WAA1B,CACA,GAAMC,CAAAA,GAAG,CAAIH,IAAI,EAAIA,IAAI,CAACG,GAAd,EAAsB,aAAlC,CAEA,GAAMC,CAAAA,OAAO,CAAGhB,MAAM,CAAC,KAAD,CAAtB,CACA,GAAMiB,CAAAA,SAAS,CAAGjB,MAAM,CAAC,CAAD,CAAxB,CAEAD,SAAS,CAAC,UAAM,CACf,GAAI,CACH,GAAIiB,OAAO,CAACE,OAAZ,CAAqB,CACpB,GAAMC,CAAAA,OAAO,CAAGC,IAAI,CAACC,GAAL,EAAhB,CAEAJ,SAAS,CAACC,OAAV,CAAoBC,OAApB,CAEAX,GAAG,CAACc,MAAJ,+BACaP,GADb,WAC4B,IAD5B,GAIAJ,KAAK,CAACO,OAAN,CAAgBK,UAAU,CAAC,UAAM,CAChCf,GAAG,CAACc,MAAJ,+BACaP,GADb,WAC4B,KAD5B,GAGA,CAJyB,CAIvBX,KAJuB,CAA1B,CAMA,CAfD,IAeO,CACNY,OAAO,CAACE,OAAR,CAAkB,IAAlB,CACA,CACD,CAAC,MAAOM,CAAP,CAAU,CACXC,OAAO,CAACC,KAAR,CAAc,yBAAd,CAAyCF,CAAzC,EACA,CAED,MAAO,WAAM,CAEZ,GAAIb,KAAK,CAACO,OAAV,CAAmBS,YAAY,CAAChB,KAAK,CAACO,OAAP,CAAZ,CACnB,CAHD,CAIA,CA5BQ,CA4BN,CAACb,IAAD,CAAOU,GAAP,CAAYX,KAAZ,CAAmBG,IAAnB,CA5BM,CAAT,CA8BAR,SAAS,CAAC,UAAM,CACf,MAAO,WAAM,CACZ,GAAI,CAEHS,GAAG,CAACc,MAAJ,+BACaP,GADb,WAC4B,KAD5B,GAGA,CAAC,MAAOS,CAAP,CAAU,CACXC,OAAO,CAACC,KAAR,CAAc,yBAAd,CAAyCF,CAAzC,EACA,CACD,CATD,CAUA,CAXQ,CAWN,EAXM,CAAT,CAYA,CArDD","sourcesContent":["import { useEffect, useRef } from 'react'\nimport { Room } from '../../index'\nimport { fuego } from '../../components/ChatProvider'\nimport { UseTypingConfig } from './types'\n\n/**\n * useTyping updates the backend every time a user types, setting it to false after a certain delay.\n *\n * @param config { text, id } A dictionary that takes in the Input's current text value and the chatroom ID.\n * @param delay How long the timer delay should be before the backend is told we're no longer typing.\n *\n * @returns undefined\n */\nexport default (config: UseTypingConfig, delay: number = 1500) => {\n\tconst { text = '', id } = config\n\tconst { path } = new Room({ id })\n\tconst ref = fuego.db.doc(path)\n\tconst timer = useRef<number>()\n\tconst user = fuego.auth().currentUser as firebase.User\n\tconst uid = (user && user.uid) || 'tester_name'\n\t// ensures that typing only happens on update, not on mount\n\tconst mounted = useRef(false)\n\tconst lastTyped = useRef(0)\n\n\tuseEffect(() => {\n\t\ttry {\n\t\t\tif (mounted.current) {\n\t\t\t\tconst typedAt = Date.now()\n\t\t\t\t// const last = lastTyped.current\n\t\t\t\tlastTyped.current = typedAt\n\t\t\t\t// if ((typedAt - last) / 1000 >= delay) {\n\t\t\t\tref.update({\n\t\t\t\t\t[`members.${uid}.typing`]: true\n\t\t\t\t\t// [`members.${uid}.lastTyped`]: new Date()\n\t\t\t\t})\n\t\t\t\ttimer.current = setTimeout(() => {\n\t\t\t\t\tref.update({\n\t\t\t\t\t\t[`members.${uid}.typing`]: false\n\t\t\t\t\t})\n\t\t\t\t}, delay)\n\t\t\t\t// }\n\t\t\t} else {\n\t\t\t\tmounted.current = true\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error('use typing update error', e)\n\t\t}\n\n\t\treturn () => {\n\t\t\t// cleanup on update\n\t\t\tif (timer.current) clearTimeout(timer.current)\n\t\t}\n\t}, [text, uid, delay, path])\n\n\tuseEffect(() => {\n\t\treturn () => {\n\t\t\ttry {\n\t\t\t\t// mark indicator as false\n\t\t\t\tref.update({\n\t\t\t\t\t[`members.${uid}.typing`]: false\n\t\t\t\t})\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('unmount usetyping error', e)\n\t\t\t}\n\t\t}\n\t}, [])\n}\n"]}