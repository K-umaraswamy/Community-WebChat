{"version":3,"sources":["index.ts"],"names":["useFuego","useMemo","fuego","chat","Room","orderBy","config","options","currentUser","auth","uid","where","path","roomsCollection","query","listen","data","response","rooms","isListOfRoomDocs","inbox","formatted","map","room","lastMessage","createdAt","toDate","unreadCount","getUnreadCount"],"mappings":"o7BAAA,OAASA,QAAT,KAAyB,kBAAzB,CACA,OAASC,OAAT,KAAwB,OAAxB,CAIA,OAASC,KAAT,KAAsB,qCAAtB,CACA,OAASC,IAAT,KAAqB,+BAArB,CAIA,OAASC,IAAT,KAAqB,OAArB,CAEA,GAAMC,CAAAA,OAAoB,CAAG,CAAC,uBAAD,CAA0B,MAA1B,CAA7B,CAeA,eAAe,UAGV,IAFJC,CAAAA,MAEI,2DAFqB,EAErB,IADJC,CAAAA,OACI,2DAD8C,EAC9C,CACJ,GAAMC,CAAAA,WAAW,CAAGN,KAAK,CAACO,IAAN,GAAaD,WAAjC,CACA,GAAME,CAAAA,GAAG,CAAGJ,MAAM,CAACI,GAAP,EAAeF,WAAW,EAAIA,WAAW,CAACE,GAAtD,CAEA,GAAMC,CAAAA,KAAsC,CAAGV,OAAO,CAAC,UAAM,CAG5D,MAAO,CAAC,gBAAD,CAAmB,gBAAnB,CAAsDS,GAAtD,CAAP,CAGA,CANqD,CAMnD,CAACA,GAAD,CANmD,CAAtD,CAQA,GAAME,CAAAA,IAAI,CAAGT,IAAI,CAACU,eAAlB,CACA,GAAMC,CAAAA,KAAK,CAAGb,OAAO,CACpB,iCACCc,MAAM,CAAE,IADT,CAECJ,KAAK,CAALA,KAFD,CAGCN,OAAO,CAAPA,OAHD,EAIIC,MAJJ,EAKCM,IAAI,CAAJA,IALD,IADoB,CAQpB,CAACN,MAAD,CAASK,KAAT,CAAgBC,IAAhB,CARoB,CAArB,CAbI,cAuB0BZ,QAAQ,CAAuBc,KAAvB,CAA8BP,OAA9B,CAvBlC,CAuBIS,IAvBJ,WAuBIA,IAvBJ,CAuBaC,QAvBb,8CAwBJ,GAAMC,CAAAA,KAAK,CAAGjB,OAAO,CAAC,UAAM,CAC3B,QAASkB,CAAAA,gBAAT,CACCC,KADD,CAEmC,CAClC,MAAO,CAAC,CAAEA,KAAV,CACA,CACD,GAAIJ,IAAI,EAAIG,gBAAgB,CAACH,IAAD,CAA5B,CAAoC,CACnC,GAAMK,CAAAA,SAAqB,CAAGL,IAAI,CAACM,GAAL,CAAS,SAAAC,IAAI,0BACvCA,IADuC,EAE1CC,WAAW,kBACPD,IAAI,CAACC,WADE,EAEVC,SAAS,CAAEF,IAAI,CAACC,WAAL,CAAiBC,SAAjB,CAA2BC,MAA3B,EAFD,EAF+B,CAM1CC,WAAW,CAAE,GAAIvB,CAAAA,IAAJ,CAASmB,IAAT,EAAeK,cAAf,EAN6B,IAAb,CAA9B,CAQA,MAAOP,CAAAA,SAAP,CACA,CACD,MAAO,EAAP,CACA,CAlBoB,CAkBlB,CAACL,IAAD,CAlBkB,CAArB,CAoBA,sBAASA,IAAI,CAAEE,KAAf,EAAyBD,QAAzB,EAAmCL,IAAI,CAAJA,IAAnC,GACA,CAhDD","sourcesContent":["import { useFuego } from '@nandorojo/fuego'\nimport { useMemo } from 'react'\nimport { WhereFilterOp } from '@firebase/firestore-types'\nimport { QueryDataHandler } from '@nandorojo/fuego/lib/typescript/hooks/useFuego/types'\nimport { OrderByItem } from '@nandorojo/fuego/lib/typescript/FuegoQuery/types'\nimport { fuego } from '../../components/ChatProvider/index'\nimport { chat } from '../../components/ChatProvider'\nimport { ExistingRoomDocument } from '../../classes/Room/types'\nimport { InboxModel } from '../../classes/Inbox/types'\nimport { UseInboxConfig } from './types'\nimport { Room } from '../..'\n\nconst orderBy: OrderByItem = ['lastMessage.createdAt', 'desc']\n\n/**\n * React hook to query the chat inbox in realtime. Used with the [Juice.Inbox] component from Juice.\n *\n * @example\n * ```\n * const { data } = useInbox()\n *\n * return <Juice.Inbox rooms={data} />\n * ```\n *\n * @returns\n * { data, loading, path, error } and other values returned by useFuego() hook. Data is properly formatted for rendering.\n */\nexport default (\n\tconfig: UseInboxConfig = {},\n\toptions: QueryDataHandler<ExistingRoomDocument> = {}\n) => {\n\tconst currentUser = fuego.auth().currentUser as firebase.User\n\tconst uid = config.uid || (currentUser && currentUser.uid)\n\n\tconst where: [string, WhereFilterOp, string] = useMemo(() => {\n\t\t// useMemo to avoid re-making the array every render,\n\t\t// since that would refresh the useFuego each time\n\t\treturn ['currentMembers', 'array-contains' as WhereFilterOp, uid]\n\t\t// if the uid updates, then it recreates\n\t\t// re: [uid]\n\t}, [uid])\n\n\tconst path = chat.roomsCollection\n\tconst query = useMemo(\n\t\t() => ({\n\t\t\tlisten: true,\n\t\t\twhere,\n\t\t\torderBy,\n\t\t\t...config,\n\t\t\tpath\n\t\t}),\n\t\t[config, where, path]\n\t)\n\tconst { data, ...response } = useFuego<ExistingRoomDocument>(query, options)\n\tconst rooms = useMemo(() => {\n\t\tfunction isListOfRoomDocs(\n\t\t\tinbox: typeof data\n\t\t): inbox is ExistingRoomDocument[] {\n\t\t\treturn !!(inbox as ExistingRoomDocument[])\n\t\t}\n\t\tif (data && isListOfRoomDocs(data)) {\n\t\t\tconst formatted: InboxModel = data.map(room => ({\n\t\t\t\t...room,\n\t\t\t\tlastMessage: {\n\t\t\t\t\t...room.lastMessage,\n\t\t\t\t\tcreatedAt: room.lastMessage.createdAt.toDate()\n\t\t\t\t},\n\t\t\t\tunreadCount: new Room(room).getUnreadCount()\n\t\t\t}))\n\t\t\treturn formatted\n\t\t}\n\t\treturn []\n\t}, [data])\n\n\treturn { data: rooms, ...response, path }\n}\n"]}