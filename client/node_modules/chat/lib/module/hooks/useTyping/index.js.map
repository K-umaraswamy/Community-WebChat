{"version":3,"sources":["index.ts"],"names":["useEffect","useState","useMemo","useRef","useFuegoContext","roomId","text","delay","auth","firebase","ready","setReady","currentUser","Error","e","console","error","uid","databaseRef","database","ref","previouslyTyped","timer","lastStateSent","subscriptionRef","notTyping","state","lastChanged","ServerValue","TIMESTAMP","on","snapshot","val","onDisconnect","set","off","current","isTyping","setValue","setTimeout","clearTimeout"],"mappings":"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","sourcesContent":["import { useEffect, useState, useMemo, useRef } from 'react'\nimport { useFuegoContext } from '@nandorojo/fuego'\nimport { Typing } from '../../classes/Room/types'\n\n/**\n * useTyping automatically updates the backend whenever a user is typing.\n *\n * @param options - A dictionary to configure the typing.\n * @param options.roomId - **Required** unique id of the room you're typing in.\n * @param options.text - **Required** The current text state of your chat input\n * @param options.delay (Optional) Set the timeout delay to mark typing false. Set null if you don't want a time out.\n *\n * @example\n * ```javascript\n * // input text state\n * const [text, setText] = useState('')\n * // let's say we're getting our room id from our react-navigation params\n * const navigation = useNavigation()\n * const roomId = navigation.params.id\n *\n * useTyping({ roomId, text })\n *\n * <ChatComponent text={text} onChangeText={setText} />\n * ```\n *\n * @returns\n * Doesn't return anything. We live in an undefined world, I suppose.\n *\n * @remarks\n * The actual data of who is typing is stored in the chatroom object.\n * If you want to get this data realtime in a room, consider using useRoom({ listen: true }). This data will also be in useInbox().\n * See docs for useRoom or useInbox for more.\n *\n */\nexport default ({\n\troomId,\n\ttext,\n\tdelay = 5000\n}: {\n\troomId: string\n\ttext: string\n\tdelay?: number | null\n}) => {\n\tconst { auth, firebase } = useFuegoContext()\n\tconst [ready, setReady] = useState(false)\n\tconst { currentUser } = auth()\n\ttry {\n\t\tif (!currentUser)\n\t\t\tthrow new Error(\n\t\t\t\t'ðŸ¤¯ error in useTyping hook. Looks like there is not a valid user signed in. \\nConsider using the FuegoGate component from @nandorojo/fuego and wrapping it around your app.'\n\t\t\t)\n\t} catch (e) {\n\t\tconsole.error(e)\n\t}\n\tconst { uid } = currentUser as firebase.User\n\tconst databaseRef = useMemo(() => firebase.database().ref(`/typing/${uid}`), [\n\t\tuid,\n\t\tfirebase\n\t])\n\tconst previouslyTyped = useRef('')\n\n\tconst timer = useRef<NodeJS.Timeout>()\n\n\tconst lastStateSent = useRef<IsTyping['state']>('nothing')\n\n\t// initialize the typing set to false when we disconnect\n\t// once that is set up, then we can mark that we are indeed typing elsewhere\n\t// ^ that will be done in the next hook\n\tuseEffect(() => {\n\t\tconst subscriptionRef = firebase.database().ref('.info/connected')\n\t\tconst notTyping: IsTyping = {\n\t\t\tstate: 'nothing',\n\t\t\tlastChanged: firebase.database.ServerValue.TIMESTAMP,\n\t\t\troomId\n\t\t}\n\n\t\tsubscriptionRef.on('value', async snapshot => {\n\t\t\tif (!snapshot.val()) return\n\n\t\t\ttry {\n\t\t\t\tawait databaseRef.onDisconnect().set(notTyping)\n\t\t\t\tsetReady(true)\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(`useTyping error within snapshot listener ${e}`)\n\t\t\t}\n\t\t})\n\n\t\treturn () => {\n\t\t\t// clean up the listener on unmount\n\t\t\tsubscriptionRef.off('value')\n\t\t\t;(async () => {\n\t\t\t\ttry {\n\t\t\t\t\tlastStateSent.current = notTyping.state\n\t\t\t\t\tawait databaseRef.set(notTyping)\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('useTyping errored on unmount setting not typing')\n\t\t\t\t}\n\t\t\t})()\n\t\t}\n\t}, [roomId, databaseRef, firebase])\n\n\t// every time we type something new, upload that we're typing\n\t// and after a certain delay, we mark typing false\n\t// however, if we type before that timer has completed,\n\t// we clean it up and start it over\n\tuseEffect(() => {\n\t\ttry {\n\t\t\t// we're ready to upload from the previous effect\n\t\t\t// ...and the text we typed just changed.\n\t\t\t// if text is empty, set to false\n\t\t\tif (ready && text !== previouslyTyped.current) {\n\t\t\t\tpreviouslyTyped.current = text\n\n\t\t\t\tconst notTyping: IsTyping = {\n\t\t\t\t\tstate: 'nothing',\n\t\t\t\t\tlastChanged: firebase.database.ServerValue.TIMESTAMP,\n\t\t\t\t\troomId\n\t\t\t\t}\n\t\t\t\tconst isTyping: IsTyping = {\n\t\t\t\t\tstate: 'typing',\n\t\t\t\t\tlastChanged: firebase.database.ServerValue.TIMESTAMP,\n\t\t\t\t\troomId\n\t\t\t\t}\n\n\t\t\t\t// if the text is empty, we set it to not typing\n\t\t\t\tconst setValue = text ? isTyping : notTyping\n\n\t\t\t\t// don't resend the state we just sent to avoid redundancy\n\t\t\t\tif (setValue.state !== lastStateSent.current) {\n\t\t\t\t\tlastStateSent.current = setValue.state\n\t\t\t\t\tdatabaseRef.set(setValue)\n\t\t\t\t}\n\n\t\t\t\t// only need a notTyping timer timer if we're typing\n\t\t\t\tif (delay !== null && setValue.state === 'typing') {\n\t\t\t\t\ttimer.current = setTimeout(() => {\n\t\t\t\t\t\tlastStateSent.current = notTyping.state\n\t\t\t\t\t\tdatabaseRef.set(notTyping)\n\t\t\t\t\t}, delay)\n\t\t\t\t}\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.error('error in useTyping after timer', e)\n\t\t}\n\n\t\treturn () => {\n\t\t\tif (timer.current) clearTimeout(timer.current)\n\t\t}\n\t}, [ready, text, roomId, delay, uid, databaseRef, firebase])\n}\n\ninterface IsTyping extends Typing {\n\troomId: string\n}\n"]}