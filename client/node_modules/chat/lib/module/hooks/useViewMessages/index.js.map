{"version":3,"sources":["index.ts"],"names":["useRef","useCallback","useEffect","Room","config","methods","roomId","lastUploadedMessageId","onViewMessages","roomIdRef","onViewMessagesRef","current","visibleMessages","latestMessageId","message","find","i","id","length","viewMessage","createdAt"],"mappings":"AAAA,OAASA,MAAT,CAAiBC,WAAjB,CAA8BC,SAA9B,KAA+C,OAA/C,CAEA,MAAOC,CAAAA,IAAP,KAAiB,oBAAjB,CAeA,cAAe,UACdC,MADc,CAGb,IADDC,CAAAA,OACC,2DADwC,EACxC,IACOC,CAAAA,MADP,CACkBF,MADlB,CACOE,MADP,CAED,GAAMC,CAAAA,qBAAqB,CAAGP,MAAM,CAAgB,IAAhB,CAApC,CAFC,GAGOQ,CAAAA,cAHP,CAG0BH,OAH1B,CAGOG,cAHP,CAKD,GAAMC,CAAAA,SAAS,CAAGT,MAAM,CAACM,MAAD,CAAxB,CACA,GAAMI,CAAAA,iBAAiB,CAAGV,MAAM,CAACQ,cAAD,CAAhC,CAEAN,SAAS,CAAC,UAAM,CACfO,SAAS,CAACE,OAAV,CAAoBL,MAApB,CACA,GAAIE,cAAJ,CAAoBE,iBAAiB,CAACC,OAAlB,CAA4BH,cAA5B,CACpB,CAHQ,CAGN,CAACF,MAAD,CAASE,cAAT,CAHM,CAAT,CAKA,MAAOP,CAAAA,WAAW,CACjB,cAMM,IALLW,CAAAA,eAKK,MALLA,eAKK,CAJLC,eAIK,MAJLA,eAIK,CACL,GAAMC,CAAAA,OAAO,CACZF,eAAe,EAAIA,eAAe,CAACG,IAAhB,CAAqB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,EAAF,GAASJ,eAAb,EAAtB,CADpB,CAEA,GACCD,eAAe,EACfA,eAAe,CAACM,MADhB,EAEAR,iBAAiB,CAACC,OAHnB,CAIE,CACDD,iBAAiB,CAACC,OAAlB,CAA0B,CAAEC,eAAe,CAAfA,eAAF,CAA1B,EACA,CACD,GAAIE,OAAO,EAAIA,OAAO,CAACG,EAAR,GAAeV,qBAAqB,CAACI,OAApD,CAA6D,CAC5DJ,qBAAqB,CAACI,OAAtB,CAAgCG,OAAO,CAACG,EAAxC,CACA,GAAId,CAAAA,IAAJ,CAAS,CAAEc,EAAE,CAAER,SAAS,CAACE,OAAhB,CAAT,EAAoCQ,WAApC,CACCL,OAAO,CAACG,EADT,CAECH,OAAO,CAACM,SAFT,EAIA,CACD,CAxBgB,CAyBjB,EAzBiB,CAAlB,CA2BA","sourcesContent":["import { useRef, useCallback, useEffect } from 'react'\nimport { NewMessageModel } from '../../classes/Message/types'\nimport Room from '../../classes/Room'\nimport { UseViewMessagesConfig, UseViewMessagesMethods } from './types'\n\n/**\n * React hook that returns a function useful for marking messages as viewed on the backend.\n * It works by only clearing unread count when you've reached the most recent message, leveraging React Native FlatList's onViewableItemsChanged.\n * This is only useful if you're using the Juice chat backend.\n *\n * @example\n * ```js\n * const onViewMessages = useViewMessages({ roomId: 'some_chat_room_id' })\n *\n * return <Juice.Chat onViewMessages={onViewMessages} />\n * ```\n */\nexport default function<Model extends NewMessageModel = NewMessageModel>(\n\tconfig: UseViewMessagesConfig,\n\tmethods: UseViewMessagesMethods<Model> = {}\n) {\n\tconst { roomId } = config\n\tconst lastUploadedMessageId = useRef<string | null>(null)\n\tconst { onViewMessages } = methods\n\n\tconst roomIdRef = useRef(roomId)\n\tconst onViewMessagesRef = useRef(onViewMessages)\n\n\tuseEffect(() => {\n\t\troomIdRef.current = roomId\n\t\tif (onViewMessages) onViewMessagesRef.current = onViewMessages\n\t}, [roomId, onViewMessages])\n\n\treturn useCallback(\n\t\t({\n\t\t\tvisibleMessages,\n\t\t\tlatestMessageId\n\t\t}: {\n\t\t\tvisibleMessages: Model[] | null\n\t\t\tlatestMessageId: string | null\n\t\t}) => {\n\t\t\tconst message =\n\t\t\t\tvisibleMessages && visibleMessages.find(i => i.id === latestMessageId)\n\t\t\tif (\n\t\t\t\tvisibleMessages &&\n\t\t\t\tvisibleMessages.length &&\n\t\t\t\tonViewMessagesRef.current\n\t\t\t) {\n\t\t\t\tonViewMessagesRef.current({ visibleMessages })\n\t\t\t}\n\t\t\tif (message && message.id !== lastUploadedMessageId.current) {\n\t\t\t\tlastUploadedMessageId.current = message.id\n\t\t\t\tnew Room({ id: roomIdRef.current }).viewMessage(\n\t\t\t\t\tmessage.id,\n\t\t\t\t\tmessage.createdAt\n\t\t\t\t)\n\t\t\t}\n\t\t},\n\t\t[]\n\t)\n}\n"]}