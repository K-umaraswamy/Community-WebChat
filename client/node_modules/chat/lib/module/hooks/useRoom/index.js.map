{"version":3,"sources":["index.ts"],"names":["useFuego","Room","useMemo","id","config","options","path","data","loading","error","ref","create","room","createViaCallable","edit","members","usersAreTyping","getUsersTyping","length","namesOfUsersTyping","map","user","name","isDocument","r","model","lastMessage","createdAt","toDate"],"mappings":"o7BAAA,OAASA,QAAT,KAAyB,kBAAzB,CACA,MAAOC,CAAAA,IAAP,KAAiB,oBAAjB,CAUA,OAASC,OAAT,KAAwB,OAAxB,CAeA,eAAe,cAGV,IAFFC,CAAAA,EAEE,MAFFA,EAEE,CAFKC,MAEL,0CADJC,CAAAA,OACI,2DAD8C,EAC9C,WACa,GAAIJ,CAAAA,IAAJ,CAAS,CAAEE,EAAE,CAAFA,EAAF,CAAT,CADb,CACIG,IADJ,OACIA,IADJ,eAEkCN,QAAQ,kBAEzCI,MAFyC,EAG5CE,IAAI,CAAJA,IAH4C,GAK7CD,OAL6C,CAF1C,CAEIE,IAFJ,WAEIA,IAFJ,CAEUC,OAFV,WAEUA,OAFV,CAEmBC,KAFnB,WAEmBA,KAFnB,CAE0BC,GAF1B,WAE0BA,GAF1B,CASJ,GAAMC,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAACC,IAAD,CAAmC,CACjD,MAAO,IAAIX,CAAAA,IAAJ,CAASW,IAAT,EAAeC,iBAAf,EAAP,CACA,CAFD,CAGA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACF,IAAD,CAAyB,CACrC,MAAO,IAAIX,CAAAA,IAAJ,CAASW,IAAT,EAAeE,IAAf,EAAP,CACA,CAFD,CAGA,GAAMC,CAAAA,OAAO,CAAGR,IAAI,EAAKA,IAAD,CAA+BQ,OAAvD,CACA,GAAMC,CAAAA,cAAc,CAAGd,OAAO,CAAC,UAAM,CACpC,MAAO,CAAC,EAAEa,OAAO,EAAI,GAAId,CAAAA,IAAJ,CAAS,CAAEc,OAAO,CAAPA,OAAF,CAAT,EAAsBE,cAAtB,GAAuCC,MAApD,CAAR,CACA,CAF6B,CAE3B,CAACH,OAAD,CAF2B,CAA9B,CAGA,GAAMI,CAAAA,kBAAkB,CAAGjB,OAAO,CAAC,UAAM,CACxC,MACEa,CAAAA,OAAO,EACP,GAAId,CAAAA,IAAJ,CAAS,CAAEc,OAAO,CAAPA,OAAF,CAAT,EAAsBE,cAAtB,GAAuCG,GAAvC,CAA2C,SAAAC,IAAI,QAAIA,CAAAA,IAAI,CAACC,IAAT,EAA/C,CADD,EAEA,EAHD,CAKA,CANiC,CAM/B,CAACP,OAAD,CAN+B,CAAlC,CAOA,GAAMH,CAAAA,IAAI,CAAGV,OAAO,CAAC,UAAM,CAC1B,QAASqB,CAAAA,UAAT,CAAoBC,CAApB,CAA+D,CAC9D,MAAO,CAAC,CAAEA,CAAV,CACA,CACD,GAAIjB,IAAI,EAAIgB,UAAU,CAAChB,IAAD,CAAtB,CAA8B,CAC7B,GAAMkB,CAAAA,KAAwB,kBAC1BlB,IAD0B,EAE7BmB,WAAW,kBACPnB,IAAI,CAACmB,WADE,EAEVC,SAAS,CAAEpB,IAAI,CAACmB,WAAL,CAAiBC,SAAjB,CAA2BC,MAA3B,EAFD,EAFkB,EAA9B,CAOA,MAAOH,CAAAA,KAAP,CACA,CACD,MAAO,KAAP,CACA,CAfmB,CAejB,CAAClB,IAAD,CAfiB,CAApB,CAgBA,MAAO,CACNA,IAAI,CAAEK,IADA,CAENJ,OAAO,CAAPA,OAFM,CAGNC,KAAK,CAALA,KAHM,CAINC,GAAG,CAAHA,GAJM,CAKNC,MAAM,CAANA,MALM,CAMNG,IAAI,CAAJA,IANM,CAONE,cAAc,CAAdA,cAPM,CAQNG,kBAAkB,CAAlBA,kBARM,CAAP,CAUA,CAvDD","sourcesContent":["import { useFuego } from '@nandorojo/fuego'\nimport Room from '../../classes/Room'\nimport {\n\tEditRoomModel,\n\tRoomPropertiesModel,\n\tCreateCallableRoomModel,\n\tExistingRoomDocument,\n\tExistingRoomModel\n} from '../../classes/Room/types'\nimport { UseRoomType } from './types'\nimport { QueryDataHandler } from '@nandorojo/fuego/lib/typescript/hooks/useFuego/types'\nimport { useMemo } from 'react'\n\n/**\n * Fetches or subscribes to a chatroom. It automatically handles unmounts, etc.\n *\n * @param config - config dictionary.\n * @param config.id - Required: the unique ID for this chatroom, typically generated by the backend. If using the [[useInbox]] hook, each item in [[useInbox]]'s data array has this ID.\n * @param config.listen Boolean to determine if this room should update state as a subscription. Default false.\n * @param options - added options dictionary for useRoom\n *\n * @remarks Look at the fuego library's useFuego hook to see all the available arguments for config and options.\n *\n * @returns { data: room, loading, error, ref, create, edit, usersAreTyping, namesOfUsersTyping } data is formatted for rendering room.\n */\n\nexport default (\n\t{ id, ...config }: UseRoomType,\n\toptions: QueryDataHandler<ExistingRoomDocument> = {}\n) => {\n\tconst { path } = new Room({ id } as RoomPropertiesModel)\n\tconst { data, loading, error, ref } = useFuego<ExistingRoomDocument>(\n\t\t{\n\t\t\t...config,\n\t\t\tpath\n\t\t},\n\t\toptions\n\t)\n\tconst create = (room: CreateCallableRoomModel) => {\n\t\treturn new Room(room).createViaCallable()\n\t}\n\tconst edit = (room: EditRoomModel) => {\n\t\treturn new Room(room).edit()\n\t}\n\tconst members = data && (data as ExistingRoomDocument).members\n\tconst usersAreTyping = useMemo(() => {\n\t\treturn !!(members && new Room({ members }).getUsersTyping().length)\n\t}, [members])\n\tconst namesOfUsersTyping = useMemo(() => {\n\t\treturn (\n\t\t\t(members &&\n\t\t\t\tnew Room({ members }).getUsersTyping().map(user => user.name)) ||\n\t\t\t[]\n\t\t)\n\t}, [members])\n\tconst room = useMemo(() => {\n\t\tfunction isDocument(r: typeof data): r is ExistingRoomDocument {\n\t\t\treturn !!(r as ExistingRoomDocument)\n\t\t}\n\t\tif (data && isDocument(data)) {\n\t\t\tconst model: ExistingRoomModel = {\n\t\t\t\t...data,\n\t\t\t\tlastMessage: {\n\t\t\t\t\t...data.lastMessage,\n\t\t\t\t\tcreatedAt: data.lastMessage.createdAt.toDate()\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn model\n\t\t}\n\t\treturn null\n\t}, [data])\n\treturn {\n\t\tdata: room,\n\t\tloading,\n\t\terror,\n\t\tref,\n\t\tcreate,\n\t\tedit,\n\t\tusersAreTyping,\n\t\tnamesOfUsersTyping\n\t}\n}\n"]}