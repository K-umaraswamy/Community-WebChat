{"version":3,"sources":["index.ts"],"names":["currentUserExists","roomIsEditModel","roomIsNewModel","roomIsCreateCallable","fuego","chat","getInitials","firestore","uuid","room","firebase","auth","currentUser","uid","member","members","unreadCount","count","e","console","error","messageId","messageCreatedAt","ref","db","doc","path","update","FieldValue","serverTimestamp","id","createdAt","Object","keys","filter","map","name","otherPeopleInRoom","namesOfOtherPeopleInRoom","split","length","join","commaNames","slice","finalName","maxNumberOfInitials","getArrayOfMembersOtherThanMe","Error","currentMembers","arrayRemove","delete","displayName","newMember","exists","joinedAt","arrayUnion","batch","forEach","commit","addToFirebase","create","functions","httpsCallable","httpCallables","createRoom","recipients","avatar","data","updateOnFirebase","typing","state","photoURL","date","me","sort","lastEdited","lastMessage","system","text","v4","collection","roomsCollection","set","messagesCollection"],"mappings":"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","sourcesContent":["import {\n\tNewRoomModel,\n\tRoomModel,\n\tEditRoomModel,\n\tNewRoomMember,\n\tcurrentUserExists,\n\troomIsEditModel,\n\tExistingRoomModel,\n\tRoomMembers,\n\tCreateRoomModel,\n\tRoomPropertiesModel,\n\troomIsNewModel,\n\troomIsCreateCallable\n} from './types'\nimport { fuego, chat } from '../../components/ChatProvider'\nimport { getInitials } from '../../helpers/getInitials'\nimport { firestore } from 'firebase'\nimport uuid from 'uuid'\n\nexport default class {\n\tprivate room: RoomModel\n\tconstructor(room: RoomModel) {\n\t\tthis.room = room\n\t}\n\tget path() {\n\t\treturn `${chat.roomsCollection}/${(this.room as RoomPropertiesModel).id}`\n\t}\n\tget messagesPath() {\n\t\treturn `${this.path}/${chat.messagesCollection}`\n\t}\n\tgetUnreadCount(): number {\n\t\tconst { uid } = fuego.firebase.auth().currentUser as firebase.User\n\t\ttry {\n\t\t\tconst member = (this.room as ExistingRoomModel | NewRoomModel).members[\n\t\t\t\tuid\n\t\t\t]\n\n\t\t\treturn (member && member.unreadCount && member.unreadCount.count) || 0\n\t\t} catch (e) {\n\t\t\tconsole.error(\n\t\t\t\t`Room getUnreadCount error. Are you sure you initialized the room with the proper members schema?`\n\t\t\t)\n\t\t\treturn 0\n\t\t}\n\t}\n\t/**\n\t * Views message function for a room.\n\t *\n\t * To use this in a react component out-of-the-box, I recommend using the [[useViewMessage]] hook. It will handle all this for you.\n\t *\n\t * @param messageId ID of the message you're viewing\n\t * @param messageCreatedAt Timestamp of the message which you're viewing, found in message.createdAt\n\t *\n\t * @remarks\n\t * If you aren't using the useViewMessage hook:\n\t * This function should be used with care. You don't want to send 500 writes if someone views 500 messages.\n\t * You only want to send a read for the most recent message being viewed, assuming it's someone else's message.\n\t * Also, you should be memoizing the last message you sent that you viewed to avoid repeats. Again, this is all handled by useViewMessages.\n\t *\n\t * @returns Promise that only resolves while you're online.\n\t */\n\tasync viewMessage(messageId: string, messageCreatedAt: Date) {\n\t\ttry {\n\t\t\tconst ref = fuego.db.doc(this.path)\n\t\t\tconst { uid } = fuego.auth().currentUser as firebase.User\n\n\t\t\treturn ref.update({\n\t\t\t\t[`members.${uid}.unreadCount.count`]: 0,\n\t\t\t\t[`members.${uid}.unreadCount.lastCleared`]: fuego.firebase.firestore.FieldValue.serverTimestamp(),\n\t\t\t\t[`members.${uid}.unreadCount.lastSeen`]: {\n\t\t\t\t\tid: messageId,\n\t\t\t\t\tcreatedAt: messageCreatedAt\n\t\t\t\t}\n\t\t\t})\n\t\t} catch (e) {\n\t\t\tconsole.error('Room class: viewMessage() error:', e)\n\t\t}\n\t}\n\tgetArrayOfMembersOtherThanMe() {\n\t\tconst { members } = this.room as ExistingRoomModel\n\t\tconst { uid } = fuego.auth().currentUser as firebase.User\n\t\treturn Object.keys(members)\n\t\t\t.filter(id => id !== uid)\n\t\t\t.map(id => members[id])\n\t}\n\tgetName(): string {\n\t\tconst { members, name } = this.room as ExistingRoomModel\n\t\tif (name) return name\n\n\t\tconst { uid } = fuego.auth().currentUser as firebase.User\n\n\t\tconst otherPeopleInRoom = Object.keys(members).filter(\n\t\t\t(id: string) => id !== uid\n\t\t)\n\t\tconst namesOfOtherPeopleInRoom = otherPeopleInRoom.map(\n\t\t\tid =>\n\t\t\t\t(members[id] &&\n\t\t\t\t\tmembers[id].name &&\n\t\t\t\t\tmembers[id].name.split(' ') &&\n\t\t\t\t\tmembers[id].name.split(' ')[0]) ||\n\t\t\t\t''\n\t\t)\n\t\tif (!namesOfOtherPeopleInRoom.length) {\n\t\t\tconsole.error('no other members in room', this.room)\n\t\t\treturn ''\n\t\t}\n\t\tif (namesOfOtherPeopleInRoom.length === 1)\n\t\t\treturn members[otherPeopleInRoom[0]].name\n\t\tif (namesOfOtherPeopleInRoom.length === 2)\n\t\t\treturn namesOfOtherPeopleInRoom.join(' & ')\n\n\t\tconst commaNames = namesOfOtherPeopleInRoom\n\t\t\t.slice(0, namesOfOtherPeopleInRoom.length - 1)\n\t\t\t.join(', ')\n\t\tconst finalName =\n\t\t\tnamesOfOtherPeopleInRoom[namesOfOtherPeopleInRoom.length - 1]\n\n\t\treturn `${commaNames} & ${finalName}`\n\t}\n\tgetInitials(maxNumberOfInitials = 2): string {\n\t\tconst { name } = this.room\n\t\tif (name) return getInitials(name)\n\n\t\tconst members = this.getArrayOfMembersOtherThanMe()\n\n\t\tif (!members.length) {\n\t\t\tconsole.error(\n\t\t\t\t'get room initials error: no other members in this room',\n\t\t\t\tthis.room\n\t\t\t)\n\t\t\treturn ''\n\t\t}\n\n\t\tif (members.length === 1) {\n\t\t\treturn getInitials(members[0].name, maxNumberOfInitials)\n\t\t}\n\n\t\treturn (\n\t\t\tmembers\n\t\t\t\t// first letter of each person's name\n\t\t\t\t.map(member => (member.name && member.name.slice(0, 1)) || '')\n\t\t\t\t.join('')\n\t\t\t\t// up to two initials\n\t\t\t\t.slice(0, maxNumberOfInitials)\n\t\t)\n\t}\n\t/**\n\t * @returns\n\t * A promise.all array of responses. The first array is for adding a system message; the second is for updating the room object.\n\t */\n\tasync leave() {\n\t\ttry {\n\t\t\tif (!currentUserExists(fuego.auth().currentUser)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"🚨 Fuego auth error: Tried to leave a room, but there is no valid firebase auth object for this user. \\n In order to join a room, the user must exist. If you're just testing around and don't want to have valid users, try await firebase.auth().signInAnonymously().\"\n\t\t\t\t)\n\t\t\t}\n\t\t\tconst { uid } = fuego.auth().currentUser as firebase.User\n\t\t\t// is this even necessary? maybe if people want the option to join or not...\n\t\t\treturn fuego.db.doc(this.path).update({\n\t\t\t\tcurrentMembers: fuego.firebase.firestore.FieldValue.arrayRemove(uid),\n\t\t\t\t[`members.${uid}`]: fuego.firebase.firestore.FieldValue.delete()\n\t\t\t})\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\t\t\treturn null\n\t\t}\n\t}\n\tjoin() {\n\t\ttry {\n\t\t\tif (!currentUserExists(fuego.auth().currentUser)) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t\"🚨 Fuego auth error: Tried to join a room, but there is no valid firebase auth object for this user. \\n In order to join a room, the user must exist. If you're just testing around and don't want to have valid users, try await firebase.auth().signInAnonymously().\"\n\t\t\t\t)\n\t\t\t}\n\t\t\tconst { uid, displayName } = fuego.auth().currentUser as firebase.User\n\t\t\tconst newMember: NewRoomMember = {\n\t\t\t\tname: displayName || 'Fredrick Failuretest',\n\t\t\t\texists: true,\n\t\t\t\tjoinedAt: fuego.firebase.firestore.FieldValue.serverTimestamp()\n\t\t\t}\n\t\t\t// is this even necessary?\n\t\t\t// maybe if people want the option to choose whether they join a room or not...\n\t\t\treturn fuego.db.doc(this.path).update({\n\t\t\t\t[`members.${uid}`]: newMember,\n\t\t\t\tcurrentMembers: fuego.firebase.firestore.FieldValue.arrayUnion(uid)\n\t\t\t})\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\t\t\treturn null\n\t\t}\n\t}\n\taddMembers(members: RoomMembers) {\n\t\tconst batch = fuego.db.batch()\n\t\tconst ref = fuego.db.doc(this.path)\n\t\tObject.keys(members).forEach((uid: string) =>\n\t\t\tbatch.update(ref, {\n\t\t\t\t[`members.${uid}`]: members[uid]\n\t\t\t})\n\t\t)\n\n\t\tbatch.update(ref, {\n\t\t\tcurrentMembers: firestore.FieldValue.arrayUnion(...Object.keys(members))\n\t\t})\n\n\t\treturn batch.commit()\n\t}\n\tremoveMembers(members: RoomMembers) {\n\t\tconst batch = fuego.db.batch()\n\t\tconst ref = fuego.db.doc(this.path)\n\n\t\tObject.keys(members).forEach((uid: string) =>\n\t\t\tbatch.update(ref, {\n\t\t\t\t[`members.${uid}.exists`]: false\n\t\t\t})\n\t\t)\n\n\t\tbatch.update(ref, {\n\t\t\tcurrentMembers: firestore.FieldValue.arrayRemove(...Object.keys(members))\n\t\t})\n\n\t\treturn batch.commit()\n\t}\n\tasync create() {\n\t\ttry {\n\t\t\tif (roomIsNewModel(this.room)) return this.addToFirebase()\n\t\t\tthrow new Error(\n\t\t\t\t'Tried to create room without the proper schema. See NewRoomModel typescript type.'\n\t\t\t)\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\t\t\treturn null\n\t\t}\n\t}\n\tasync createViaCallable(): Promise<firebase.functions.HttpsCallableResult> {\n\t\ttry {\n\t\t\tif (roomIsCreateCallable(this.room)) {\n\t\t\t\tconst create = fuego.firebase\n\t\t\t\t\t.functions()\n\t\t\t\t\t.httpsCallable(chat.httpCallables.createRoom)\n\t\t\t\treturn create({\n\t\t\t\t\trecipients: this.room.recipients,\n\t\t\t\t\tname: this.room.name || '',\n\t\t\t\t\tavatar: this.room.avatar || ''\n\t\t\t\t})\n\t\t\t}\n\t\t\tthrow new Error(\n\t\t\t\t'Error: improper room model for Room.createCallable(). The error comes from config for new Room(config). Make sure schema for config is correct'\n\t\t\t)\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\t\t\treturn {\n\t\t\t\tdata: null\n\t\t\t}\n\t\t}\n\t}\n\tedit() {\n\t\ttry {\n\t\t\t// typeguard\n\t\t\tif (roomIsEditModel(this.room)) return this.updateOnFirebase()\n\t\t\tthrow new Error(\n\t\t\t\t'Tried to edit room without the proper schema. See EditRoomModel typescript type.'\n\t\t\t)\n\t\t} catch (e) {\n\t\t\tconsole.error(e)\n\t\t\treturn null\n\t\t}\n\t}\n\tgetUsersTyping() {\n\t\treturn this.getArrayOfMembersOtherThanMe().filter(\n\t\t\tmember => member.typing && member.typing.state === 'typing'\n\t\t)\n\n\t\t// return Object.keys((this.room as ExistingRoomModel).members || {})\n\t\t// \t.filter(\n\t\t// \t\t(uid: string) =>\n\t\t// \t\t\tthis.room &&\n\t\t// \t\t\tthis.room.members &&\n\t\t// \t\t\tthis.room.members[uid] &&\n\t\t// \t\t\tthis.room.members[uid].typing\n\t\t// \t)\n\t\t// \t.map(\n\t\t// \t\t(uid: string) =>\n\t\t// \t\t\t(this.room as ExistingRoomModel) &&\n\t\t// \t\t\tthis.room.members &&\n\t\t// \t\t\tthis.room.members[uid]\n\t\t// \t)\n\t}\n\tupdateOnFirebase() {\n\t\tconst { id, ...room } = this.room as EditRoomModel\n\t\treturn fuego.db.doc(this.path).update(room)\n\t}\n\taddToFirebase() {\n\t\tconst { uid, displayName, photoURL } = fuego.auth()\n\t\t\t.currentUser as firebase.User\n\t\tconst date = fuego.firebase.firestore.FieldValue.serverTimestamp()\n\t\tconst me: NewRoomMember = {\n\t\t\tname: displayName || 'Inexistent Poopnugget',\n\t\t\texists: true,\n\t\t\tavatar: photoURL || '',\n\t\t\tjoinedAt: date\n\t\t}\n\t\tconst members: RoomMembers = {\n\t\t\t...(this.room as NewRoomModel).members,\n\t\t\t[uid]: me\n\t\t}\n\t\tconst room: CreateRoomModel = {\n\t\t\tmembers,\n\t\t\tcurrentMembers: [...Object.keys(members)].sort(),\n\t\t\tcreatedAt: date,\n\t\t\tlastEdited: date,\n\t\t\tlastMessage: {\n\t\t\t\tsystem: true,\n\t\t\t\ttext: `${me.name} started a chat`,\n\t\t\t\tcreatedAt: date,\n\t\t\t\tid: uuid.v4(),\n\t\t\t\tname: me.name\n\t\t\t}\n\t\t}\n\t\tconst ref = fuego.db.collection(chat.roomsCollection).doc()\n\t\treturn ref.set(room)\n\t}\n}\n"]}