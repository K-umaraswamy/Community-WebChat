{"version":3,"sources":["index.tsx"],"names":["React","useRef","Swipes","Animated","Text","View","StyleSheet","RectButton","Swipeable","props","actionItemWidth","actionWidth","swipeableRowRef","renderAction","action","index","progress","drag","side","numberOfActions","outputRange","translateX","interpolate","inputRange","onPress","current","close","id","JSON","stringify","Math","random","flex","transform","styles","backgroundColor","renderIcon","actionText","color","textStyle","text","renderRightActions","actions","rightActions","renderActionList","renderLeftActions","leftActions","actionList","width","length","map","gestureHandlerProps","children","memo","create","flexDirection","alignItems","justifyContent","padding"],"mappings":"uKAAA,MAAOA,CAAAA,KAAP,EAAmCC,MAAnC,KAAiD,OAAjD,CACA,MAAOC,CAAAA,MAAP,KAAmB,wCAAnB,CACA,OAASC,QAAT,CAAmBC,IAAnB,CAAyBC,IAAzB,CAA+BC,UAA/B,KAAiD,cAAjD,CAEA,OAASC,UAAT,KAA2B,8BAA3B,CAEA,GAAMC,CAAAA,SAA4C,CAAG,QAA/CA,CAAAA,SAA+C,CAAAC,KAAK,CAAI,CAC7D,GAAMC,CAAAA,eAAe,CAAGD,KAAK,CAACE,WAAN,EAAqB,EAA7C,CACA,GAAMC,CAAAA,eAAe,CAAGX,MAAM,CAAS,IAAT,CAA9B,CAEA,QAASY,CAAAA,YAAT,CACCC,MADD,CAECC,KAFD,CAGCC,QAHD,CAICC,IAJD,CAKCC,IALD,CAMCC,eAND,CAOE,CACD,GAAIV,KAAK,CAACI,YAAV,CACC,MAAOJ,CAAAA,KAAK,CAACI,YAAN,CAAmBC,MAAnB,CAA2BC,KAA3B,CAAkCC,QAAlC,CAA4CC,IAA5C,CAAkDC,IAAlD,CAAP,CACD,GAAIT,KAAK,CAACI,YAAN,GAAuB,IAA3B,CAAiC,MAAO,KAAP,CAEjC,GAAMO,CAAAA,WAAW,CAChBF,IAAI,GAAK,OAAT,CACG,CAAC,CAACC,eAAe,CAAGJ,KAAnB,EAA4BL,eAA7B,CAA8C,CAA9C,CADH,CAEG,CAAC,CAACK,KAAD,CAASL,eAAV,CAA2B,CAA3B,CAHJ,CAKA,GAAMW,CAAAA,UAAU,CAAGL,QAAQ,CAACM,WAAT,CAAqB,CACvCC,UAAU,CAAE,CAAC,CAAD,CAAI,CAAJ,CAD2B,CAEvCH,WAAW,CAAXA,WAFuC,CAArB,CAAnB,CAKA,QAASI,CAAAA,OAAT,EAAmB,CAClB,GAAIZ,eAAe,CAACa,OAApB,CAA6Bb,eAAe,CAACa,OAAhB,CAAwBC,KAAxB,GAC7B,GAAIZ,MAAM,CAACU,OAAX,CAAoBV,MAAM,CAACU,OAAP,CAAef,KAAK,CAACkB,EAArB,EACpB,CAED,MACC,qBAAC,QAAD,CAAU,IAAV,EACC,GAAG,CAAEC,IAAI,CAACC,SAAL,CAAef,MAAM,KAAMgB,IAAI,CAACC,MAAL,EAAN,CAArB,CADN,CAEC,KAAK,CAAE,CAAEC,IAAI,CAAE,CAAR,CAAWC,SAAS,CAAE,CAAC,CAAEZ,UAAU,CAAVA,UAAF,CAAD,CAAtB,CAFR,iDAIC,oBAAC,UAAD,EACC,KAAK,CAAE,CAACa,MAAM,CAACpB,MAAR,CAAgB,CAAEqB,eAAe,CAAErB,MAAM,CAACqB,eAA1B,CAAhB,CADR,CAEC,OAAO,CAAEX,OAFV,iDAIEV,MAAM,CAACsB,UAAP,EAAqBtB,MAAM,CAACsB,UAAP,CAAkBpB,QAAlB,CAA4BC,IAA5B,CAJvB,CAKC,oBAAC,IAAD,EACC,KAAK,CAAE,CACNiB,MAAM,CAACG,UADD,CAEN,CAAEC,KAAK,CAAExB,MAAM,CAACwB,KAAhB,CAFM,CAGN7B,KAAK,CAAC8B,SAHA,CADR,iDAOEzB,MAAM,CAAC0B,IAPT,CALD,CAJD,CADD,CAsBA,CACD,QAASC,CAAAA,kBAAT,CAA4BzB,QAA5B,CAAgDC,IAAhD,CAA4D,CAC3D,GAAMyB,CAAAA,OAAO,CACZjC,KAAK,CAACkC,YAAN,EACA,EAFD,CAUA,GAAIlC,KAAK,CAACgC,kBAAV,CACC,MAAOhC,CAAAA,KAAK,CAACgC,kBAAN,CAAyBC,OAAzB,CAAkC1B,QAAlC,CAA4CC,IAA5C,CAAP,CACD,GAAIR,KAAK,CAACgC,kBAAN,GAA6B,IAAjC,CAAuC,MAAO,KAAP,CAEvC,MAAOG,CAAAA,gBAAgB,CAACF,OAAD,CAAU1B,QAAV,CAAoBC,IAApB,CAA0B,OAA1B,CAAvB,CACA,CACD,QAAS4B,CAAAA,iBAAT,CAA2B7B,QAA3B,CAA+CC,IAA/C,CAA2D,CAC1D,GAAMyB,CAAAA,OAAO,CACZjC,KAAK,CAACqC,WAAN,EACA,EAFD,CAUA,GAAIrC,KAAK,CAACoC,iBAAV,CACC,MAAOpC,CAAAA,KAAK,CAACoC,iBAAN,CAAwBH,OAAxB,CAAiC1B,QAAjC,CAA2CC,IAA3C,CAAP,CACD,GAAIR,KAAK,CAACoC,iBAAN,GAA4B,IAAhC,CAAsC,MAAO,KAAP,CAEtC,MAAOD,CAAAA,gBAAgB,CAACF,OAAD,CAAU1B,QAAV,CAAoBC,IAApB,CAA0B,MAA1B,CAAvB,CACA,CACD,QAAS2B,CAAAA,gBAAT,CACCF,OADD,CAEC1B,QAFD,CAGCC,IAHD,CAICC,IAJD,CAKE,CACD,MACC,qBAAC,IAAD,EACC,KAAK,CAAE,CAACgB,MAAM,CAACa,UAAR,CAAoB,CAAEC,KAAK,CAAEtC,eAAe,CAAGgC,OAAO,CAACO,MAAnC,CAApB,CADR,kDAGEP,OAAO,CAACQ,GAAR,CAAY,SAACpC,MAAD,CAASC,KAAT,QACZF,CAAAA,YAAY,CAACC,MAAD,CAASC,KAAT,CAAgBC,QAAhB,CAA0BC,IAA1B,CAAgCC,IAAhC,CAAsCwB,OAAO,CAACO,MAA9C,CADA,EAAZ,CAHF,CADD,CASA,CACD,MACC,qBAAC,MAAD,WACC,QAAQ,CAAE,CADX,CAEC,aAAa,CAAE,EAFhB,CAGC,cAAc,CAAE,EAHjB,CAIC,iBAAiB,CAAEJ,iBAJpB,CAKC,kBAAkB,CAAEJ,kBALrB,CAMC,GAAG,CAAE7B,eANN,EAOMH,KAAK,CAAC0C,mBAAN,EAA6B,EAPnC,oDASE1C,KAAK,CAAC2C,QATR,CADD,CAaA,CArHD,CAuHA,cAAepD,CAAAA,KAAK,CAACqD,IAAN,CAAW7C,SAAX,CAAf,CAKA,GAAM0B,CAAAA,MAAM,CAAG5B,UAAU,CAACgD,MAAX,CAAkB,CAChCP,UAAU,CAAE,CACXQ,aAAa,CAAE,KADJ,CADoB,CAIhCzC,MAAM,CAAE,CACP0C,UAAU,CAAE,QADL,CAEPC,cAAc,CAAE,QAFT,CAGPzB,IAAI,CAAE,CAHC,CAJwB,CAShCK,UAAU,CAAE,CACXqB,OAAO,CAAE,EADE,CAToB,CAAlB,CAAf","sourcesContent":["import React, { FunctionComponent, useRef } from 'react'\nimport Swipes from 'react-native-gesture-handler/Swipeable'\nimport { Animated, Text, View, StyleSheet } from 'react-native'\nimport { SwipeableProps, SwipeableAction } from '../../types'\nimport { RectButton } from 'react-native-gesture-handler'\n\nconst Swipeable: FunctionComponent<SwipeableProps> = props => {\n\tconst actionItemWidth = props.actionWidth || 64\n\tconst swipeableRowRef = useRef<Swipes>(null)\n\n\tfunction renderAction(\n\t\taction: SwipeableAction,\n\t\tindex: number,\n\t\tprogress: Progress,\n\t\tdrag: Drag,\n\t\tside: 'left' | 'right',\n\t\tnumberOfActions: number\n\t) {\n\t\tif (props.renderAction)\n\t\t\treturn props.renderAction(action, index, progress, drag, side)\n\t\tif (props.renderAction === null) return null\n\n\t\tconst outputRange =\n\t\t\tside === 'right'\n\t\t\t\t? [(numberOfActions - index) * actionItemWidth, 0]\n\t\t\t\t: [-index * actionItemWidth, 0]\n\n\t\tconst translateX = progress.interpolate({\n\t\t\tinputRange: [0, 1],\n\t\t\toutputRange\n\t\t})\n\n\t\tfunction onPress() {\n\t\t\tif (swipeableRowRef.current) swipeableRowRef.current.close()\n\t\t\tif (action.onPress) action.onPress(props.id)\n\t\t}\n\n\t\treturn (\n\t\t\t<Animated.View\n\t\t\t\tkey={JSON.stringify(action + `${Math.random()}`)}\n\t\t\t\tstyle={{ flex: 1, transform: [{ translateX }] }}\n\t\t\t>\n\t\t\t\t<RectButton\n\t\t\t\t\tstyle={[styles.action, { backgroundColor: action.backgroundColor }]}\n\t\t\t\t\tonPress={onPress}\n\t\t\t\t>\n\t\t\t\t\t{action.renderIcon && action.renderIcon(progress, drag)}\n\t\t\t\t\t<Text\n\t\t\t\t\t\tstyle={[\n\t\t\t\t\t\t\tstyles.actionText,\n\t\t\t\t\t\t\t{ color: action.color },\n\t\t\t\t\t\t\tprops.textStyle\n\t\t\t\t\t\t]}\n\t\t\t\t\t>\n\t\t\t\t\t\t{action.text}\n\t\t\t\t\t</Text>\n\t\t\t\t</RectButton>\n\t\t\t</Animated.View>\n\t\t)\n\t}\n\tfunction renderRightActions(progress: Progress, drag: Drag) {\n\t\tconst actions =\n\t\t\tprops.rightActions ||\n\t\t\t[\n\t\t\t\t// {\n\t\t\t\t// \tcolor: 'white',\n\t\t\t\t// \tbackgroundColor: 'purple',\n\t\t\t\t// \tIconNode: null,\n\t\t\t\t// \ttext: 'Test'\n\t\t\t\t// }\n\t\t\t]\n\t\tif (props.renderRightActions)\n\t\t\treturn props.renderRightActions(actions, progress, drag)\n\t\tif (props.renderRightActions === null) return null\n\n\t\treturn renderActionList(actions, progress, drag, 'right')\n\t}\n\tfunction renderLeftActions(progress: Progress, drag: Drag) {\n\t\tconst actions =\n\t\t\tprops.leftActions ||\n\t\t\t[\n\t\t\t\t// {\n\t\t\t\t// \tcolor: 'white',\n\t\t\t\t// \tbackgroundColor: 'blue',\n\t\t\t\t// \tIconNode: null,\n\t\t\t\t// \ttext: 'Scripture monkey'\n\t\t\t\t// }\n\t\t\t]\n\t\tif (props.renderLeftActions)\n\t\t\treturn props.renderLeftActions(actions, progress, drag)\n\t\tif (props.renderLeftActions === null) return null\n\n\t\treturn renderActionList(actions, progress, drag, 'left')\n\t}\n\tfunction renderActionList(\n\t\tactions: SwipeableAction[],\n\t\tprogress: Progress,\n\t\tdrag: Drag,\n\t\tside: 'left' | 'right'\n\t) {\n\t\treturn (\n\t\t\t<View\n\t\t\t\tstyle={[styles.actionList, { width: actionItemWidth * actions.length }]}\n\t\t\t>\n\t\t\t\t{actions.map((action, index) =>\n\t\t\t\t\trenderAction(action, index, progress, drag, side, actions.length)\n\t\t\t\t)}\n\t\t\t</View>\n\t\t)\n\t}\n\treturn (\n\t\t<Swipes\n\t\t\tfriction={2}\n\t\t\tleftThreshold={30}\n\t\t\trightThreshold={40}\n\t\t\trenderLeftActions={renderLeftActions}\n\t\t\trenderRightActions={renderRightActions}\n\t\t\tref={swipeableRowRef}\n\t\t\t{...(props.gestureHandlerProps || {})}\n\t\t>\n\t\t\t{props.children}\n\t\t</Swipes>\n\t)\n}\n\nexport default React.memo(Swipeable)\n\ntype Progress = Animated.Value | Animated.AnimatedInterpolation\ntype Drag = Animated.AnimatedInterpolation\n\nconst styles = StyleSheet.create({\n\tactionList: {\n\t\tflexDirection: 'row'\n\t},\n\taction: {\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t\tflex: 1\n\t},\n\tactionText: {\n\t\tpadding: 10\n\t}\n})\n"]}