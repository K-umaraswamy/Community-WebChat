{"version":3,"sources":["index.ts"],"names":["useFuegoContext","useEffect","useState","useRef","FuegoQuery","useFuego","query","options","listen","exists","setExists","handleData","handleLoading","handleError","unsubscribeOnUnmount","notifyOnNetworkStatusChange","context","db","removeListener","data","setDataState","loading","setLoadingState","error","setErrorState","setData","setLoading","setError","ref","listenerName","unsubscribe","handle","listenerNameRef","dbRef","current","Object","keys","map","o","q","refetch","console","path"],"mappings":"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","sourcesContent":["import useFuegoContext from '../useFuegoContext'\nimport { UseQueryConfig, QueryHookResponse, QueryDataHandler } from './types'\nimport { useEffect, useState, useRef } from 'react'\nimport FuegoQuery from '../../FuegoQuery'\nimport { FirestoreRefType, DocumentModel } from '../../FuegoQuery/types'\nimport { FuegoContextProps } from '../../FuegoContext/types'\n\nfunction useFuego<DataModel extends DocumentModel>(\n  query: UseQueryConfig,\n  options: QueryDataHandler<DataModel> = {}\n): QueryHookResponse<DataModel> {\n  const {\n    // path,\n    listen = false\n  } = query\n  const [exists, setExists] = useState<QueryHookResponse<DataModel>['exists']>(\n    null\n  )\n  const {\n    handleData,\n    handleLoading,\n    handleError,\n    unsubscribeOnUnmount = true,\n    notifyOnNetworkStatusChange = true\n  } = options\n  const context = useFuegoContext()\n  const { db, removeListener } = context\n  const [data, setDataState] = useState<QueryHookResponse<DataModel>['data']>(\n    null\n  )\n  const [loading, setLoadingState] = useState(true)\n  const [error, setErrorState] = useState<\n    QueryHookResponse<DataModel>['error']\n  >(null)\n\n  const [setData, setLoading, setError] = [\n    handleData || setDataState,\n    handleLoading || setLoadingState,\n    handleError || setErrorState\n  ]\n\n  // ref generated from the query\n  const ref = useRef<FirestoreRefType | null>(null)\n  const listenerName = useRef('')\n  const unsubscribe = useRef<\n    () => void | (() => FuegoContextProps['removeListener'])\n  >(() => {})\n\n  useEffect(() => {\n    new FuegoQuery(query).handle<DataModel>({\n      listen,\n      notifyOnNetworkStatusChange,\n      setData,\n      setLoading,\n      setError,\n      listenerNameRef: listenerName,\n      dbRef: ref,\n      context,\n      setExists\n    })\n    if (listen) unsubscribe.current = () => removeListener(listenerName.current)\n    return () => {\n      if (unsubscribeOnUnmount && listenerName.current) {\n        ;(unsubscribe.current as () => FuegoContextProps['removeListener'])()\n      }\n    }\n  }, [\n    ...Object.keys(options).map(\n      o => options[o as keyof QueryDataHandler<DataModel>]\n    ),\n    ...Object.keys(query).map(q => query[q as keyof UseQueryConfig])\n  ])\n\n  const refetch = () => {\n    if (listen) {\n      console.error(\n        'It looks like you are trying to refetch a subscription in useFuego. Note that this will have no effect, since the listener with automatically reconnect. To use refetch, set listen: false. This is related to the following query:',\n        query.path\n      )\n    } else {\n      new FuegoQuery(query).handle<DataModel>({\n        listen: false,\n        notifyOnNetworkStatusChange,\n        setData,\n        setLoading,\n        setError,\n        listenerNameRef: listenerName,\n        dbRef: ref,\n        context,\n        setExists\n      })\n    }\n  }\n\n  return {\n    data,\n    loading,\n    error,\n    db,\n    ref: ref.current as FirestoreRefType,\n    unsubscribe: unsubscribe.current as FuegoContextProps['removeListener'],\n    exists,\n    refetch\n  }\n}\n\nexport default useFuego\n"]}