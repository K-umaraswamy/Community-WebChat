{"version":3,"sources":["index.ts"],"names":["auth","firebase","uid","lastSentStatus","ready","databaseRef","database","ref","status","state","lastChanged","ServerValue","TIMESTAMP","onAppStateChange","current","set","currentUser","e","console","error","infoRef","on","snapshot","val","onDisconnect","off"],"mappings":"kPAAA,4BACA,4EAEA,mE,aAEe,mBAAM,sBACO,+BADP,CACZA,IADY,kBACZA,IADY,CACNC,QADM,kBACNA,QADM,CAEpB,GAAIC,CAAAA,GAAG,CAAG,EAAV,CAEA,GAAMC,CAAAA,cAAc,CAAG,mBAAvB,CACA,GAAMC,CAAAA,KAAK,CAAG,kBAAO,KAAP,CAAd,CAEA,GAAMC,CAAAA,WAAW,CAAG,mBACnB,iBAAMJ,CAAAA,QAAQ,CAACK,QAAT,GAAoBC,GAApB,YAAmCL,GAAnC,CAAN,EADmB,CAEnB,CAACA,GAAD,CAFmB,CAApB,CAIA,GAAMM,CAAAA,MAAM,CAAG,uBAAY,SAACC,KAAD,CAAkC,CAC5D,MAAO,CACNA,KAAK,CAALA,KADM,CAENC,WAAW,CAAET,QAAQ,CAACK,QAAT,CAAkBK,WAAlB,CAA8BC,SAFrC,CAAP,CAIA,CALc,CAKZ,EALY,CAAf,CAOA,GAAMC,CAAAA,gBAAgB,CAAG,uBAAY,SAACJ,KAAD,CAAkC,CACtE,GAAIL,KAAK,CAACU,OAAN,EAAiBL,KAAK,GAAKN,cAAc,CAACW,OAA9C,CAAuD,CACtDT,WAAW,CAACU,GAAZ,CAAgBP,MAAM,CAACC,KAAD,CAAtB,EACA,CACD,CAJwB,CAItB,EAJsB,CAAzB,CAMA,yBAAYI,gBAAZ,EAEA,GAAI,CACH,CADG,SACSb,IAAI,GAAGgB,WADhB,CACCd,GADD,MACCA,GADD,CAEH,CAAC,MAAOe,CAAP,CAAU,CACXC,OAAO,CAACC,KAAR,CAAc,gDAAd,CAAgEF,CAAhE,EACA,CAED,qBAAU,UAAM,CACf,GAAMG,CAAAA,OAAO,CAAGnB,QAAQ,CAACK,QAAT,GAAoBC,GAApB,CAAwB,iBAAxB,CAAhB,CAEAa,OAAO,CAACC,EAAR,CAAW,OAAX,CAAoB,iBAAMC,QAAN,uHACdA,QAAQ,CAACC,GAAT,EADc,mIAIZlB,WAAW,CAACmB,YAAZ,GAA2BT,GAA3B,CAA+BP,MAAM,CAAC,UAAD,CAArC,CAJY,SAKlBJ,KAAK,CAACU,OAAN,CAAgB,IAAhB,CACAX,cAAc,CAACW,OAAf,CAAyB,QAAzB,CACAT,WAAW,CAACU,GAAZ,CAAgBP,MAAM,CAACL,cAAc,CAACW,OAAhB,CAAtB,EAPkB,iFASlBI,OAAO,CAACC,KAAR,gEATkB,kEAApB,EAcA,MAAO,WAAM,CACZ,GAAI,CACHhB,cAAc,CAACW,OAAf,CAAyB,UAAzB,CACAT,WAAW,CAACU,GAAZ,CAAgBP,MAAM,CAACL,cAAc,CAACW,OAAhB,CAAtB,EACAM,OAAO,CAACK,GAAR,CAAY,OAAZ,EACA,CAAC,MAAOR,CAAP,CAAU,CACXC,OAAO,CAACC,KAAR,CAAc,sCAAd,CAAsDF,CAAtD,EACA,CACD,CARD,CASA,CA1BD,CA0BG,CAACf,GAAD,CA1BH,EA2BA,C","sourcesContent":["import { useEffect, useMemo, useCallback, useRef } from 'react'\nimport useFuegoContext from '../useFuegoContext'\nimport { OnlineStatus } from './types'\nimport useAppState from '../useAppState'\n\nexport default () => {\n\tconst { auth, firebase } = useFuegoContext()\n\tlet uid = ''\n\n\tconst lastSentStatus = useRef<OnlineStatus['state']>()\n\tconst ready = useRef(false)\n\n\tconst databaseRef = useMemo(\n\t\t() => firebase.database().ref(`/status/${uid}`),\n\t\t[uid]\n\t)\n\tconst status = useCallback((state: OnlineStatus['state']) => {\n\t\treturn {\n\t\t\tstate,\n\t\t\tlastChanged: firebase.database.ServerValue.TIMESTAMP\n\t\t}\n\t}, [])\n\n\tconst onAppStateChange = useCallback((state: OnlineStatus['state']) => {\n\t\tif (ready.current && state !== lastSentStatus.current) {\n\t\t\tdatabaseRef.set(status(state))\n\t\t}\n\t}, [])\n\n\tuseAppState(onAppStateChange)\n\n\ttry {\n\t\t;({ uid } = auth().currentUser as firebase.User)\n\t} catch (e) {\n\t\tconsole.error('oh shoot, invalid auth in useOnlineStatus hook', e)\n\t}\n\n\tuseEffect(() => {\n\t\tconst infoRef = firebase.database().ref('.info/connected')\n\n\t\tinfoRef.on('value', async snapshot => {\n\t\t\tif (!snapshot.val()) return\n\n\t\t\ttry {\n\t\t\t\tawait databaseRef.onDisconnect().set(status('inactive'))\n\t\t\t\tready.current = true\n\t\t\t\tlastSentStatus.current = 'active'\n\t\t\t\tdatabaseRef.set(status(lastSentStatus.current))\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error(\n\t\t\t\t\t`useOnlineStatus error within snapshot listener ${e}`\n\t\t\t\t)\n\t\t\t}\n\t\t})\n\t\treturn () => {\n\t\t\ttry {\n\t\t\t\tlastSentStatus.current = 'inactive'\n\t\t\t\tdatabaseRef.set(status(lastSentStatus.current))\n\t\t\t\tinfoRef.off('value')\n\t\t\t} catch (e) {\n\t\t\t\tconsole.error('useOnlineStatus cleanup effect error', e)\n\t\t\t}\n\t\t}\n\t}, [uid])\n}\n"]}