{"ast":null,"code":"import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { ArrowDown } from './icons';\nimport { useChannelStateContext, useChatContext } from '../../context';\nvar UnMemoizedScrollToBottomButton = function (props) {\n  var isMessageListScrolledToBottom = props.isMessageListScrolledToBottom,\n    onClick = props.onClick,\n    threadList = props.threadList;\n  var _a = useChatContext(),\n    activeChannel = _a.channel,\n    client = _a.client;\n  var thread = useChannelStateContext().thread;\n  var _b = useState((activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.countUnread()) || 0),\n    countUnread = _b[0],\n    setCountUnread = _b[1];\n  var _c = useState((thread === null || thread === void 0 ? void 0 : thread.reply_count) || 0),\n    replyCount = _c[0],\n    setReplyCount = _c[1];\n  var observedEvent = threadList ? 'message.updated' : 'message.new';\n  useEffect(function () {\n    var handleEvent = function (event) {\n      var _a, _b, _c, _d, _e;\n      var newMessageInAnotherChannel = event.cid !== (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid);\n      var newMessageIsMine = ((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id);\n      var isThreadOpen = !!thread;\n      var newMessageIsReply = !!((_c = event.message) === null || _c === void 0 ? void 0 : _c.parent_id);\n      var dontIncreaseMainListCounterOnNewReply = isThreadOpen && !threadList && newMessageIsReply;\n      if (isMessageListScrolledToBottom || newMessageInAnotherChannel || newMessageIsMine || dontIncreaseMainListCounterOnNewReply) {\n        return;\n      }\n      if (event.type === 'message.new') {\n        // cannot rely on channel.countUnread because active channel is automatically marked read\n        setCountUnread(function (prev) {\n          return prev + 1;\n        });\n      } else if (((_d = event.message) === null || _d === void 0 ? void 0 : _d.id) === (thread === null || thread === void 0 ? void 0 : thread.id)) {\n        var newReplyCount_1 = ((_e = event.message) === null || _e === void 0 ? void 0 : _e.reply_count) || 0;\n        setCountUnread(function () {\n          return newReplyCount_1 - replyCount;\n        });\n      }\n    };\n    client.on(observedEvent, handleEvent);\n    return function () {\n      client.off(observedEvent, handleEvent);\n    };\n  }, [activeChannel, isMessageListScrolledToBottom, observedEvent, replyCount, thread]);\n  useEffect(function () {\n    if (isMessageListScrolledToBottom) {\n      setCountUnread(0);\n      setReplyCount((thread === null || thread === void 0 ? void 0 : thread.reply_count) || 0);\n    }\n  }, [isMessageListScrolledToBottom, thread]);\n  if (isMessageListScrolledToBottom) return null;\n  return React.createElement(\"div\", {\n    className: 'str-chat__jump-to-latest-message'\n  }, React.createElement(\"button\", {\n    \"aria-live\": 'polite',\n    className: \"\\n        str-chat__message-notification-right\\n        str-chat__message-notification-scroll-to-latest\\n        str-chat__circle-fab\\n      \",\n    \"data-testid\": 'message-notification',\n    onClick: onClick\n  }, React.createElement(ArrowDown, null), countUnread > 0 && React.createElement(\"div\", {\n    className: clsx('str-chat__message-notification', 'str-chat__message-notification-scroll-to-latest-unread-count', 'str-chat__jump-to-latest-unread-count'),\n    \"data-testid\": 'unread-message-notification-counter'\n  }, countUnread)));\n};\nexport var ScrollToBottomButton = React.memo(UnMemoizedScrollToBottomButton);","map":{"version":3,"names":["React","useEffect","useState","clsx","ArrowDown","useChannelStateContext","useChatContext","UnMemoizedScrollToBottomButton","props","isMessageListScrolledToBottom","onClick","threadList","_a","activeChannel","channel","client","thread","_b","countUnread","setCountUnread","_c","reply_count","replyCount","setReplyCount","observedEvent","handleEvent","event","_d","_e","newMessageInAnotherChannel","cid","newMessageIsMine","user","id","isThreadOpen","newMessageIsReply","message","parent_id","dontIncreaseMainListCounterOnNewReply","type","prev","newReplyCount_1","on","off","createElement","className","ScrollToBottomButton","memo"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/Community_Chat-project/client/node_modules/stream-chat-react/dist/components/MessageList/ScrollToBottomButton.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport clsx from 'clsx';\nimport { ArrowDown } from './icons';\nimport { useChannelStateContext, useChatContext } from '../../context';\nvar UnMemoizedScrollToBottomButton = function (props) {\n    var isMessageListScrolledToBottom = props.isMessageListScrolledToBottom, onClick = props.onClick, threadList = props.threadList;\n    var _a = useChatContext(), activeChannel = _a.channel, client = _a.client;\n    var thread = useChannelStateContext().thread;\n    var _b = useState((activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.countUnread()) || 0), countUnread = _b[0], setCountUnread = _b[1];\n    var _c = useState((thread === null || thread === void 0 ? void 0 : thread.reply_count) || 0), replyCount = _c[0], setReplyCount = _c[1];\n    var observedEvent = threadList ? 'message.updated' : 'message.new';\n    useEffect(function () {\n        var handleEvent = function (event) {\n            var _a, _b, _c, _d, _e;\n            var newMessageInAnotherChannel = event.cid !== (activeChannel === null || activeChannel === void 0 ? void 0 : activeChannel.cid);\n            var newMessageIsMine = ((_a = event.user) === null || _a === void 0 ? void 0 : _a.id) === ((_b = client.user) === null || _b === void 0 ? void 0 : _b.id);\n            var isThreadOpen = !!thread;\n            var newMessageIsReply = !!((_c = event.message) === null || _c === void 0 ? void 0 : _c.parent_id);\n            var dontIncreaseMainListCounterOnNewReply = isThreadOpen && !threadList && newMessageIsReply;\n            if (isMessageListScrolledToBottom ||\n                newMessageInAnotherChannel ||\n                newMessageIsMine ||\n                dontIncreaseMainListCounterOnNewReply) {\n                return;\n            }\n            if (event.type === 'message.new') {\n                // cannot rely on channel.countUnread because active channel is automatically marked read\n                setCountUnread(function (prev) { return prev + 1; });\n            }\n            else if (((_d = event.message) === null || _d === void 0 ? void 0 : _d.id) === (thread === null || thread === void 0 ? void 0 : thread.id)) {\n                var newReplyCount_1 = ((_e = event.message) === null || _e === void 0 ? void 0 : _e.reply_count) || 0;\n                setCountUnread(function () { return newReplyCount_1 - replyCount; });\n            }\n        };\n        client.on(observedEvent, handleEvent);\n        return function () {\n            client.off(observedEvent, handleEvent);\n        };\n    }, [activeChannel, isMessageListScrolledToBottom, observedEvent, replyCount, thread]);\n    useEffect(function () {\n        if (isMessageListScrolledToBottom) {\n            setCountUnread(0);\n            setReplyCount((thread === null || thread === void 0 ? void 0 : thread.reply_count) || 0);\n        }\n    }, [isMessageListScrolledToBottom, thread]);\n    if (isMessageListScrolledToBottom)\n        return null;\n    return (React.createElement(\"div\", { className: 'str-chat__jump-to-latest-message' },\n        React.createElement(\"button\", { \"aria-live\": 'polite', className: \"\\n        str-chat__message-notification-right\\n        str-chat__message-notification-scroll-to-latest\\n        str-chat__circle-fab\\n      \", \"data-testid\": 'message-notification', onClick: onClick },\n            React.createElement(ArrowDown, null),\n            countUnread > 0 && (React.createElement(\"div\", { className: clsx('str-chat__message-notification', 'str-chat__message-notification-scroll-to-latest-unread-count', 'str-chat__jump-to-latest-unread-count'), \"data-testid\": 'unread-message-notification-counter' }, countUnread)))));\n};\nexport var ScrollToBottomButton = React.memo(UnMemoizedScrollToBottomButton);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}