{"ast":null,"code":"// THIS FILE IS AUTOMATICALLY GENERATED DO NOT EDIT DIRECTLY\n// See update-tlds.js for encoding/decoding format\n// https://data.iana.org/TLD/tlds-alpha-by-domain.txt\nconst encodedTlds = 'aaa1rp3barth4b0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0faromeo7ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4vianca6w0s2x0a2z0ure5ba0by2idu3namex3narepublic11d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2ntley5rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re2s2c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y0eats7k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0cast4mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking0channel11l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dabur3d1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t0isalat7u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0at2delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d0network8tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntdoor4ier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0ardian6cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5gtv3iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0eles2s3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6logistics9properties14fh2g1h1i0a1ds2m1nder2le4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3ncaster5ia3d0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4de2k2psy3ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0cys3drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7serati6ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic3tual5v1w1x1y1z2na0b1goya4me2tura4vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rthwesternmutual14on4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9dnavy5lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3ssagens7y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0america6xi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cher3ks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0a1b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp2w2ell3ia1ksha5oes2p0ping5uji3w0time7i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ffany5ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0channel7ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lkswagen7vo3te1ing3o2yage5u0elos6wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4finity6ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2';\n// Internationalized domain names containing non-ASCII\nconst encodedUtlds = 'ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5تصالات6رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2';\n\n/**\n * @template A\n * @template B\n * @param {A} target\n * @param {B} properties\n * @return {A & B}\n */\nconst assign = (target, properties) => {\n  for (const key in properties) {\n    target[key] = properties[key];\n  }\n  return target;\n};\n\n/**\n * Finite State Machine generation utilities\n */\n\n/**\n * @template T\n * @typedef {{ [group: string]: T[] }} Collections\n */\n\n/**\n * @typedef {{ [group: string]: true }} Flags\n */\n\n// Keys in scanner Collections instances\nconst numeric = 'numeric';\nconst ascii = 'ascii';\nconst alpha = 'alpha';\nconst asciinumeric = 'asciinumeric';\nconst alphanumeric = 'alphanumeric';\nconst domain = 'domain';\nconst emoji = 'emoji';\nconst scheme = 'scheme';\nconst slashscheme = 'slashscheme';\nconst whitespace = 'whitespace';\n\n/**\n * @template T\n * @param {string} name\n * @param {Collections<T>} groups to register in\n * @returns {T[]} Current list of tokens in the given collection\n */\nfunction registerGroup(name, groups) {\n  if (!(name in groups)) {\n    groups[name] = [];\n  }\n  return groups[name];\n}\n\n/**\n * @template T\n * @param {T} t token to add\n * @param {Collections<T>} groups\n * @param {Flags} flags\n */\nfunction addToGroups(t, flags, groups) {\n  if (flags[numeric]) {\n    flags[asciinumeric] = true;\n    flags[alphanumeric] = true;\n  }\n  if (flags[ascii]) {\n    flags[asciinumeric] = true;\n    flags[alpha] = true;\n  }\n  if (flags[asciinumeric]) {\n    flags[alphanumeric] = true;\n  }\n  if (flags[alpha]) {\n    flags[alphanumeric] = true;\n  }\n  if (flags[alphanumeric]) {\n    flags[domain] = true;\n  }\n  if (flags[emoji]) {\n    flags[domain] = true;\n  }\n  for (const k in flags) {\n    const group = registerGroup(k, groups);\n    if (group.indexOf(t) < 0) {\n      group.push(t);\n    }\n  }\n}\n\n/**\n * @template T\n * @param {T} t token to check\n * @param {Collections<T>} groups\n * @returns {Flags} group flags that contain this token\n */\nfunction flagsForToken(t, groups) {\n  const result = {};\n  for (const c in groups) {\n    if (groups[c].indexOf(t) >= 0) {\n      result[c] = true;\n    }\n  }\n  return result;\n}\n\n/**\n * @template T\n * @typedef {null | T } Transition\n */\n\n/**\n * Define a basic state machine state. j is the list of character transitions,\n * jr is the list of regex-match transitions, jd is the default state to\n * transition to t is the accepting token type, if any. If this is the terminal\n * state, then it does not emit a token.\n *\n * The template type T represents the type of the token this state accepts. This\n * should be a string (such as of the token exports in `text.js`) or a\n * MultiToken subclass (from `multi.js`)\n *\n * @template T\n * @param {T} [token] Token that this state emits\n */\nfunction State(token) {\n  if (token === void 0) {\n    token = null;\n  }\n  // this.n = null; // DEBUG: State name\n  /** @type {{ [input: string]: State<T> }} j */\n  this.j = {}; // IMPLEMENTATION 1\n  // this.j = []; // IMPLEMENTATION 2\n  /** @type {[RegExp, State<T>][]} jr */\n  this.jr = [];\n  /** @type {?State<T>} jd */\n  this.jd = null;\n  /** @type {?T} t */\n  this.t = token;\n}\n\n/**\n * Scanner token groups\n * @type Collections<string>\n */\nState.groups = {};\nState.prototype = {\n  accepts() {\n    return !!this.t;\n  },\n  /**\n   * Follow an existing transition from the given input to the next state.\n   * Does not mutate.\n   * @param {string} input character or token type to transition on\n   * @returns {?State<T>} the next state, if any\n   */\n  go(input) {\n    const state = this;\n    const nextState = state.j[input];\n    if (nextState) {\n      return nextState;\n    }\n    for (let i = 0; i < state.jr.length; i++) {\n      const regex = state.jr[i][0];\n      const nextState = state.jr[i][1]; // note: might be empty to prevent default jump\n      if (nextState && regex.test(input)) {\n        return nextState;\n      }\n    }\n    // Nowhere left to jump! Return default, if any\n    return state.jd;\n  },\n  /**\n   * Whether the state has a transition for the given input. Set the second\n   * argument to true to only look for an exact match (and not a default or\n   * regular-expression-based transition)\n   * @param {string} input\n   * @param {boolean} exactOnly\n   */\n  has(input, exactOnly) {\n    if (exactOnly === void 0) {\n      exactOnly = false;\n    }\n    return exactOnly ? input in this.j : !!this.go(input);\n  },\n  /**\n   * Short for \"transition all\"; create a transition from the array of items\n   * in the given list to the same final resulting state.\n   * @param {string | string[]} inputs Group of inputs to transition on\n   * @param {Transition<T> | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   */\n  ta(inputs, next, flags, groups) {\n    for (let i = 0; i < inputs.length; i++) {\n      this.tt(inputs[i], next, flags, groups);\n    }\n  },\n  /**\n   * Short for \"take regexp transition\"; defines a transition for this state\n   * when it encounters a token which matches the given regular expression\n   * @param {RegExp} regexp Regular expression transition (populate first)\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  tr(regexp, next, flags, groups) {\n    groups = groups || State.groups;\n    let nextState;\n    if (next && next.j) {\n      nextState = next;\n    } else {\n      // Token with maybe token groups\n      nextState = new State(next);\n      if (flags && groups) {\n        addToGroups(next, flags, groups);\n      }\n    }\n    this.jr.push([regexp, nextState]);\n    return nextState;\n  },\n  /**\n   * Short for \"take transitions\", will take as many sequential transitions as\n   * the length of the given input and returns the\n   * resulting final state.\n   * @param {string | string[]} input\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  ts(input, next, flags, groups) {\n    let state = this;\n    const len = input.length;\n    if (!len) {\n      return state;\n    }\n    for (let i = 0; i < len - 1; i++) {\n      state = state.tt(input[i]);\n    }\n    return state.tt(input[len - 1], next, flags, groups);\n  },\n  /**\n   * Short for \"take transition\", this is a method for building/working with\n   * state machines.\n   *\n   * If a state already exists for the given input, returns it.\n   *\n   * If a token is specified, that state will emit that token when reached by\n   * the linkify engine.\n   *\n   * If no state exists, it will be initialized with some default transitions\n   * that resemble existing default transitions.\n   *\n   * If a state is given for the second argument, that state will be\n   * transitioned to on the given input regardless of what that input\n   * previously did.\n   *\n   * Specify a token group flags to define groups that this token belongs to.\n   * The token will be added to corresponding entires in the given groups\n   * object.\n   *\n   * @param {string} input character, token type to transition on\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of groups\n   * @returns {State<T>} taken after the given input\n   */\n  tt(input, next, flags, groups) {\n    groups = groups || State.groups;\n    const state = this;\n\n    // Check if existing state given, just a basic transition\n    if (next && next.j) {\n      state.j[input] = next;\n      return next;\n    }\n    const t = next;\n\n    // Take the transition with the usual default mechanisms and use that as\n    // a template for creating the next state\n    let nextState,\n      templateState = state.go(input);\n    if (templateState) {\n      nextState = new State();\n      assign(nextState.j, templateState.j);\n      nextState.jr.push.apply(nextState.jr, templateState.jr);\n      nextState.jd = templateState.jd;\n      nextState.t = templateState.t;\n    } else {\n      nextState = new State();\n    }\n    if (t) {\n      // Ensure newly token is in the same groups as the old token\n      if (groups) {\n        if (nextState.t && typeof nextState.t === 'string') {\n          const allFlags = assign(flagsForToken(nextState.t, groups), flags);\n          addToGroups(t, allFlags, groups);\n        } else if (flags) {\n          addToGroups(t, flags, groups);\n        }\n      }\n      nextState.t = t; // overwrite anything that was previously there\n    }\n\n    state.j[input] = nextState;\n    return nextState;\n  }\n};\n\n// Helper functions to improve minification (not exported outside linkifyjs module)\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string | string[]} input\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst ta = (state, input, next, flags, groups) => state.ta(input, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {RegExp} regexp\n * @param {T | State<T>} [next]\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst tr = (state, regexp, next, flags, groups) => state.tr(regexp, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string | string[]} input\n * @param {T | State<T>} [next]\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst ts = (state, input, next, flags, groups) => state.ts(input, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string} input\n * @param {T | State<T>} [next]\n * @param {Collections<T>} [groups]\n * @param {Flags} [flags]\n */\nconst tt = (state, input, next, flags, groups) => state.tt(input, next, flags, groups);\n\n/******************************************************************************\nText Tokens\nIdentifiers for token outputs from the regexp scanner\n******************************************************************************/\n\n// A valid web domain token\nconst WORD = 'WORD'; // only contains a-z\nconst UWORD = 'UWORD'; // contains letters other than a-z, used for IDN\n\n// Special case of word\nconst LOCALHOST = 'LOCALHOST';\n\n// Valid top-level domain, special case of WORD (see tlds.js)\nconst TLD = 'TLD';\n\n// Valid IDN TLD, special case of UWORD (see tlds.js)\nconst UTLD = 'UTLD';\n\n// The scheme portion of a web URI protocol. Supported types include: `mailto`,\n// `file`, and user-defined custom protocols. Limited to schemes that contain\n// only letters\nconst SCHEME = 'SCHEME';\n\n// Similar to SCHEME, except makes distinction for schemes that must always be\n// followed by `://`, not just `:`. Supported types include `http`, `https`,\n// `ftp`, `ftps`\nconst SLASH_SCHEME = 'SLASH_SCHEME';\n\n// Any sequence of digits 0-9\nconst NUM = 'NUM';\n\n// Any number of consecutive whitespace characters that are not newline\nconst WS = 'WS';\n\n// New line (unix style)\nconst NL$1 = 'NL'; // \\n\n\n// Opening/closing bracket classes\nconst OPENBRACE = 'OPENBRACE'; // {\nconst OPENBRACKET = 'OPENBRACKET'; // [\nconst OPENANGLEBRACKET = 'OPENANGLEBRACKET'; // <\nconst OPENPAREN = 'OPENPAREN'; // (\nconst CLOSEBRACE = 'CLOSEBRACE'; // }\nconst CLOSEBRACKET = 'CLOSEBRACKET'; // ]\nconst CLOSEANGLEBRACKET = 'CLOSEANGLEBRACKET'; // >\nconst CLOSEPAREN = 'CLOSEPAREN'; // )\n\n// Various symbols\nconst AMPERSAND = 'AMPERSAND'; // &\nconst APOSTROPHE = 'APOSTROPHE'; // '\nconst ASTERISK = 'ASTERISK'; // *\nconst AT = 'AT'; // @\nconst BACKSLASH = 'BACKSLASH'; // \\\nconst BACKTICK = 'BACKTICK'; // `\nconst CARET = 'CARET'; // ^\nconst COLON = 'COLON'; // :\nconst COMMA = 'COMMA'; // ,\nconst DOLLAR = 'DOLLAR'; // $\nconst DOT = 'DOT'; // .\nconst EQUALS = 'EQUALS'; // =\nconst EXCLAMATION = 'EXCLAMATION'; // !\nconst HYPHEN = 'HYPHEN'; // -\nconst PERCENT = 'PERCENT'; // %\nconst PIPE = 'PIPE'; // |\nconst PLUS = 'PLUS'; // +\nconst POUND = 'POUND'; // #\nconst QUERY = 'QUERY'; // ?\nconst QUOTE = 'QUOTE'; // \"\n\nconst SEMI = 'SEMI'; // ;\nconst SLASH = 'SLASH'; // /\nconst TILDE = 'TILDE'; // ~\nconst UNDERSCORE = 'UNDERSCORE'; // _\n\n// Emoji symbol\nconst EMOJI$1 = 'EMOJI';\n\n// Default token - anything that is not one of the above\nconst SYM = 'SYM';\nvar tk = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  WORD: WORD,\n  UWORD: UWORD,\n  LOCALHOST: LOCALHOST,\n  TLD: TLD,\n  UTLD: UTLD,\n  SCHEME: SCHEME,\n  SLASH_SCHEME: SLASH_SCHEME,\n  NUM: NUM,\n  WS: WS,\n  NL: NL$1,\n  OPENBRACE: OPENBRACE,\n  OPENBRACKET: OPENBRACKET,\n  OPENANGLEBRACKET: OPENANGLEBRACKET,\n  OPENPAREN: OPENPAREN,\n  CLOSEBRACE: CLOSEBRACE,\n  CLOSEBRACKET: CLOSEBRACKET,\n  CLOSEANGLEBRACKET: CLOSEANGLEBRACKET,\n  CLOSEPAREN: CLOSEPAREN,\n  AMPERSAND: AMPERSAND,\n  APOSTROPHE: APOSTROPHE,\n  ASTERISK: ASTERISK,\n  AT: AT,\n  BACKSLASH: BACKSLASH,\n  BACKTICK: BACKTICK,\n  CARET: CARET,\n  COLON: COLON,\n  COMMA: COMMA,\n  DOLLAR: DOLLAR,\n  DOT: DOT,\n  EQUALS: EQUALS,\n  EXCLAMATION: EXCLAMATION,\n  HYPHEN: HYPHEN,\n  PERCENT: PERCENT,\n  PIPE: PIPE,\n  PLUS: PLUS,\n  POUND: POUND,\n  QUERY: QUERY,\n  QUOTE: QUOTE,\n  SEMI: SEMI,\n  SLASH: SLASH,\n  TILDE: TILDE,\n  UNDERSCORE: UNDERSCORE,\n  EMOJI: EMOJI$1,\n  SYM: SYM\n});\n\n// Note that these two Unicode ones expand into a really big one with Babel\nconst ASCII_LETTER = /[a-z]/;\nconst LETTER = /\\p{L}/u; // Any Unicode character with letter data type\nconst EMOJI = /\\p{Emoji}/u; // Any Unicode emoji character\nconst EMOJI_VARIATION$1 = /\\ufe0f/;\nconst DIGIT = /\\d/;\nconst SPACE = /\\s/;\nvar regexp = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ASCII_LETTER: ASCII_LETTER,\n  LETTER: LETTER,\n  EMOJI: EMOJI,\n  EMOJI_VARIATION: EMOJI_VARIATION$1,\n  DIGIT: DIGIT,\n  SPACE: SPACE\n});\n\n/**\n\tThe scanner provides an interface that takes a string of text as input, and\n\toutputs an array of tokens instances that can be used for easy URL parsing.\n*/\nconst NL = '\\n'; // New line character\nconst EMOJI_VARIATION = '\\ufe0f'; // Variation selector, follows heart and others\nconst EMOJI_JOINER = '\\u200d'; // zero-width joiner\n\nlet tlds = null,\n  utlds = null; // don't change so only have to be computed once\n\n/**\n * Scanner output token:\n * - `t` is the token name (e.g., 'NUM', 'EMOJI', 'TLD')\n * - `v` is the value of the token (e.g., '123', '❤️', 'com')\n * - `s` is the start index of the token in the original string\n * - `e` is the end index of the token in the original string\n * @typedef {{t: string, v: string, s: number, e: number}} Token\n */\n\n/**\n * @template T\n * @typedef {{ [collection: string]: T[] }} Collections\n */\n\n/**\n * Initialize the scanner character-based state machine for the given start\n * state\n * @param {[string, boolean][]} customSchemes List of custom schemes, where each\n * item is a length-2 tuple with the first element set to the string scheme, and\n * the second element set to `true` if the `://` after the scheme is optional\n */\nfunction init$2(customSchemes) {\n  if (customSchemes === void 0) {\n    customSchemes = [];\n  }\n  // Frequently used states (name argument removed during minification)\n  /** @type Collections<string> */\n  const groups = {}; // of tokens\n  State.groups = groups;\n  /** @type State<string> */\n  const Start = new State();\n  if (tlds == null) {\n    tlds = decodeTlds(encodedTlds);\n  }\n  if (utlds == null) {\n    utlds = decodeTlds(encodedUtlds);\n  }\n\n  // States for special URL symbols that accept immediately after start\n  tt(Start, \"'\", APOSTROPHE);\n  tt(Start, '{', OPENBRACE);\n  tt(Start, '[', OPENBRACKET);\n  tt(Start, '<', OPENANGLEBRACKET);\n  tt(Start, '(', OPENPAREN);\n  tt(Start, '}', CLOSEBRACE);\n  tt(Start, ']', CLOSEBRACKET);\n  tt(Start, '>', CLOSEANGLEBRACKET);\n  tt(Start, ')', CLOSEPAREN);\n  tt(Start, '&', AMPERSAND);\n  tt(Start, '*', ASTERISK);\n  tt(Start, '@', AT);\n  tt(Start, '`', BACKTICK);\n  tt(Start, '^', CARET);\n  tt(Start, ':', COLON);\n  tt(Start, ',', COMMA);\n  tt(Start, '$', DOLLAR);\n  tt(Start, '.', DOT);\n  tt(Start, '=', EQUALS);\n  tt(Start, '!', EXCLAMATION);\n  tt(Start, '-', HYPHEN);\n  tt(Start, '%', PERCENT);\n  tt(Start, '|', PIPE);\n  tt(Start, '+', PLUS);\n  tt(Start, '#', POUND);\n  tt(Start, '?', QUERY);\n  tt(Start, '\"', QUOTE);\n  tt(Start, '/', SLASH);\n  tt(Start, ';', SEMI);\n  tt(Start, '~', TILDE);\n  tt(Start, '_', UNDERSCORE);\n  tt(Start, '\\\\', BACKSLASH);\n  const Num = tr(Start, DIGIT, NUM, {\n    [numeric]: true\n  });\n  tr(Num, DIGIT, Num);\n\n  // State which emits a word token\n  const Word = tr(Start, ASCII_LETTER, WORD, {\n    [ascii]: true\n  });\n  tr(Word, ASCII_LETTER, Word);\n\n  // Same as previous, but specific to non-fsm.ascii alphabet words\n  const UWord = tr(Start, LETTER, UWORD, {\n    [alpha]: true\n  });\n  tr(UWord, ASCII_LETTER); // Non-accepting\n  tr(UWord, LETTER, UWord);\n\n  // Whitespace jumps\n  // Tokens of only non-newline whitespace are arbitrarily long\n  // If any whitespace except newline, more whitespace!\n  const Ws = tr(Start, SPACE, WS, {\n    [whitespace]: true\n  });\n  tt(Start, NL, NL$1, {\n    [whitespace]: true\n  });\n  tt(Ws, NL); // non-accepting state to avoid mixing whitespaces\n  tr(Ws, SPACE, Ws);\n\n  // Emoji tokens. They are not grouped by the scanner except in cases where a\n  // zero-width joiner is present\n  const Emoji = tr(Start, EMOJI, EMOJI$1, {\n    [emoji]: true\n  });\n  tr(Emoji, EMOJI, Emoji);\n  tt(Emoji, EMOJI_VARIATION, Emoji);\n  // tt(Start, EMOJI_VARIATION, Emoji); // This one is sketchy\n\n  const EmojiJoiner = tt(Emoji, EMOJI_JOINER);\n  tr(EmojiJoiner, EMOJI, Emoji);\n  // tt(EmojiJoiner, EMOJI_VARIATION, Emoji); // also sketchy\n\n  // Generates states for top-level domains\n  // Note that this is most accurate when tlds are in alphabetical order\n  const wordjr = [[ASCII_LETTER, Word]];\n  const uwordjr = [[ASCII_LETTER, null], [LETTER, UWord]];\n  for (let i = 0; i < tlds.length; i++) {\n    fastts(Start, tlds[i], TLD, WORD, wordjr);\n  }\n  for (let i = 0; i < utlds.length; i++) {\n    fastts(Start, utlds[i], UTLD, UWORD, uwordjr);\n  }\n  addToGroups(TLD, {\n    tld: true,\n    ascii: true\n  }, groups);\n  addToGroups(UTLD, {\n    utld: true,\n    alpha: true\n  }, groups);\n\n  // Collect the states generated by different protocols. NOTE: If any new TLDs\n  // get added that are also protocols, set the token to be the same as the\n  // protocol to ensure parsing works as expected.\n  fastts(Start, 'file', SCHEME, WORD, wordjr);\n  fastts(Start, 'mailto', SCHEME, WORD, wordjr);\n  fastts(Start, 'http', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'https', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'ftp', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'ftps', SLASH_SCHEME, WORD, wordjr);\n  addToGroups(SCHEME, {\n    scheme: true,\n    ascii: true\n  }, groups);\n  addToGroups(SLASH_SCHEME, {\n    slashscheme: true,\n    ascii: true\n  }, groups);\n\n  // Register custom schemes. Assumes each scheme is asciinumeric with hyphens\n  customSchemes = customSchemes.sort((a, b) => a[0] > b[0] ? 1 : -1);\n  for (let i = 0; i < customSchemes.length; i++) {\n    const sch = customSchemes[i][0];\n    const optionalSlashSlash = customSchemes[i][1];\n    const flags = optionalSlashSlash ? {\n      [scheme]: true\n    } : {\n      [slashscheme]: true\n    };\n    if (sch.indexOf('-') >= 0) {\n      flags[domain] = true;\n    } else if (!ASCII_LETTER.test(sch)) {\n      flags[numeric] = true; // numbers only\n    } else if (DIGIT.test(sch)) {\n      flags[asciinumeric] = true;\n    } else {\n      flags[ascii] = true;\n    }\n    ts(Start, sch, sch, flags);\n  }\n\n  // Localhost token\n  ts(Start, 'localhost', LOCALHOST, {\n    ascii: true\n  });\n\n  // Set default transition for start state (some symbol)\n  Start.jd = new State(SYM);\n  return {\n    start: Start,\n    tokens: assign({\n      groups\n    }, tk)\n  };\n}\n\n/**\n\tGiven a string, returns an array of TOKEN instances representing the\n\tcomposition of that string.\n\n\t@method run\n\t@param {State<string>} start scanner starting state\n\t@param {string} str input string to scan\n\t@return {Token[]} list of tokens, each with a type and value\n*/\nfunction run$1(start, str) {\n  // State machine is not case sensitive, so input is tokenized in lowercased\n  // form (still returns regular case). Uses selective `toLowerCase` because\n  // lowercasing the entire string causes the length and character position to\n  // vary in some non-English strings with V8-based runtimes.\n  const iterable = stringToArray(str.replace(/[A-Z]/g, c => c.toLowerCase()));\n  const charCount = iterable.length; // <= len if there are emojis, etc\n  const tokens = []; // return value\n\n  // cursor through the string itself, accounting for characters that have\n  // width with length 2 such as emojis\n  let cursor = 0;\n\n  // Cursor through the array-representation of the string\n  let charCursor = 0;\n\n  // Tokenize the string\n  while (charCursor < charCount) {\n    let state = start;\n    let nextState = null;\n    let tokenLength = 0;\n    let latestAccepting = null;\n    let sinceAccepts = -1;\n    let charsSinceAccepts = -1;\n    while (charCursor < charCount && (nextState = state.go(iterable[charCursor]))) {\n      state = nextState;\n\n      // Keep track of the latest accepting state\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        charsSinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts += iterable[charCursor].length;\n        charsSinceAccepts++;\n      }\n      tokenLength += iterable[charCursor].length;\n      cursor += iterable[charCursor].length;\n      charCursor++;\n    }\n\n    // Roll back to the latest accepting state\n    cursor -= sinceAccepts;\n    charCursor -= charsSinceAccepts;\n    tokenLength -= sinceAccepts;\n\n    // No more jumps, just make a new token from the last accepting one\n    tokens.push({\n      t: latestAccepting.t,\n      // token type/name\n      v: str.slice(cursor - tokenLength, cursor),\n      // string value\n      s: cursor - tokenLength,\n      // start index\n      e: cursor // end index (excluding)\n    });\n  }\n\n  return tokens;\n}\n\n/**\n * Convert a String to an Array of characters, taking into account that some\n * characters like emojis take up two string indexes.\n *\n * Adapted from core-js (MIT license)\n * https://github.com/zloirock/core-js/blob/2d69cf5f99ab3ea3463c395df81e5a15b68f49d9/packages/core-js/internals/string-multibyte.js\n *\n * @function stringToArray\n * @param {string} str\n * @returns {string[]}\n */\nfunction stringToArray(str) {\n  const result = [];\n  const len = str.length;\n  let index = 0;\n  while (index < len) {\n    let first = str.charCodeAt(index);\n    let second;\n    let char = first < 0xd800 || first > 0xdbff || index + 1 === len || (second = str.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? str[index] // single character\n    : str.slice(index, index + 2); // two-index characters\n    result.push(char);\n    index += char.length;\n  }\n  return result;\n}\n\n/**\n * Fast version of ts function for when transition defaults are well known\n * @param {State<string>} state\n * @param {string} input\n * @param {string} t\n * @param {string} defaultt\n * @param {[RegExp, State<string>][]} jr\n * @returns {State<string>}\n */\nfunction fastts(state, input, t, defaultt, jr) {\n  let next;\n  const len = input.length;\n  for (let i = 0; i < len - 1; i++) {\n    const char = input[i];\n    if (state.j[char]) {\n      next = state.j[char];\n    } else {\n      next = new State(defaultt);\n      next.jr = jr.slice();\n      state.j[char] = next;\n    }\n    state = next;\n  }\n  next = new State(t);\n  next.jr = jr.slice();\n  state.j[input[len - 1]] = next;\n  return next;\n}\n\n/**\n * Converts a string of Top-Level Domain names encoded in update-tlds.js back\n * into a list of strings.\n * @param {str} encoded encoded TLDs string\n * @returns {str[]} original TLDs list\n */\nfunction decodeTlds(encoded) {\n  const words = [];\n  const stack = [];\n  let i = 0;\n  let digits = '0123456789';\n  while (i < encoded.length) {\n    let popDigitCount = 0;\n    while (digits.indexOf(encoded[i + popDigitCount]) >= 0) {\n      popDigitCount++; // encountered some digits, have to pop to go one level up trie\n    }\n\n    if (popDigitCount > 0) {\n      words.push(stack.join('')); // whatever preceded the pop digits must be a word\n      for (let popCount = parseInt(encoded.substring(i, i + popDigitCount), 10); popCount > 0; popCount--) {\n        stack.pop();\n      }\n      i += popDigitCount;\n    } else {\n      stack.push(encoded[i]); // drop down a level into the trie\n      i++;\n    }\n  }\n  return words;\n}\n\n/**\n * An object where each key is a valid DOM Event Name such as `click` or `focus`\n * and each value is an event handler function.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Element#events\n * @typedef {?{ [event: string]: Function }} EventListeners\n */\n\n/**\n * All formatted properties required to render a link, including `tagName`,\n * `attributes`, `content` and `eventListeners`.\n * @typedef {{ tagName: any, attributes: {[attr: string]: any}, content: string,\n * eventListeners: EventListeners }} IntermediateRepresentation\n */\n\n/**\n * Specify either an object described by the template type `O` or a function.\n *\n * The function takes a string value (usually the link's href attribute), the\n * link type (`'url'`, `'hashtag`', etc.) and an internal token representation\n * of the link. It should return an object of the template type `O`\n * @template O\n * @typedef {O | ((value: string, type: string, token: MultiToken) => O)} OptObj\n */\n\n/**\n * Specify either a function described by template type `F` or an object.\n *\n * Each key in the object should be a link type (`'url'`, `'hashtag`', etc.). Each\n * value should be a function with template type `F` that is called when the\n * corresponding link type is encountered.\n * @template F\n * @typedef {F | { [type: string]: F}} OptFn\n */\n\n/**\n * Specify either a value with template type `V`, a function that returns `V` or\n * an object where each value resolves to `V`.\n *\n * The function takes a string value (usually the link's href attribute), the\n * link type (`'url'`, `'hashtag`', etc.) and an internal token representation\n * of the link. It should return an object of the template type `V`\n *\n * For the object, each key should be a link type (`'url'`, `'hashtag`', etc.).\n * Each value should either have type `V` or a function that returns V. This\n * function similarly takes a string value and a token.\n *\n * Example valid types for `Opt<string>`:\n *\n * ```js\n * 'hello'\n * (value, type, token) => 'world'\n * { url: 'hello', email: (value, token) => 'world'}\n * ```\n * @template V\n * @typedef {V | ((value: string, type: string, token: MultiToken) => V) | { [type: string]: V | ((value: string, token: MultiToken) => V) }} Opt\n */\n\n/**\n * See available options: https://linkify.js.org/docs/options.html\n * @typedef {{\n * \tdefaultProtocol?: string,\n *  events?: OptObj<EventListeners>,\n * \tformat?: Opt<string>,\n * \tformatHref?: Opt<string>,\n * \tnl2br?: boolean,\n * \ttagName?: Opt<any>,\n * \ttarget?: Opt<string>,\n * \trel?: Opt<string>,\n * \tvalidate?: Opt<boolean>,\n * \ttruncate?: Opt<number>,\n * \tclassName?: Opt<string>,\n * \tattributes?: OptObj<({ [attr: string]: any })>,\n *  ignoreTags?: string[],\n * \trender?: OptFn<((ir: IntermediateRepresentation) => any)>\n * }} Opts\n */\n\n/**\n * @type Required<Opts>\n */\nconst defaults = {\n  defaultProtocol: 'http',\n  events: null,\n  format: noop,\n  formatHref: noop,\n  nl2br: false,\n  tagName: 'a',\n  target: null,\n  rel: null,\n  validate: true,\n  truncate: Infinity,\n  className: null,\n  attributes: null,\n  ignoreTags: [],\n  render: null\n};\n\n/**\n * Utility class for linkify interfaces to apply specified\n * {@link Opts formatting and rendering options}.\n *\n * @param {Opts | Options} [opts] Option value overrides.\n * @param {(ir: IntermediateRepresentation) => any} [defaultRender] (For\n *   internal use) default render function that determines how to generate an\n *   HTML element based on a link token's derived tagName, attributes and HTML.\n *   Similar to render option\n */\nfunction Options(opts, defaultRender) {\n  if (defaultRender === void 0) {\n    defaultRender = null;\n  }\n  let o = assign({}, defaults);\n  if (opts) {\n    o = assign(o, opts instanceof Options ? opts.o : opts);\n  }\n\n  // Ensure all ignored tags are uppercase\n  const ignoredTags = o.ignoreTags;\n  const uppercaseIgnoredTags = [];\n  for (let i = 0; i < ignoredTags.length; i++) {\n    uppercaseIgnoredTags.push(ignoredTags[i].toUpperCase());\n  }\n  /** @protected */\n  this.o = o;\n  if (defaultRender) {\n    this.defaultRender = defaultRender;\n  }\n  this.ignoreTags = uppercaseIgnoredTags;\n}\nOptions.prototype = {\n  o: defaults,\n  /**\n   * @type string[]\n   */\n  ignoreTags: [],\n  /**\n   * @param {IntermediateRepresentation} ir\n   * @returns {any}\n   */\n  defaultRender(ir) {\n    return ir;\n  },\n  /**\n   * Returns true or false based on whether a token should be displayed as a\n   * link based on the user options.\n   * @param {MultiToken} token\n   * @returns {boolean}\n   */\n  check(token) {\n    return this.get('validate', token.toString(), token);\n  },\n  // Private methods\n\n  /**\n   * Resolve an option's value based on the value of the option and the given\n   * params. If operator and token are specified and the target option is\n   * callable, automatically calls the function with the given argument.\n   * @template {keyof Opts} K\n   * @param {K} key Name of option to use\n   * @param {string} [operator] will be passed to the target option if it's a\n   * function. If not specified, RAW function value gets returned\n   * @param {MultiToken} [token] The token from linkify.tokenize\n   * @returns {Opts[K] | any}\n   */\n  get(key, operator, token) {\n    const isCallable = operator != null;\n    let option = this.o[key];\n    if (!option) {\n      return option;\n    }\n    if (typeof option === 'object') {\n      option = token.t in option ? option[token.t] : defaults[key];\n      if (typeof option === 'function' && isCallable) {\n        option = option(operator, token);\n      }\n    } else if (typeof option === 'function' && isCallable) {\n      option = option(operator, token.t, token);\n    }\n    return option;\n  },\n  /**\n   * @template {keyof Opts} L\n   * @param {L} key Name of options object to use\n   * @param {string} [operator]\n   * @param {MultiToken} [token]\n   * @returns {Opts[L] | any}\n   */\n  getObj(key, operator, token) {\n    let obj = this.o[key];\n    if (typeof obj === 'function' && operator != null) {\n      obj = obj(operator, token.t, token);\n    }\n    return obj;\n  },\n  /**\n   * Convert the given token to a rendered element that may be added to the\n   * calling-interface's DOM\n   * @param {MultiToken} token Token to render to an HTML element\n   * @returns {any} Render result; e.g., HTML string, DOM element, React\n   *   Component, etc.\n   */\n  render(token) {\n    const ir = token.render(this); // intermediate representation\n    const renderFn = this.get('render', null, token) || this.defaultRender;\n    return renderFn(ir, token.t, token);\n  }\n};\nfunction noop(val) {\n  return val;\n}\nvar options = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  defaults: defaults,\n  Options: Options,\n  assign: assign\n});\n\n/******************************************************************************\n\tMulti-Tokens\n\tTokens composed of arrays of TextTokens\n******************************************************************************/\n\n/**\n * @param {string} value\n * @param {Token[]} tokens\n */\nfunction MultiToken(value, tokens) {\n  this.t = 'token';\n  this.v = value;\n  this.tk = tokens;\n}\n\n/**\n * Abstract class used for manufacturing tokens of text tokens. That is rather\n * than the value for a token being a small string of text, it's value an array\n * of text tokens.\n *\n * Used for grouping together URLs, emails, hashtags, and other potential\n * creations.\n * @class MultiToken\n * @property {string} t\n * @property {string} v\n * @property {Token[]} tk\n * @abstract\n */\nMultiToken.prototype = {\n  isLink: false,\n  /**\n   * Return the string this token represents.\n   * @return {string}\n   */\n  toString() {\n    return this.v;\n  },\n  /**\n   * What should the value for this token be in the `href` HTML attribute?\n   * Returns the `.toString` value by default.\n   * @param {string} [scheme]\n   * @return {string}\n  */\n  toHref(scheme) {\n    return this.toString();\n  },\n  /**\n   * @param {Options} options Formatting options\n   * @returns {string}\n   */\n  toFormattedString(options) {\n    const val = this.toString();\n    const truncate = options.get('truncate', val, this);\n    const formatted = options.get('format', val, this);\n    return truncate && formatted.length > truncate ? formatted.substring(0, truncate) + '…' : formatted;\n  },\n  /**\n   *\n   * @param {Options} options\n   * @returns {string}\n   */\n  toFormattedHref(options) {\n    return options.get('formatHref', this.toHref(options.get('defaultProtocol')), this);\n  },\n  /**\n   * The start index of this token in the original input string\n   * @returns {number}\n   */\n  startIndex() {\n    return this.tk[0].s;\n  },\n  /**\n   * The end index of this token in the original input string (up to this\n   * index but not including it)\n   * @returns {number}\n   */\n  endIndex() {\n    return this.tk[this.tk.length - 1].e;\n  },\n  /**\n  \tReturns an object  of relevant values for this token, which includes keys\n  \t* type - Kind of token ('url', 'email', etc.)\n  \t* value - Original text\n  \t* href - The value that should be added to the anchor tag's href\n  \t\tattribute\n  \t\t@method toObject\n  \t@param {string} [protocol] `'http'` by default\n  */\n  toObject(protocol) {\n    if (protocol === void 0) {\n      protocol = defaults.defaultProtocol;\n    }\n    return {\n      type: this.t,\n      value: this.toString(),\n      isLink: this.isLink,\n      href: this.toHref(protocol),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n  /**\n   *\n   * @param {Options} options Formatting option\n   */\n  toFormattedObject(options) {\n    return {\n      type: this.t,\n      value: this.toFormattedString(options),\n      isLink: this.isLink,\n      href: this.toFormattedHref(options),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n  /**\n   * Whether this token should be rendered as a link according to the given options\n   * @param {Options} options\n   * @returns {boolean}\n   */\n  validate(options) {\n    return options.get('validate', this.toString(), this);\n  },\n  /**\n   * Return an object that represents how this link should be rendered.\n   * @param {Options} options Formattinng options\n   */\n  render(options) {\n    const token = this;\n    const href = this.toHref(options.get('defaultProtocol'));\n    const formattedHref = options.get('formatHref', href, this);\n    const tagName = options.get('tagName', href, token);\n    const content = this.toFormattedString(options);\n    const attributes = {};\n    const className = options.get('className', href, token);\n    const target = options.get('target', href, token);\n    const rel = options.get('rel', href, token);\n    const attrs = options.getObj('attributes', href, token);\n    const eventListeners = options.getObj('events', href, token);\n    attributes.href = formattedHref;\n    if (className) {\n      attributes.class = className;\n    }\n    if (target) {\n      attributes.target = target;\n    }\n    if (rel) {\n      attributes.rel = rel;\n    }\n    if (attrs) {\n      assign(attributes, attrs);\n    }\n    return {\n      tagName,\n      attributes,\n      content,\n      eventListeners\n    };\n  }\n};\n\n/**\n * Create a new token that can be emitted by the parser state machine\n * @param {string} type readable type of the token\n * @param {object} props properties to assign or override, including isLink = true or false\n * @returns {new (value: string, tokens: Token[]) => MultiToken} new token class\n */\nfunction createTokenClass(type, props) {\n  class Token extends MultiToken {\n    constructor(value, tokens) {\n      super(value, tokens);\n      this.t = type;\n    }\n  }\n  for (const p in props) {\n    Token.prototype[p] = props[p];\n  }\n  Token.t = type;\n  return Token;\n}\n\n/**\n\tRepresents a list of tokens making up a valid email address\n*/\nconst Email = createTokenClass('email', {\n  isLink: true,\n  toHref() {\n    return 'mailto:' + this.toString();\n  }\n});\n\n/**\n\tRepresents some plain text\n*/\nconst Text = createTokenClass('text');\n\n/**\n\tMulti-linebreak token - represents a line break\n\t@class Nl\n*/\nconst Nl = createTokenClass('nl');\n\n/**\n\tRepresents a list of text tokens making up a valid URL\n\t@class Url\n*/\nconst Url = createTokenClass('url', {\n  isLink: true,\n  /**\n  \tLowercases relevant parts of the domain and adds the protocol if\n  \trequired. Note that this will not escape unsafe HTML characters in the\n  \tURL.\n  \t\t@param {string} [scheme] default scheme (e.g., 'https')\n  \t@return {string} the full href\n  */\n  toHref(scheme) {\n    if (scheme === void 0) {\n      scheme = defaults.defaultProtocol;\n    }\n    // Check if already has a prefix scheme\n    return this.hasProtocol() ? this.v : `${scheme}://${this.v}`;\n  },\n  /**\n   * Check whether this URL token has a protocol\n   * @return {boolean}\n   */\n  hasProtocol() {\n    const tokens = this.tk;\n    return tokens.length >= 2 && tokens[0].t !== LOCALHOST && tokens[1].t === COLON;\n  }\n});\nvar multi = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  MultiToken: MultiToken,\n  Base: MultiToken,\n  createTokenClass: createTokenClass,\n  Email: Email,\n  Text: Text,\n  Nl: Nl,\n  Url: Url\n});\n\n/**\n\tNot exactly parser, more like the second-stage scanner (although we can\n\ttheoretically hotswap the code here with a real parser in the future... but\n\tfor a little URL-finding utility abstract syntax trees may be a little\n\toverkill).\n\n\tURL format: http://en.wikipedia.org/wiki/URI_scheme\n\tEmail format: http://en.wikipedia.org/wiki/EmailAddress (links to RFC in\n\treference)\n\n\t@module linkify\n\t@submodule parser\n\t@main run\n*/\nconst makeState = arg => new State(arg);\n\n/**\n * Generate the parser multi token-based state machine\n * @param {{ groups: Collections<string> }} tokens\n */\nfunction init$1(_ref) {\n  let {\n    groups\n  } = _ref;\n  // Types of characters the URL can definitely end in\n  const qsAccepting = groups.domain.concat([AMPERSAND, ASTERISK, AT, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, NUM, PERCENT, PIPE, PLUS, POUND, SLASH, SYM, TILDE, UNDERSCORE]);\n\n  // Types of tokens that can follow a URL and be part of the query string\n  // but cannot be the very last characters\n  // Characters that cannot appear in the URL at all should be excluded\n  const qsNonAccepting = [APOSTROPHE, CLOSEANGLEBRACKET, CLOSEBRACE, CLOSEBRACKET, CLOSEPAREN, COLON, COMMA, DOT, EXCLAMATION, OPENANGLEBRACKET, OPENBRACE, OPENBRACKET, OPENPAREN, QUERY, QUOTE, SEMI];\n\n  // For addresses without the mailto prefix\n  // Tokens allowed in the localpart of the email\n  const localpartAccepting = [AMPERSAND, APOSTROPHE, ASTERISK, BACKSLASH, BACKTICK, CARET, CLOSEBRACE, DOLLAR, EQUALS, HYPHEN, OPENBRACE, PERCENT, PIPE, PLUS, POUND, QUERY, SLASH, SYM, TILDE, UNDERSCORE];\n\n  // The universal starting state.\n  /**\n   * @type State<Token>\n   */\n  const Start = makeState();\n  const Localpart = tt(Start, TILDE); // Local part of the email address\n  ta(Localpart, localpartAccepting, Localpart);\n  ta(Localpart, groups.domain, Localpart);\n  const Domain = makeState(),\n    Scheme = makeState(),\n    SlashScheme = makeState();\n  ta(Start, groups.domain, Domain); // parsed string ends with a potential domain name (A)\n  ta(Start, groups.scheme, Scheme); // e.g., 'mailto'\n  ta(Start, groups.slashscheme, SlashScheme); // e.g., 'http'\n\n  ta(Domain, localpartAccepting, Localpart);\n  ta(Domain, groups.domain, Domain);\n  const LocalpartAt = tt(Domain, AT); // Local part of the email address plus @\n\n  tt(Localpart, AT, LocalpartAt); // close to an email address now\n\n  // Local part of an email address can be e.g. 'http' or 'mailto'\n  tt(Scheme, AT, LocalpartAt);\n  tt(SlashScheme, AT, LocalpartAt);\n  const LocalpartDot = tt(Localpart, DOT); // Local part of the email address plus '.' (localpart cannot end in .)\n  ta(LocalpartDot, localpartAccepting, Localpart);\n  ta(LocalpartDot, groups.domain, Localpart);\n  const EmailDomain = makeState();\n  ta(LocalpartAt, groups.domain, EmailDomain); // parsed string starts with local email info + @ with a potential domain name\n  ta(EmailDomain, groups.domain, EmailDomain);\n  const EmailDomainDot = tt(EmailDomain, DOT); // domain followed by DOT\n  ta(EmailDomainDot, groups.domain, EmailDomain);\n  const Email$1 = makeState(Email); // Possible email address (could have more tlds)\n  ta(EmailDomainDot, groups.tld, Email$1);\n  ta(EmailDomainDot, groups.utld, Email$1);\n  tt(LocalpartAt, LOCALHOST, Email$1);\n\n  // Hyphen can jump back to a domain name\n  const EmailDomainHyphen = tt(EmailDomain, HYPHEN); // parsed string starts with local email info + @ with a potential domain name\n  ta(EmailDomainHyphen, groups.domain, EmailDomain);\n  ta(Email$1, groups.domain, EmailDomain);\n  tt(Email$1, DOT, EmailDomainDot);\n  tt(Email$1, HYPHEN, EmailDomainHyphen);\n\n  // Final possible email states\n  const EmailColon = tt(Email$1, COLON); // URL followed by colon (potential port number here)\n  /*const EmailColonPort = */\n  ta(EmailColon, groups.numeric, Email); // URL followed by colon and port numner\n\n  // Account for dots and hyphens. Hyphens are usually parts of domain names\n  // (but not TLDs)\n  const DomainHyphen = tt(Domain, HYPHEN); // domain followed by hyphen\n  const DomainDot = tt(Domain, DOT); // domain followed by DOT\n  ta(DomainHyphen, groups.domain, Domain);\n  ta(DomainDot, localpartAccepting, Localpart);\n  ta(DomainDot, groups.domain, Domain);\n  const DomainDotTld = makeState(Url); // Simplest possible URL with no query string\n  ta(DomainDot, groups.tld, DomainDotTld);\n  ta(DomainDot, groups.utld, DomainDotTld);\n  ta(DomainDotTld, groups.domain, Domain);\n  ta(DomainDotTld, localpartAccepting, Localpart);\n  tt(DomainDotTld, DOT, DomainDot);\n  tt(DomainDotTld, HYPHEN, DomainHyphen);\n  tt(DomainDotTld, AT, LocalpartAt);\n  const DomainDotTldColon = tt(DomainDotTld, COLON); // URL followed by colon (potential port number here)\n  const DomainDotTldColonPort = makeState(Url); // TLD followed by a port number\n  ta(DomainDotTldColon, groups.numeric, DomainDotTldColonPort);\n\n  // Long URL with optional port and maybe query string\n  const Url$1 = makeState(Url);\n\n  // URL with extra symbols at the end, followed by an opening bracket\n  const UrlNonaccept = makeState(); // URL followed by some symbols (will not be part of the final URL)\n\n  // Query strings\n  ta(Url$1, qsAccepting, Url$1);\n  ta(Url$1, qsNonAccepting, UrlNonaccept);\n  ta(UrlNonaccept, qsAccepting, Url$1);\n  ta(UrlNonaccept, qsNonAccepting, UrlNonaccept);\n\n  // Become real URLs after `SLASH` or `COLON NUM SLASH`\n  // Here works with or without scheme:// prefix\n  tt(DomainDotTld, SLASH, Url$1);\n  tt(DomainDotTldColonPort, SLASH, Url$1);\n\n  // Note that domains that begin with schemes are treated slighly differently\n  const SchemeColon = tt(Scheme, COLON); // e.g., 'mailto:'\n  const SlashSchemeColon = tt(SlashScheme, COLON); // e.g., 'http:'\n  const SlashSchemeColonSlash = tt(SlashSchemeColon, SLASH); // e.g., 'http:/'\n\n  const UriPrefix = tt(SlashSchemeColonSlash, SLASH); // e.g., 'http://'\n\n  // Scheme states can transition to domain states\n  ta(Scheme, groups.domain, Domain);\n  tt(Scheme, DOT, DomainDot);\n  tt(Scheme, HYPHEN, DomainHyphen);\n  ta(SlashScheme, groups.domain, Domain);\n  tt(SlashScheme, DOT, DomainDot);\n  tt(SlashScheme, HYPHEN, DomainHyphen);\n\n  // Force URL with scheme prefix followed by anything sane\n  ta(SchemeColon, groups.domain, Url$1);\n  tt(SchemeColon, SLASH, Url$1);\n  ta(UriPrefix, groups.domain, Url$1);\n  ta(UriPrefix, qsAccepting, Url$1);\n  tt(UriPrefix, SLASH, Url$1);\n\n  // URL, followed by an opening bracket\n  const UrlOpenbrace = tt(Url$1, OPENBRACE); // URL followed by {\n  const UrlOpenbracket = tt(Url$1, OPENBRACKET); // URL followed by [\n  const UrlOpenanglebracket = tt(Url$1, OPENANGLEBRACKET); // URL followed by <\n  const UrlOpenparen = tt(Url$1, OPENPAREN); // URL followed by (\n\n  tt(UrlNonaccept, OPENBRACE, UrlOpenbrace);\n  tt(UrlNonaccept, OPENBRACKET, UrlOpenbracket);\n  tt(UrlNonaccept, OPENANGLEBRACKET, UrlOpenanglebracket);\n  tt(UrlNonaccept, OPENPAREN, UrlOpenparen);\n\n  // Closing bracket component. This character WILL be included in the URL\n  tt(UrlOpenbrace, CLOSEBRACE, Url$1);\n  tt(UrlOpenbracket, CLOSEBRACKET, Url$1);\n  tt(UrlOpenanglebracket, CLOSEANGLEBRACKET, Url$1);\n  tt(UrlOpenparen, CLOSEPAREN, Url$1);\n  tt(UrlOpenbrace, CLOSEBRACE, Url$1);\n\n  // URL that beings with an opening bracket, followed by a symbols.\n  // Note that the final state can still be `UrlOpenbrace` (if the URL only\n  // has a single opening bracket for some reason).\n  const UrlOpenbraceQ = makeState(Url); // URL followed by { and some symbols that the URL can end it\n  const UrlOpenbracketQ = makeState(Url); // URL followed by [ and some symbols that the URL can end it\n  const UrlOpenanglebracketQ = makeState(Url); // URL followed by < and some symbols that the URL can end it\n  const UrlOpenparenQ = makeState(Url); // URL followed by ( and some symbols that the URL can end it\n  ta(UrlOpenbrace, qsAccepting, UrlOpenbraceQ);\n  ta(UrlOpenbracket, qsAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracket, qsAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparen, qsAccepting, UrlOpenparenQ);\n  const UrlOpenbraceSyms = makeState(); // UrlOpenbrace followed by some symbols it cannot end it\n  const UrlOpenbracketSyms = makeState(); // UrlOpenbracketQ followed by some symbols it cannot end it\n  const UrlOpenanglebracketSyms = makeState(); // UrlOpenanglebracketQ followed by some symbols it cannot end it\n  const UrlOpenparenSyms = makeState(); // UrlOpenparenQ followed by some symbols it cannot end it\n  ta(UrlOpenbrace, qsNonAccepting);\n  ta(UrlOpenbracket, qsNonAccepting);\n  ta(UrlOpenanglebracket, qsNonAccepting);\n  ta(UrlOpenparen, qsNonAccepting);\n\n  // URL that begins with an opening bracket, followed by some symbols\n  ta(UrlOpenbraceQ, qsAccepting, UrlOpenbraceQ);\n  ta(UrlOpenbracketQ, qsAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracketQ, qsAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparenQ, qsAccepting, UrlOpenparenQ);\n  ta(UrlOpenbraceQ, qsNonAccepting, UrlOpenbraceQ);\n  ta(UrlOpenbracketQ, qsNonAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracketQ, qsNonAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparenQ, qsNonAccepting, UrlOpenparenQ);\n  ta(UrlOpenbraceSyms, qsAccepting, UrlOpenbraceSyms);\n  ta(UrlOpenbracketSyms, qsAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracketSyms, qsAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparenSyms, qsAccepting, UrlOpenparenQ);\n  ta(UrlOpenbraceSyms, qsNonAccepting, UrlOpenbraceSyms);\n  ta(UrlOpenbracketSyms, qsNonAccepting, UrlOpenbracketSyms);\n  ta(UrlOpenanglebracketSyms, qsNonAccepting, UrlOpenanglebracketSyms);\n  ta(UrlOpenparenSyms, qsNonAccepting, UrlOpenparenSyms);\n\n  // Close brace/bracket to become regular URL\n  tt(UrlOpenbracketQ, CLOSEBRACKET, Url$1);\n  tt(UrlOpenanglebracketQ, CLOSEANGLEBRACKET, Url$1);\n  tt(UrlOpenparenQ, CLOSEPAREN, Url$1);\n  tt(UrlOpenbraceQ, CLOSEBRACE, Url$1);\n  tt(UrlOpenbracketSyms, CLOSEBRACKET, Url$1);\n  tt(UrlOpenanglebracketSyms, CLOSEANGLEBRACKET, Url$1);\n  tt(UrlOpenparenSyms, CLOSEPAREN, Url$1);\n  tt(UrlOpenbraceSyms, CLOSEPAREN, Url$1);\n  tt(Start, LOCALHOST, DomainDotTld); // localhost is a valid URL state\n  tt(Start, NL$1, Nl); // single new line\n\n  return {\n    start: Start,\n    tokens: tk\n  };\n}\n\n/**\n * Run the parser state machine on a list of scanned string-based tokens to\n * create a list of multi tokens, each of which represents a URL, email address,\n * plain text, etc.\n *\n * @param {State<MultiToken>} start parser start state\n * @param {string} input the original input used to generate the given tokens\n * @param {Token[]} tokens list of scanned tokens\n * @returns {MultiToken[]}\n */\nfunction run(start, input, tokens) {\n  let len = tokens.length;\n  let cursor = 0;\n  let multis = [];\n  let textTokens = [];\n  while (cursor < len) {\n    let state = start;\n    let secondState = null;\n    let nextState = null;\n    let multiLength = 0;\n    let latestAccepting = null;\n    let sinceAccepts = -1;\n    while (cursor < len && !(secondState = state.go(tokens[cursor].t))) {\n      // Starting tokens with nowhere to jump to.\n      // Consider these to be just plain text\n      textTokens.push(tokens[cursor++]);\n    }\n    while (cursor < len && (nextState = secondState || state.go(tokens[cursor].t))) {\n      // Get the next state\n      secondState = null;\n      state = nextState;\n\n      // Keep track of the latest accepting state\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts++;\n      }\n      cursor++;\n      multiLength++;\n    }\n    if (sinceAccepts < 0) {\n      // No accepting state was found, part of a regular text token add\n      // the first text token to the text tokens array and try again from\n      // the next\n      cursor -= multiLength;\n      if (cursor < len) {\n        textTokens.push(tokens[cursor]);\n        cursor++;\n      }\n    } else {\n      // Accepting state!\n      // First close off the textTokens (if available)\n      if (textTokens.length > 0) {\n        multis.push(initMultiToken(Text, input, textTokens));\n        textTokens = [];\n      }\n\n      // Roll back to the latest accepting state\n      cursor -= sinceAccepts;\n      multiLength -= sinceAccepts;\n\n      // Create a new multitoken\n      const Multi = latestAccepting.t;\n      const subtokens = tokens.slice(cursor - multiLength, cursor);\n      multis.push(initMultiToken(Multi, input, subtokens));\n    }\n  }\n\n  // Finally close off the textTokens (if available)\n  if (textTokens.length > 0) {\n    multis.push(initMultiToken(Text, input, textTokens));\n  }\n  return multis;\n}\n\n/**\n * Utility function for instantiating a new multitoken with all the relevant\n * fields during parsing.\n * @param {new (value: string, tokens: Token[]) => MultiToken} Multi class to instantiate\n * @param {string} input original input string\n * @param {Token[]} tokens consecutive tokens scanned from input string\n * @returns {MultiToken}\n */\nfunction initMultiToken(Multi, input, tokens) {\n  const startIdx = tokens[0].s;\n  const endIdx = tokens[tokens.length - 1].e;\n  const value = input.slice(startIdx, endIdx);\n  return new Multi(value, tokens);\n}\nconst warn = typeof console !== 'undefined' && console && console.warn || (() => {});\nconst warnAdvice = 'until manual call of linkify.init(). Register all schemes and plugins before invoking linkify the first time.';\n\n// Side-effect initialization state\nconst INIT = {\n  scanner: null,\n  parser: null,\n  tokenQueue: [],\n  pluginQueue: [],\n  customSchemes: [],\n  initialized: false\n};\n\n/**\n * @typedef {{\n * \tstart: State<string>,\n * \ttokens: { groups: Collections<string> } & typeof tk\n * }} ScannerInit\n */\n\n/**\n * @typedef {{\n * \tstart: State<MultiToken>,\n * \ttokens: typeof multi\n * }} ParserInit\n */\n\n/**\n * @typedef {(arg: { scanner: ScannerInit }) => void} TokenPlugin\n */\n\n/**\n * @typedef {(arg: { scanner: ScannerInit, parser: ParserInit }) => void} Plugin\n */\n\n/**\n * De-register all plugins and reset the internal state-machine. Used for\n * testing; not required in practice.\n * @private\n */\nfunction reset() {\n  State.groups = {};\n  INIT.scanner = null;\n  INIT.parser = null;\n  INIT.tokenQueue = [];\n  INIT.pluginQueue = [];\n  INIT.customSchemes = [];\n  INIT.initialized = false;\n}\n\n/**\n * Register a token plugin to allow the scanner to recognize additional token\n * types before the parser state machine is constructed from the results.\n * @param {string} name of plugin to register\n * @param {TokenPlugin} plugin function that accepts the scanner state machine\n * and available scanner tokens and collections and extends the state machine to\n * recognize additional tokens or groups.\n */\nfunction registerTokenPlugin(name, plugin) {\n  if (typeof plugin !== 'function') {\n    throw new Error(`linkifyjs: Invalid token plugin ${plugin} (expects function)`);\n  }\n  for (let i = 0; i < INIT.tokenQueue.length; i++) {\n    if (name === INIT.tokenQueue[i][0]) {\n      warn(`linkifyjs: token plugin \"${name}\" already registered - will be overwritten`);\n      INIT.tokenQueue[i] = [name, plugin];\n      return;\n    }\n  }\n  INIT.tokenQueue.push([name, plugin]);\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register token plugin \"${name}\" ${warnAdvice}`);\n  }\n}\n\n/**\n * Register a linkify plugin\n * @param {string} name of plugin to register\n * @param {Plugin} plugin function that accepts the parser state machine and\n * extends the parser to recognize additional link types\n */\nfunction registerPlugin(name, plugin) {\n  if (typeof plugin !== 'function') {\n    throw new Error(`linkifyjs: Invalid plugin ${plugin} (expects function)`);\n  }\n  for (let i = 0; i < INIT.pluginQueue.length; i++) {\n    if (name === INIT.pluginQueue[i][0]) {\n      warn(`linkifyjs: plugin \"${name}\" already registered - will be overwritten`);\n      INIT.pluginQueue[i] = [name, plugin];\n      return;\n    }\n  }\n  INIT.pluginQueue.push([name, plugin]);\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register plugin \"${name}\" ${warnAdvice}`);\n  }\n}\n\n/**\n * Detect URLs with the following additional protocol. Anything with format\n * \"protocol://...\" will be considered a link. If `optionalSlashSlash` is set to\n * `true`, anything with format \"protocol:...\" will be considered a link.\n * @param {string} protocol\n * @param {boolean} [optionalSlashSlash]\n */\nfunction registerCustomProtocol(scheme, optionalSlashSlash) {\n  if (optionalSlashSlash === void 0) {\n    optionalSlashSlash = false;\n  }\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register custom scheme \"${scheme}\" ${warnAdvice}`);\n  }\n  if (!/^[0-9a-z]+(-[0-9a-z]+)*$/.test(scheme)) {\n    throw new Error('linkifyjs: incorrect scheme format.\\n 1. Must only contain digits, lowercase ASCII letters or \"-\"\\n 2. Cannot start or end with \"-\"\\n 3. \"-\" cannot repeat');\n  }\n  INIT.customSchemes.push([scheme, optionalSlashSlash]);\n}\n\n/**\n * Initialize the linkify state machine. Called automatically the first time\n * linkify is called on a string, but may be called manually as well.\n */\nfunction init() {\n  // Initialize scanner state machine and plugins\n  INIT.scanner = init$2(INIT.customSchemes);\n  for (let i = 0; i < INIT.tokenQueue.length; i++) {\n    INIT.tokenQueue[i][1]({\n      scanner: INIT.scanner\n    });\n  }\n\n  // Initialize parser state machine and plugins\n  INIT.parser = init$1(INIT.scanner.tokens);\n  for (let i = 0; i < INIT.pluginQueue.length; i++) {\n    INIT.pluginQueue[i][1]({\n      scanner: INIT.scanner,\n      parser: INIT.parser\n    });\n  }\n  INIT.initialized = true;\n}\n\n/**\n * Parse a string into tokens that represent linkable and non-linkable sub-components\n * @param {string} str\n * @return {MultiToken[]} tokens\n */\nfunction tokenize(str) {\n  if (!INIT.initialized) {\n    init();\n  }\n  return run(INIT.parser.start, str, run$1(INIT.scanner.start, str));\n}\n\n/**\n * Find a list of linkable items in the given string.\n * @param {string} str string to find links in\n * @param {string | Opts} [type] either formatting options or specific type of\n * links to find, e.g., 'url' or 'email'\n * @param {Opts} [opts] formatting options for final output. Cannot be specified\n * if opts already provided in `type` argument\n*/\nfunction find(str, type, opts) {\n  if (type === void 0) {\n    type = null;\n  }\n  if (opts === void 0) {\n    opts = null;\n  }\n  if (type && typeof type === 'object') {\n    if (opts) {\n      throw Error(`linkifyjs: Invalid link type ${type}; must be a string`);\n    }\n    opts = type;\n    type = null;\n  }\n  const options = new Options(opts);\n  const tokens = tokenize(str);\n  const filtered = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.isLink && (!type || token.t === type)) {\n      filtered.push(token.toFormattedObject(options));\n    }\n  }\n  return filtered;\n}\n\n/**\n * Is the given string valid linkable text of some sort. Note that this does not\n * trim the text for you.\n *\n * Optionally pass in a second `type` param, which is the type of link to test\n * for.\n *\n * For example,\n *\n *     linkify.test(str, 'email');\n *\n * Returns `true` if str is a valid email.\n * @param {string} str string to test for links\n * @param {string} [type] optional specific link type to look for\n * @returns boolean true/false\n */\nfunction test(str, type) {\n  if (type === void 0) {\n    type = null;\n  }\n  const tokens = tokenize(str);\n  return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].t === type);\n}\nexport { MultiToken, Options, State, createTokenClass, find, init, multi, options, regexp, registerCustomProtocol, registerPlugin, registerTokenPlugin, reset, stringToArray, test, tokenize };","map":{"version":3,"names":["encodedTlds","encodedUtlds","assign","target","properties","key","numeric","ascii","alpha","asciinumeric","alphanumeric","domain","emoji","scheme","slashscheme","whitespace","registerGroup","name","groups","addToGroups","t","flags","k","group","indexOf","push","flagsForToken","result","c","State","token","j","jr","jd","prototype","accepts","go","input","state","nextState","i","length","regex","test","has","exactOnly","ta","inputs","next","tt","tr","regexp","ts","len","templateState","apply","allFlags","WORD","UWORD","LOCALHOST","TLD","UTLD","SCHEME","SLASH_SCHEME","NUM","WS","NL$1","OPENBRACE","OPENBRACKET","OPENANGLEBRACKET","OPENPAREN","CLOSEBRACE","CLOSEBRACKET","CLOSEANGLEBRACKET","CLOSEPAREN","AMPERSAND","APOSTROPHE","ASTERISK","AT","BACKSLASH","BACKTICK","CARET","COLON","COMMA","DOLLAR","DOT","EQUALS","EXCLAMATION","HYPHEN","PERCENT","PIPE","PLUS","POUND","QUERY","QUOTE","SEMI","SLASH","TILDE","UNDERSCORE","EMOJI$1","SYM","tk","Object","freeze","__proto__","NL","EMOJI","ASCII_LETTER","LETTER","EMOJI_VARIATION$1","DIGIT","SPACE","EMOJI_VARIATION","EMOJI_JOINER","tlds","utlds","init$2","customSchemes","Start","decodeTlds","Num","Word","UWord","Ws","Emoji","EmojiJoiner","wordjr","uwordjr","fastts","tld","utld","sort","a","b","sch","optionalSlashSlash","start","tokens","run$1","str","iterable","stringToArray","replace","toLowerCase","charCount","cursor","charCursor","tokenLength","latestAccepting","sinceAccepts","charsSinceAccepts","v","slice","s","e","index","first","charCodeAt","second","char","defaultt","encoded","words","stack","digits","popDigitCount","join","popCount","parseInt","substring","pop","defaults","defaultProtocol","events","format","noop","formatHref","nl2br","tagName","rel","validate","truncate","Infinity","className","attributes","ignoreTags","render","Options","opts","defaultRender","o","ignoredTags","uppercaseIgnoredTags","toUpperCase","ir","check","get","toString","operator","isCallable","option","getObj","obj","renderFn","val","options","MultiToken","value","isLink","toHref","toFormattedString","formatted","toFormattedHref","startIndex","endIndex","toObject","protocol","type","href","end","toFormattedObject","formattedHref","content","attrs","eventListeners","class","createTokenClass","props","Token","constructor","p","Email","Text","Nl","Url","hasProtocol","multi","Base","makeState","arg","init$1","_ref","qsAccepting","concat","qsNonAccepting","localpartAccepting","Localpart","Domain","Scheme","SlashScheme","LocalpartAt","LocalpartDot","EmailDomain","EmailDomainDot","Email$1","EmailDomainHyphen","EmailColon","DomainHyphen","DomainDot","DomainDotTld","DomainDotTldColon","DomainDotTldColonPort","Url$1","UrlNonaccept","SchemeColon","SlashSchemeColon","SlashSchemeColonSlash","UriPrefix","UrlOpenbrace","UrlOpenbracket","UrlOpenanglebracket","UrlOpenparen","UrlOpenbraceQ","UrlOpenbracketQ","UrlOpenanglebracketQ","UrlOpenparenQ","UrlOpenbraceSyms","UrlOpenbracketSyms","UrlOpenanglebracketSyms","UrlOpenparenSyms","run","multis","textTokens","secondState","multiLength","initMultiToken","Multi","subtokens","startIdx","endIdx","warn","console","warnAdvice","INIT","scanner","parser","tokenQueue","pluginQueue","initialized","reset","registerTokenPlugin","plugin","Error","registerPlugin","registerCustomProtocol","init","tokenize","find","filtered"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/Community_Chat-project/client/node_modules/linkifyjs/dist/linkify.es.js"],"sourcesContent":["// THIS FILE IS AUTOMATICALLY GENERATED DO NOT EDIT DIRECTLY\n// See update-tlds.js for encoding/decoding format\n// https://data.iana.org/TLD/tlds-alpha-by-domain.txt\nconst encodedTlds = 'aaa1rp3barth4b0ott3vie4c1le2ogado5udhabi7c0ademy5centure6ountant0s9o1tor4d0s1ult4e0g1ro2tna4f0l1rica5g0akhan5ency5i0g1rbus3force5tel5kdn3l0faromeo7ibaba4pay4lfinanz6state5y2sace3tom5m0azon4ericanexpress7family11x2fam3ica3sterdam8nalytics7droid5quan4z2o0l2partments8p0le4q0uarelle8r0ab1mco4chi3my2pa2t0e3s0da2ia2sociates9t0hleta5torney7u0ction5di0ble3o3spost5thor3o0s4vianca6w0s2x0a2z0ure5ba0by2idu3namex3narepublic11d1k2r0celona5laycard4s5efoot5gains6seball5ketball8uhaus5yern5b0c1t1va3cg1n2d1e0ats2uty4er2ntley5rlin4st0buy5t2f1g1h0arti5i0ble3d1ke2ng0o3o1z2j1lack0friday9ockbuster8g1omberg7ue3m0s1w2n0pparibas9o0ats3ehringer8fa2m1nd2o0k0ing5sch2tik2on4t1utique6x2r0adesco6idgestone9oadway5ker3ther5ussels7s1t1uild0ers6siness6y1zz3v1w1y1z0h3ca0b1fe2l0l1vinklein9m0era3p2non3petown5ital0one8r0avan4ds2e0er0s4s2sa1e1h1ino4t0ering5holic7ba1n1re2s2c1d1enter4o1rn3f0a1d2g1h0anel2nel4rity4se2t2eap3intai5ristmas6ome4urch5i0priani6rcle4sco3tadel4i0c2y0eats7k1l0aims4eaning6ick2nic1que6othing5ud3ub0med6m1n1o0ach3des3ffee4llege4ogne5m0cast4mbank4unity6pany2re3uter5sec4ndos3struction8ulting7tact3ractors9oking0channel11l1p2rsica5untry4pon0s4rses6pa2r0edit0card4union9icket5own3s1uise0s6u0isinella9v1w1x1y0mru3ou3z2dabur3d1nce3ta1e1ing3sun4y2clk3ds2e0al0er2s3gree4livery5l1oitte5ta3mocrat6ntal2ist5si0gn4v2hl2iamonds6et2gital5rect0ory7scount3ver5h2y2j1k1m1np2o0cs1tor4g1mains5t1wnload7rive4tv2ubai3nlop4pont4rban5vag2r2z2earth3t2c0o2deka3u0cation8e1g1mail3erck5nergy4gineer0ing9terprises10pson4quipment8r0icsson6ni3s0q1tate5t0isalat7u0rovision8s2vents5xchange6pert3osed4ress5traspace10fage2il1rwinds6th3mily4n0s2rm0ers5shion4t3edex3edback6rrari3ero6i0at2delity5o2lm2nal1nce1ial7re0stone6mdale6sh0ing5t0ness6j1k1lickr3ghts4r2orist4wers5y2m1o0o0d0network8tball6rd1ex2sale4um3undation8x2r0ee1senius7l1ogans4ntdoor4ier7tr2ujitsu5n0d2rniture7tbol5yi3ga0l0lery3o1up4me0s3p1rden4y2b0iz3d0n2e0a1nt0ing5orge5f1g0ee3h1i0ft0s3ves2ing5l0ass3e1obal2o4m0ail3bh2o1x2n1odaddy5ld0point6f2o0dyear5g0le4p1t1v2p1q1r0ainger5phics5tis4een3ipe3ocery4up4s1t1u0ardian6cci3ge2ide2tars5ru3w1y2hair2mburg5ngout5us3bo2dfc0bank7ealth0care8lp1sinki6re1mes5gtv3iphop4samitsu7tachi5v2k0t2m1n1ockey4ldings5iday5medepot5goods5s0ense7nda3rse3spital5t0ing5t0eles2s3mail5use3w2r1sbc3t1u0ghes5yatt3undai7ibm2cbc2e1u2d1e0ee3fm2kano4l1m0amat4db2mo0bilien9n0c1dustries8finiti5o2g1k1stitute6urance4e4t0ernational10uit4vestments10o1piranga7q1r0ish4s0maili5t0anbul7t0au2v3jaguar4va3cb2e0ep2tzt3welry6io2ll2m0p2nj2o0bs1urg4t1y2p0morgan6rs3uegos4niper7kaufen5ddi3e0rryhotels6logistics9properties14fh2g1h1i0a1ds2m1nder2le4tchen5wi3m1n1oeln3matsu5sher5p0mg2n2r0d1ed3uokgroup8w1y0oto4z2la0caixa5mborghini8er3ncaster5ia3d0rover6xess5salle5t0ino3robe5w0yer5b1c1ds2ease3clerc5frak4gal2o2xus4gbt3i0dl2fe0insurance9style7ghting6ke2lly3mited4o2ncoln4de2k2psy3ve1ing5k1lc1p2oan0s3cker3us3l1ndon4tte1o3ve3pl0financial11r1s1t0d0a3u0ndbeck6xe1ury5v1y2ma0cys3drid4if1son4keup4n0agement7go3p1rket0ing3s4riott5shalls7serati6ttel5ba2c0kinsey7d1e0d0ia3et2lbourne7me1orial6n0u2rckmsd7g1h1iami3crosoft7l1ni1t2t0subishi9k1l0b1s2m0a2n1o0bi0le4da2e1i1m1nash3ey2ster5rmon3tgage6scow4to0rcycles9v0ie4p1q1r1s0d2t0n1r2u0seum3ic3tual5v1w1x1y1z2na0b1goya4me2tura4vy3ba2c1e0c1t0bank4flix4work5ustar5w0s2xt0direct7us4f0l2g0o2hk2i0co2ke1on3nja3ssan1y5l1o0kia3rthwesternmutual14on4w0ruz3tv4p1r0a1w2tt2u1yc2z2obi1server7ffice5kinawa6layan0group9dnavy5lo3m0ega4ne1g1l0ine5oo2pen3racle3nge4g0anic5igins6saka4tsuka4t2vh3pa0ge2nasonic7ris2s1tners4s1y3ssagens7y2ccw3e0t2f0izer5g1h0armacy6d1ilips5one2to0graphy6s4ysio5ics1tet2ures6d1n0g1k2oneer5zza4k1l0ace2y0station9umbing5s3m1n0c2ohl2ker3litie5rn2st3r0america6xi3ess3ime3o0d0uctions8f1gressive8mo2perties3y5tection8u0dential9s1t1ub2w0c2y2qa1pon3uebec3st5racing4dio4e0ad1lestate6tor2y4cipes5d0stone5umbrella9hab3ise0n3t2liance6n0t0als5pair3ort3ublican8st0aurant8view0s5xroth6ich0ardli6oh3l1o1p2o0cher3ks3deo3gers4om3s0vp3u0gby3hr2n2w0e2yukyu6sa0arland6fe0ty4kura4le1on3msclub4ung5ndvik0coromant12ofi4p1rl2s1ve2xo3b0i1s2c0a1b1haeffler7midt4olarships8ol3ule3warz5ience5ot3d1e0arch3t2cure1ity6ek2lect4ner3rvices6ven3w1x0y3fr2g1h0angrila6rp2w2ell3ia1ksha5oes2p0ping5uji3w0time7i0lk2na1gles5te3j1k0i0n2y0pe4l0ing4m0art3ile4n0cf3o0ccer3ial4ftbank4ware6hu2lar2utions7ng1y2y2pa0ce3ort2t3r0l2s1t0ada2ples4r1tebank4farm7c0group6ockholm6rage3e3ream4udio2y3yle4u0cks3pplies3y2ort5rf1gery5zuki5v1watch4iss4x1y0dney4stems6z2tab1ipei4lk2obao4rget4tamotors6r2too4x0i3c0i2d0k2eam2ch0nology8l1masek5nnis4va3f1g1h0d1eater2re6iaa2ckets5enda4ffany5ps2res2ol4j0maxx4x2k0maxx5l1m0all4n1o0day3kyo3ols3p1ray3shiba5tal3urs3wn2yota3s3r0ade1ing4ining5vel0channel7ers0insurance16ust3v2t1ube2i1nes3shu4v0s2w1z2ua1bank3s2g1k1nicom3versity8o2ol2ps2s1y1z2va0cations7na1guard7c1e0gas3ntures6risign5mögensberater2ung14sicherung10t2g1i0ajes4deo3g1king4llas4n1p1rgin4sa1ion4va1o3laanderen9n1odka3lkswagen7vo3te1ing3o2yage5u0elos6wales2mart4ter4ng0gou5tch0es6eather0channel12bcam3er2site5d0ding5ibo2r3f1hoswho6ien2ki2lliamhill9n0dows4e1ners6me2olterskluwer11odside6rk0s2ld3w2s1tc1f3xbox3erox4finity6ihuan4n2xx2yz3yachts4hoo3maxun5ndex5e1odobashi7ga2kohama6u0tube6t1un3za0ppos4ra3ero3ip2m1one3uerich6w2';\n// Internationalized domain names containing non-ASCII\nconst encodedUtlds = 'ελ1υ2бг1ел3дети4ею2католик6ом3мкд2он1сква6онлайн5рг3рус2ф2сайт3рб3укр3қаз3հայ3ישראל5קום3ابوظبي5تصالات6رامكو5لاردن4بحرين5جزائر5سعودية6عليان5مغرب5مارات5یران5بارت2زار4يتك3ھارت5تونس4سودان3رية5شبكة4عراق2ب2مان4فلسطين6قطر3كاثوليك6وم3مصر2ليسيا5وريتانيا7قع4همراه5پاکستان7ڀارت4कॉम3नेट3भारत0म्3ोत5संगठन5বাংলা5ভারত2ৰত4ਭਾਰਤ4ભારત4ଭାରତ4இந்தியா6லங்கை6சிங்கப்பூர்11భారత్5ಭಾರತ4ഭാരതം5ලංකා4คอม3ไทย3ລາວ3გე2みんな3アマゾン4クラウド4グーグル4コム2ストア3セール3ファッション6ポイント4世界2中信1国1國1文网3亚马逊3企业2佛山2信息2健康2八卦2公司1益2台湾1灣2商城1店1标2嘉里0大酒店5在线2大拿2天主教3娱乐2家電2广东2微博2慈善2我爱你3手机2招聘2政务1府2新加坡2闻2时尚2書籍2机构2淡马锡3游戏2澳門2点看2移动2组织机构4网址1店1站1络2联通2谷歌2购物2通販2集团2電訊盈科4飞利浦3食品2餐厅2香格里拉3港2닷넷1컴2삼성2한국2';\n\n/**\n * @template A\n * @template B\n * @param {A} target\n * @param {B} properties\n * @return {A & B}\n */\nconst assign = (target, properties) => {\n  for (const key in properties) {\n    target[key] = properties[key];\n  }\n  return target;\n};\n\n/**\n * Finite State Machine generation utilities\n */\n\n/**\n * @template T\n * @typedef {{ [group: string]: T[] }} Collections\n */\n\n/**\n * @typedef {{ [group: string]: true }} Flags\n */\n\n// Keys in scanner Collections instances\nconst numeric = 'numeric';\nconst ascii = 'ascii';\nconst alpha = 'alpha';\nconst asciinumeric = 'asciinumeric';\nconst alphanumeric = 'alphanumeric';\nconst domain = 'domain';\nconst emoji = 'emoji';\nconst scheme = 'scheme';\nconst slashscheme = 'slashscheme';\nconst whitespace = 'whitespace';\n\n/**\n * @template T\n * @param {string} name\n * @param {Collections<T>} groups to register in\n * @returns {T[]} Current list of tokens in the given collection\n */\nfunction registerGroup(name, groups) {\n  if (!(name in groups)) {\n    groups[name] = [];\n  }\n  return groups[name];\n}\n\n/**\n * @template T\n * @param {T} t token to add\n * @param {Collections<T>} groups\n * @param {Flags} flags\n */\nfunction addToGroups(t, flags, groups) {\n  if (flags[numeric]) {\n    flags[asciinumeric] = true;\n    flags[alphanumeric] = true;\n  }\n  if (flags[ascii]) {\n    flags[asciinumeric] = true;\n    flags[alpha] = true;\n  }\n  if (flags[asciinumeric]) {\n    flags[alphanumeric] = true;\n  }\n  if (flags[alpha]) {\n    flags[alphanumeric] = true;\n  }\n  if (flags[alphanumeric]) {\n    flags[domain] = true;\n  }\n  if (flags[emoji]) {\n    flags[domain] = true;\n  }\n  for (const k in flags) {\n    const group = registerGroup(k, groups);\n    if (group.indexOf(t) < 0) {\n      group.push(t);\n    }\n  }\n}\n\n/**\n * @template T\n * @param {T} t token to check\n * @param {Collections<T>} groups\n * @returns {Flags} group flags that contain this token\n */\nfunction flagsForToken(t, groups) {\n  const result = {};\n  for (const c in groups) {\n    if (groups[c].indexOf(t) >= 0) {\n      result[c] = true;\n    }\n  }\n  return result;\n}\n\n/**\n * @template T\n * @typedef {null | T } Transition\n */\n\n/**\n * Define a basic state machine state. j is the list of character transitions,\n * jr is the list of regex-match transitions, jd is the default state to\n * transition to t is the accepting token type, if any. If this is the terminal\n * state, then it does not emit a token.\n *\n * The template type T represents the type of the token this state accepts. This\n * should be a string (such as of the token exports in `text.js`) or a\n * MultiToken subclass (from `multi.js`)\n *\n * @template T\n * @param {T} [token] Token that this state emits\n */\nfunction State(token) {\n  if (token === void 0) {\n    token = null;\n  }\n  // this.n = null; // DEBUG: State name\n  /** @type {{ [input: string]: State<T> }} j */\n  this.j = {}; // IMPLEMENTATION 1\n  // this.j = []; // IMPLEMENTATION 2\n  /** @type {[RegExp, State<T>][]} jr */\n  this.jr = [];\n  /** @type {?State<T>} jd */\n  this.jd = null;\n  /** @type {?T} t */\n  this.t = token;\n}\n\n/**\n * Scanner token groups\n * @type Collections<string>\n */\nState.groups = {};\nState.prototype = {\n  accepts() {\n    return !!this.t;\n  },\n  /**\n   * Follow an existing transition from the given input to the next state.\n   * Does not mutate.\n   * @param {string} input character or token type to transition on\n   * @returns {?State<T>} the next state, if any\n   */\n  go(input) {\n    const state = this;\n    const nextState = state.j[input];\n    if (nextState) {\n      return nextState;\n    }\n    for (let i = 0; i < state.jr.length; i++) {\n      const regex = state.jr[i][0];\n      const nextState = state.jr[i][1]; // note: might be empty to prevent default jump\n      if (nextState && regex.test(input)) {\n        return nextState;\n      }\n    }\n    // Nowhere left to jump! Return default, if any\n    return state.jd;\n  },\n  /**\n   * Whether the state has a transition for the given input. Set the second\n   * argument to true to only look for an exact match (and not a default or\n   * regular-expression-based transition)\n   * @param {string} input\n   * @param {boolean} exactOnly\n   */\n  has(input, exactOnly) {\n    if (exactOnly === void 0) {\n      exactOnly = false;\n    }\n    return exactOnly ? input in this.j : !!this.go(input);\n  },\n  /**\n   * Short for \"transition all\"; create a transition from the array of items\n   * in the given list to the same final resulting state.\n   * @param {string | string[]} inputs Group of inputs to transition on\n   * @param {Transition<T> | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   */\n  ta(inputs, next, flags, groups) {\n    for (let i = 0; i < inputs.length; i++) {\n      this.tt(inputs[i], next, flags, groups);\n    }\n  },\n  /**\n   * Short for \"take regexp transition\"; defines a transition for this state\n   * when it encounters a token which matches the given regular expression\n   * @param {RegExp} regexp Regular expression transition (populate first)\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  tr(regexp, next, flags, groups) {\n    groups = groups || State.groups;\n    let nextState;\n    if (next && next.j) {\n      nextState = next;\n    } else {\n      // Token with maybe token groups\n      nextState = new State(next);\n      if (flags && groups) {\n        addToGroups(next, flags, groups);\n      }\n    }\n    this.jr.push([regexp, nextState]);\n    return nextState;\n  },\n  /**\n   * Short for \"take transitions\", will take as many sequential transitions as\n   * the length of the given input and returns the\n   * resulting final state.\n   * @param {string | string[]} input\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of token groups\n   * @returns {State<T>} taken after the given input\n   */\n  ts(input, next, flags, groups) {\n    let state = this;\n    const len = input.length;\n    if (!len) {\n      return state;\n    }\n    for (let i = 0; i < len - 1; i++) {\n      state = state.tt(input[i]);\n    }\n    return state.tt(input[len - 1], next, flags, groups);\n  },\n  /**\n   * Short for \"take transition\", this is a method for building/working with\n   * state machines.\n   *\n   * If a state already exists for the given input, returns it.\n   *\n   * If a token is specified, that state will emit that token when reached by\n   * the linkify engine.\n   *\n   * If no state exists, it will be initialized with some default transitions\n   * that resemble existing default transitions.\n   *\n   * If a state is given for the second argument, that state will be\n   * transitioned to on the given input regardless of what that input\n   * previously did.\n   *\n   * Specify a token group flags to define groups that this token belongs to.\n   * The token will be added to corresponding entires in the given groups\n   * object.\n   *\n   * @param {string} input character, token type to transition on\n   * @param {T | State<T>} [next] Transition options\n   * @param {Flags} [flags] Collections flags to add token to\n   * @param {Collections<T>} [groups] Master list of groups\n   * @returns {State<T>} taken after the given input\n   */\n  tt(input, next, flags, groups) {\n    groups = groups || State.groups;\n    const state = this;\n\n    // Check if existing state given, just a basic transition\n    if (next && next.j) {\n      state.j[input] = next;\n      return next;\n    }\n    const t = next;\n\n    // Take the transition with the usual default mechanisms and use that as\n    // a template for creating the next state\n    let nextState,\n      templateState = state.go(input);\n    if (templateState) {\n      nextState = new State();\n      assign(nextState.j, templateState.j);\n      nextState.jr.push.apply(nextState.jr, templateState.jr);\n      nextState.jd = templateState.jd;\n      nextState.t = templateState.t;\n    } else {\n      nextState = new State();\n    }\n    if (t) {\n      // Ensure newly token is in the same groups as the old token\n      if (groups) {\n        if (nextState.t && typeof nextState.t === 'string') {\n          const allFlags = assign(flagsForToken(nextState.t, groups), flags);\n          addToGroups(t, allFlags, groups);\n        } else if (flags) {\n          addToGroups(t, flags, groups);\n        }\n      }\n      nextState.t = t; // overwrite anything that was previously there\n    }\n\n    state.j[input] = nextState;\n    return nextState;\n  }\n};\n\n// Helper functions to improve minification (not exported outside linkifyjs module)\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string | string[]} input\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst ta = (state, input, next, flags, groups) => state.ta(input, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {RegExp} regexp\n * @param {T | State<T>} [next]\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst tr = (state, regexp, next, flags, groups) => state.tr(regexp, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string | string[]} input\n * @param {T | State<T>} [next]\n * @param {Flags} [flags]\n * @param {Collections<T>} [groups]\n */\nconst ts = (state, input, next, flags, groups) => state.ts(input, next, flags, groups);\n\n/**\n * @template T\n * @param {State<T>} state\n * @param {string} input\n * @param {T | State<T>} [next]\n * @param {Collections<T>} [groups]\n * @param {Flags} [flags]\n */\nconst tt = (state, input, next, flags, groups) => state.tt(input, next, flags, groups);\n\n/******************************************************************************\nText Tokens\nIdentifiers for token outputs from the regexp scanner\n******************************************************************************/\n\n// A valid web domain token\nconst WORD = 'WORD'; // only contains a-z\nconst UWORD = 'UWORD'; // contains letters other than a-z, used for IDN\n\n// Special case of word\nconst LOCALHOST = 'LOCALHOST';\n\n// Valid top-level domain, special case of WORD (see tlds.js)\nconst TLD = 'TLD';\n\n// Valid IDN TLD, special case of UWORD (see tlds.js)\nconst UTLD = 'UTLD';\n\n// The scheme portion of a web URI protocol. Supported types include: `mailto`,\n// `file`, and user-defined custom protocols. Limited to schemes that contain\n// only letters\nconst SCHEME = 'SCHEME';\n\n// Similar to SCHEME, except makes distinction for schemes that must always be\n// followed by `://`, not just `:`. Supported types include `http`, `https`,\n// `ftp`, `ftps`\nconst SLASH_SCHEME = 'SLASH_SCHEME';\n\n// Any sequence of digits 0-9\nconst NUM = 'NUM';\n\n// Any number of consecutive whitespace characters that are not newline\nconst WS = 'WS';\n\n// New line (unix style)\nconst NL$1 = 'NL'; // \\n\n\n// Opening/closing bracket classes\nconst OPENBRACE = 'OPENBRACE'; // {\nconst OPENBRACKET = 'OPENBRACKET'; // [\nconst OPENANGLEBRACKET = 'OPENANGLEBRACKET'; // <\nconst OPENPAREN = 'OPENPAREN'; // (\nconst CLOSEBRACE = 'CLOSEBRACE'; // }\nconst CLOSEBRACKET = 'CLOSEBRACKET'; // ]\nconst CLOSEANGLEBRACKET = 'CLOSEANGLEBRACKET'; // >\nconst CLOSEPAREN = 'CLOSEPAREN'; // )\n\n// Various symbols\nconst AMPERSAND = 'AMPERSAND'; // &\nconst APOSTROPHE = 'APOSTROPHE'; // '\nconst ASTERISK = 'ASTERISK'; // *\nconst AT = 'AT'; // @\nconst BACKSLASH = 'BACKSLASH'; // \\\nconst BACKTICK = 'BACKTICK'; // `\nconst CARET = 'CARET'; // ^\nconst COLON = 'COLON'; // :\nconst COMMA = 'COMMA'; // ,\nconst DOLLAR = 'DOLLAR'; // $\nconst DOT = 'DOT'; // .\nconst EQUALS = 'EQUALS'; // =\nconst EXCLAMATION = 'EXCLAMATION'; // !\nconst HYPHEN = 'HYPHEN'; // -\nconst PERCENT = 'PERCENT'; // %\nconst PIPE = 'PIPE'; // |\nconst PLUS = 'PLUS'; // +\nconst POUND = 'POUND'; // #\nconst QUERY = 'QUERY'; // ?\nconst QUOTE = 'QUOTE'; // \"\n\nconst SEMI = 'SEMI'; // ;\nconst SLASH = 'SLASH'; // /\nconst TILDE = 'TILDE'; // ~\nconst UNDERSCORE = 'UNDERSCORE'; // _\n\n// Emoji symbol\nconst EMOJI$1 = 'EMOJI';\n\n// Default token - anything that is not one of the above\nconst SYM = 'SYM';\n\nvar tk = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tWORD: WORD,\n\tUWORD: UWORD,\n\tLOCALHOST: LOCALHOST,\n\tTLD: TLD,\n\tUTLD: UTLD,\n\tSCHEME: SCHEME,\n\tSLASH_SCHEME: SLASH_SCHEME,\n\tNUM: NUM,\n\tWS: WS,\n\tNL: NL$1,\n\tOPENBRACE: OPENBRACE,\n\tOPENBRACKET: OPENBRACKET,\n\tOPENANGLEBRACKET: OPENANGLEBRACKET,\n\tOPENPAREN: OPENPAREN,\n\tCLOSEBRACE: CLOSEBRACE,\n\tCLOSEBRACKET: CLOSEBRACKET,\n\tCLOSEANGLEBRACKET: CLOSEANGLEBRACKET,\n\tCLOSEPAREN: CLOSEPAREN,\n\tAMPERSAND: AMPERSAND,\n\tAPOSTROPHE: APOSTROPHE,\n\tASTERISK: ASTERISK,\n\tAT: AT,\n\tBACKSLASH: BACKSLASH,\n\tBACKTICK: BACKTICK,\n\tCARET: CARET,\n\tCOLON: COLON,\n\tCOMMA: COMMA,\n\tDOLLAR: DOLLAR,\n\tDOT: DOT,\n\tEQUALS: EQUALS,\n\tEXCLAMATION: EXCLAMATION,\n\tHYPHEN: HYPHEN,\n\tPERCENT: PERCENT,\n\tPIPE: PIPE,\n\tPLUS: PLUS,\n\tPOUND: POUND,\n\tQUERY: QUERY,\n\tQUOTE: QUOTE,\n\tSEMI: SEMI,\n\tSLASH: SLASH,\n\tTILDE: TILDE,\n\tUNDERSCORE: UNDERSCORE,\n\tEMOJI: EMOJI$1,\n\tSYM: SYM\n});\n\n// Note that these two Unicode ones expand into a really big one with Babel\nconst ASCII_LETTER = /[a-z]/;\nconst LETTER = /\\p{L}/u; // Any Unicode character with letter data type\nconst EMOJI = /\\p{Emoji}/u; // Any Unicode emoji character\nconst EMOJI_VARIATION$1 = /\\ufe0f/;\nconst DIGIT = /\\d/;\nconst SPACE = /\\s/;\n\nvar regexp = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tASCII_LETTER: ASCII_LETTER,\n\tLETTER: LETTER,\n\tEMOJI: EMOJI,\n\tEMOJI_VARIATION: EMOJI_VARIATION$1,\n\tDIGIT: DIGIT,\n\tSPACE: SPACE\n});\n\n/**\n\tThe scanner provides an interface that takes a string of text as input, and\n\toutputs an array of tokens instances that can be used for easy URL parsing.\n*/\nconst NL = '\\n'; // New line character\nconst EMOJI_VARIATION = '\\ufe0f'; // Variation selector, follows heart and others\nconst EMOJI_JOINER = '\\u200d'; // zero-width joiner\n\nlet tlds = null,\n  utlds = null; // don't change so only have to be computed once\n\n/**\n * Scanner output token:\n * - `t` is the token name (e.g., 'NUM', 'EMOJI', 'TLD')\n * - `v` is the value of the token (e.g., '123', '❤️', 'com')\n * - `s` is the start index of the token in the original string\n * - `e` is the end index of the token in the original string\n * @typedef {{t: string, v: string, s: number, e: number}} Token\n */\n\n/**\n * @template T\n * @typedef {{ [collection: string]: T[] }} Collections\n */\n\n/**\n * Initialize the scanner character-based state machine for the given start\n * state\n * @param {[string, boolean][]} customSchemes List of custom schemes, where each\n * item is a length-2 tuple with the first element set to the string scheme, and\n * the second element set to `true` if the `://` after the scheme is optional\n */\nfunction init$2(customSchemes) {\n  if (customSchemes === void 0) {\n    customSchemes = [];\n  }\n  // Frequently used states (name argument removed during minification)\n  /** @type Collections<string> */\n  const groups = {}; // of tokens\n  State.groups = groups;\n  /** @type State<string> */\n  const Start = new State();\n  if (tlds == null) {\n    tlds = decodeTlds(encodedTlds);\n  }\n  if (utlds == null) {\n    utlds = decodeTlds(encodedUtlds);\n  }\n\n  // States for special URL symbols that accept immediately after start\n  tt(Start, \"'\", APOSTROPHE);\n  tt(Start, '{', OPENBRACE);\n  tt(Start, '[', OPENBRACKET);\n  tt(Start, '<', OPENANGLEBRACKET);\n  tt(Start, '(', OPENPAREN);\n  tt(Start, '}', CLOSEBRACE);\n  tt(Start, ']', CLOSEBRACKET);\n  tt(Start, '>', CLOSEANGLEBRACKET);\n  tt(Start, ')', CLOSEPAREN);\n  tt(Start, '&', AMPERSAND);\n  tt(Start, '*', ASTERISK);\n  tt(Start, '@', AT);\n  tt(Start, '`', BACKTICK);\n  tt(Start, '^', CARET);\n  tt(Start, ':', COLON);\n  tt(Start, ',', COMMA);\n  tt(Start, '$', DOLLAR);\n  tt(Start, '.', DOT);\n  tt(Start, '=', EQUALS);\n  tt(Start, '!', EXCLAMATION);\n  tt(Start, '-', HYPHEN);\n  tt(Start, '%', PERCENT);\n  tt(Start, '|', PIPE);\n  tt(Start, '+', PLUS);\n  tt(Start, '#', POUND);\n  tt(Start, '?', QUERY);\n  tt(Start, '\"', QUOTE);\n  tt(Start, '/', SLASH);\n  tt(Start, ';', SEMI);\n  tt(Start, '~', TILDE);\n  tt(Start, '_', UNDERSCORE);\n  tt(Start, '\\\\', BACKSLASH);\n  const Num = tr(Start, DIGIT, NUM, {\n    [numeric]: true\n  });\n  tr(Num, DIGIT, Num);\n\n  // State which emits a word token\n  const Word = tr(Start, ASCII_LETTER, WORD, {\n    [ascii]: true\n  });\n  tr(Word, ASCII_LETTER, Word);\n\n  // Same as previous, but specific to non-fsm.ascii alphabet words\n  const UWord = tr(Start, LETTER, UWORD, {\n    [alpha]: true\n  });\n  tr(UWord, ASCII_LETTER); // Non-accepting\n  tr(UWord, LETTER, UWord);\n\n  // Whitespace jumps\n  // Tokens of only non-newline whitespace are arbitrarily long\n  // If any whitespace except newline, more whitespace!\n  const Ws = tr(Start, SPACE, WS, {\n    [whitespace]: true\n  });\n  tt(Start, NL, NL$1, {\n    [whitespace]: true\n  });\n  tt(Ws, NL); // non-accepting state to avoid mixing whitespaces\n  tr(Ws, SPACE, Ws);\n\n  // Emoji tokens. They are not grouped by the scanner except in cases where a\n  // zero-width joiner is present\n  const Emoji = tr(Start, EMOJI, EMOJI$1, {\n    [emoji]: true\n  });\n  tr(Emoji, EMOJI, Emoji);\n  tt(Emoji, EMOJI_VARIATION, Emoji);\n  // tt(Start, EMOJI_VARIATION, Emoji); // This one is sketchy\n\n  const EmojiJoiner = tt(Emoji, EMOJI_JOINER);\n  tr(EmojiJoiner, EMOJI, Emoji);\n  // tt(EmojiJoiner, EMOJI_VARIATION, Emoji); // also sketchy\n\n  // Generates states for top-level domains\n  // Note that this is most accurate when tlds are in alphabetical order\n  const wordjr = [[ASCII_LETTER, Word]];\n  const uwordjr = [[ASCII_LETTER, null], [LETTER, UWord]];\n  for (let i = 0; i < tlds.length; i++) {\n    fastts(Start, tlds[i], TLD, WORD, wordjr);\n  }\n  for (let i = 0; i < utlds.length; i++) {\n    fastts(Start, utlds[i], UTLD, UWORD, uwordjr);\n  }\n  addToGroups(TLD, {\n    tld: true,\n    ascii: true\n  }, groups);\n  addToGroups(UTLD, {\n    utld: true,\n    alpha: true\n  }, groups);\n\n  // Collect the states generated by different protocols. NOTE: If any new TLDs\n  // get added that are also protocols, set the token to be the same as the\n  // protocol to ensure parsing works as expected.\n  fastts(Start, 'file', SCHEME, WORD, wordjr);\n  fastts(Start, 'mailto', SCHEME, WORD, wordjr);\n  fastts(Start, 'http', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'https', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'ftp', SLASH_SCHEME, WORD, wordjr);\n  fastts(Start, 'ftps', SLASH_SCHEME, WORD, wordjr);\n  addToGroups(SCHEME, {\n    scheme: true,\n    ascii: true\n  }, groups);\n  addToGroups(SLASH_SCHEME, {\n    slashscheme: true,\n    ascii: true\n  }, groups);\n\n  // Register custom schemes. Assumes each scheme is asciinumeric with hyphens\n  customSchemes = customSchemes.sort((a, b) => a[0] > b[0] ? 1 : -1);\n  for (let i = 0; i < customSchemes.length; i++) {\n    const sch = customSchemes[i][0];\n    const optionalSlashSlash = customSchemes[i][1];\n    const flags = optionalSlashSlash ? {\n      [scheme]: true\n    } : {\n      [slashscheme]: true\n    };\n    if (sch.indexOf('-') >= 0) {\n      flags[domain] = true;\n    } else if (!ASCII_LETTER.test(sch)) {\n      flags[numeric] = true; // numbers only\n    } else if (DIGIT.test(sch)) {\n      flags[asciinumeric] = true;\n    } else {\n      flags[ascii] = true;\n    }\n    ts(Start, sch, sch, flags);\n  }\n\n  // Localhost token\n  ts(Start, 'localhost', LOCALHOST, {\n    ascii: true\n  });\n\n  // Set default transition for start state (some symbol)\n  Start.jd = new State(SYM);\n  return {\n    start: Start,\n    tokens: assign({\n      groups\n    }, tk)\n  };\n}\n\n/**\n\tGiven a string, returns an array of TOKEN instances representing the\n\tcomposition of that string.\n\n\t@method run\n\t@param {State<string>} start scanner starting state\n\t@param {string} str input string to scan\n\t@return {Token[]} list of tokens, each with a type and value\n*/\nfunction run$1(start, str) {\n  // State machine is not case sensitive, so input is tokenized in lowercased\n  // form (still returns regular case). Uses selective `toLowerCase` because\n  // lowercasing the entire string causes the length and character position to\n  // vary in some non-English strings with V8-based runtimes.\n  const iterable = stringToArray(str.replace(/[A-Z]/g, c => c.toLowerCase()));\n  const charCount = iterable.length; // <= len if there are emojis, etc\n  const tokens = []; // return value\n\n  // cursor through the string itself, accounting for characters that have\n  // width with length 2 such as emojis\n  let cursor = 0;\n\n  // Cursor through the array-representation of the string\n  let charCursor = 0;\n\n  // Tokenize the string\n  while (charCursor < charCount) {\n    let state = start;\n    let nextState = null;\n    let tokenLength = 0;\n    let latestAccepting = null;\n    let sinceAccepts = -1;\n    let charsSinceAccepts = -1;\n    while (charCursor < charCount && (nextState = state.go(iterable[charCursor]))) {\n      state = nextState;\n\n      // Keep track of the latest accepting state\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        charsSinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts += iterable[charCursor].length;\n        charsSinceAccepts++;\n      }\n      tokenLength += iterable[charCursor].length;\n      cursor += iterable[charCursor].length;\n      charCursor++;\n    }\n\n    // Roll back to the latest accepting state\n    cursor -= sinceAccepts;\n    charCursor -= charsSinceAccepts;\n    tokenLength -= sinceAccepts;\n\n    // No more jumps, just make a new token from the last accepting one\n    tokens.push({\n      t: latestAccepting.t,\n      // token type/name\n      v: str.slice(cursor - tokenLength, cursor),\n      // string value\n      s: cursor - tokenLength,\n      // start index\n      e: cursor // end index (excluding)\n    });\n  }\n\n  return tokens;\n}\n\n/**\n * Convert a String to an Array of characters, taking into account that some\n * characters like emojis take up two string indexes.\n *\n * Adapted from core-js (MIT license)\n * https://github.com/zloirock/core-js/blob/2d69cf5f99ab3ea3463c395df81e5a15b68f49d9/packages/core-js/internals/string-multibyte.js\n *\n * @function stringToArray\n * @param {string} str\n * @returns {string[]}\n */\nfunction stringToArray(str) {\n  const result = [];\n  const len = str.length;\n  let index = 0;\n  while (index < len) {\n    let first = str.charCodeAt(index);\n    let second;\n    let char = first < 0xd800 || first > 0xdbff || index + 1 === len || (second = str.charCodeAt(index + 1)) < 0xdc00 || second > 0xdfff ? str[index] // single character\n    : str.slice(index, index + 2); // two-index characters\n    result.push(char);\n    index += char.length;\n  }\n  return result;\n}\n\n/**\n * Fast version of ts function for when transition defaults are well known\n * @param {State<string>} state\n * @param {string} input\n * @param {string} t\n * @param {string} defaultt\n * @param {[RegExp, State<string>][]} jr\n * @returns {State<string>}\n */\nfunction fastts(state, input, t, defaultt, jr) {\n  let next;\n  const len = input.length;\n  for (let i = 0; i < len - 1; i++) {\n    const char = input[i];\n    if (state.j[char]) {\n      next = state.j[char];\n    } else {\n      next = new State(defaultt);\n      next.jr = jr.slice();\n      state.j[char] = next;\n    }\n    state = next;\n  }\n  next = new State(t);\n  next.jr = jr.slice();\n  state.j[input[len - 1]] = next;\n  return next;\n}\n\n/**\n * Converts a string of Top-Level Domain names encoded in update-tlds.js back\n * into a list of strings.\n * @param {str} encoded encoded TLDs string\n * @returns {str[]} original TLDs list\n */\nfunction decodeTlds(encoded) {\n  const words = [];\n  const stack = [];\n  let i = 0;\n  let digits = '0123456789';\n  while (i < encoded.length) {\n    let popDigitCount = 0;\n    while (digits.indexOf(encoded[i + popDigitCount]) >= 0) {\n      popDigitCount++; // encountered some digits, have to pop to go one level up trie\n    }\n\n    if (popDigitCount > 0) {\n      words.push(stack.join('')); // whatever preceded the pop digits must be a word\n      for (let popCount = parseInt(encoded.substring(i, i + popDigitCount), 10); popCount > 0; popCount--) {\n        stack.pop();\n      }\n      i += popDigitCount;\n    } else {\n      stack.push(encoded[i]); // drop down a level into the trie\n      i++;\n    }\n  }\n  return words;\n}\n\n/**\n * An object where each key is a valid DOM Event Name such as `click` or `focus`\n * and each value is an event handler function.\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Element#events\n * @typedef {?{ [event: string]: Function }} EventListeners\n */\n\n/**\n * All formatted properties required to render a link, including `tagName`,\n * `attributes`, `content` and `eventListeners`.\n * @typedef {{ tagName: any, attributes: {[attr: string]: any}, content: string,\n * eventListeners: EventListeners }} IntermediateRepresentation\n */\n\n/**\n * Specify either an object described by the template type `O` or a function.\n *\n * The function takes a string value (usually the link's href attribute), the\n * link type (`'url'`, `'hashtag`', etc.) and an internal token representation\n * of the link. It should return an object of the template type `O`\n * @template O\n * @typedef {O | ((value: string, type: string, token: MultiToken) => O)} OptObj\n */\n\n/**\n * Specify either a function described by template type `F` or an object.\n *\n * Each key in the object should be a link type (`'url'`, `'hashtag`', etc.). Each\n * value should be a function with template type `F` that is called when the\n * corresponding link type is encountered.\n * @template F\n * @typedef {F | { [type: string]: F}} OptFn\n */\n\n/**\n * Specify either a value with template type `V`, a function that returns `V` or\n * an object where each value resolves to `V`.\n *\n * The function takes a string value (usually the link's href attribute), the\n * link type (`'url'`, `'hashtag`', etc.) and an internal token representation\n * of the link. It should return an object of the template type `V`\n *\n * For the object, each key should be a link type (`'url'`, `'hashtag`', etc.).\n * Each value should either have type `V` or a function that returns V. This\n * function similarly takes a string value and a token.\n *\n * Example valid types for `Opt<string>`:\n *\n * ```js\n * 'hello'\n * (value, type, token) => 'world'\n * { url: 'hello', email: (value, token) => 'world'}\n * ```\n * @template V\n * @typedef {V | ((value: string, type: string, token: MultiToken) => V) | { [type: string]: V | ((value: string, token: MultiToken) => V) }} Opt\n */\n\n/**\n * See available options: https://linkify.js.org/docs/options.html\n * @typedef {{\n * \tdefaultProtocol?: string,\n *  events?: OptObj<EventListeners>,\n * \tformat?: Opt<string>,\n * \tformatHref?: Opt<string>,\n * \tnl2br?: boolean,\n * \ttagName?: Opt<any>,\n * \ttarget?: Opt<string>,\n * \trel?: Opt<string>,\n * \tvalidate?: Opt<boolean>,\n * \ttruncate?: Opt<number>,\n * \tclassName?: Opt<string>,\n * \tattributes?: OptObj<({ [attr: string]: any })>,\n *  ignoreTags?: string[],\n * \trender?: OptFn<((ir: IntermediateRepresentation) => any)>\n * }} Opts\n */\n\n/**\n * @type Required<Opts>\n */\nconst defaults = {\n  defaultProtocol: 'http',\n  events: null,\n  format: noop,\n  formatHref: noop,\n  nl2br: false,\n  tagName: 'a',\n  target: null,\n  rel: null,\n  validate: true,\n  truncate: Infinity,\n  className: null,\n  attributes: null,\n  ignoreTags: [],\n  render: null\n};\n\n/**\n * Utility class for linkify interfaces to apply specified\n * {@link Opts formatting and rendering options}.\n *\n * @param {Opts | Options} [opts] Option value overrides.\n * @param {(ir: IntermediateRepresentation) => any} [defaultRender] (For\n *   internal use) default render function that determines how to generate an\n *   HTML element based on a link token's derived tagName, attributes and HTML.\n *   Similar to render option\n */\nfunction Options(opts, defaultRender) {\n  if (defaultRender === void 0) {\n    defaultRender = null;\n  }\n  let o = assign({}, defaults);\n  if (opts) {\n    o = assign(o, opts instanceof Options ? opts.o : opts);\n  }\n\n  // Ensure all ignored tags are uppercase\n  const ignoredTags = o.ignoreTags;\n  const uppercaseIgnoredTags = [];\n  for (let i = 0; i < ignoredTags.length; i++) {\n    uppercaseIgnoredTags.push(ignoredTags[i].toUpperCase());\n  }\n  /** @protected */\n  this.o = o;\n  if (defaultRender) {\n    this.defaultRender = defaultRender;\n  }\n  this.ignoreTags = uppercaseIgnoredTags;\n}\nOptions.prototype = {\n  o: defaults,\n  /**\n   * @type string[]\n   */\n  ignoreTags: [],\n  /**\n   * @param {IntermediateRepresentation} ir\n   * @returns {any}\n   */\n  defaultRender(ir) {\n    return ir;\n  },\n  /**\n   * Returns true or false based on whether a token should be displayed as a\n   * link based on the user options.\n   * @param {MultiToken} token\n   * @returns {boolean}\n   */\n  check(token) {\n    return this.get('validate', token.toString(), token);\n  },\n  // Private methods\n\n  /**\n   * Resolve an option's value based on the value of the option and the given\n   * params. If operator and token are specified and the target option is\n   * callable, automatically calls the function with the given argument.\n   * @template {keyof Opts} K\n   * @param {K} key Name of option to use\n   * @param {string} [operator] will be passed to the target option if it's a\n   * function. If not specified, RAW function value gets returned\n   * @param {MultiToken} [token] The token from linkify.tokenize\n   * @returns {Opts[K] | any}\n   */\n  get(key, operator, token) {\n    const isCallable = operator != null;\n    let option = this.o[key];\n    if (!option) {\n      return option;\n    }\n    if (typeof option === 'object') {\n      option = token.t in option ? option[token.t] : defaults[key];\n      if (typeof option === 'function' && isCallable) {\n        option = option(operator, token);\n      }\n    } else if (typeof option === 'function' && isCallable) {\n      option = option(operator, token.t, token);\n    }\n    return option;\n  },\n  /**\n   * @template {keyof Opts} L\n   * @param {L} key Name of options object to use\n   * @param {string} [operator]\n   * @param {MultiToken} [token]\n   * @returns {Opts[L] | any}\n   */\n  getObj(key, operator, token) {\n    let obj = this.o[key];\n    if (typeof obj === 'function' && operator != null) {\n      obj = obj(operator, token.t, token);\n    }\n    return obj;\n  },\n  /**\n   * Convert the given token to a rendered element that may be added to the\n   * calling-interface's DOM\n   * @param {MultiToken} token Token to render to an HTML element\n   * @returns {any} Render result; e.g., HTML string, DOM element, React\n   *   Component, etc.\n   */\n  render(token) {\n    const ir = token.render(this); // intermediate representation\n    const renderFn = this.get('render', null, token) || this.defaultRender;\n    return renderFn(ir, token.t, token);\n  }\n};\nfunction noop(val) {\n  return val;\n}\n\nvar options = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tdefaults: defaults,\n\tOptions: Options,\n\tassign: assign\n});\n\n/******************************************************************************\n\tMulti-Tokens\n\tTokens composed of arrays of TextTokens\n******************************************************************************/\n\n/**\n * @param {string} value\n * @param {Token[]} tokens\n */\nfunction MultiToken(value, tokens) {\n  this.t = 'token';\n  this.v = value;\n  this.tk = tokens;\n}\n\n/**\n * Abstract class used for manufacturing tokens of text tokens. That is rather\n * than the value for a token being a small string of text, it's value an array\n * of text tokens.\n *\n * Used for grouping together URLs, emails, hashtags, and other potential\n * creations.\n * @class MultiToken\n * @property {string} t\n * @property {string} v\n * @property {Token[]} tk\n * @abstract\n */\nMultiToken.prototype = {\n  isLink: false,\n  /**\n   * Return the string this token represents.\n   * @return {string}\n   */\n  toString() {\n    return this.v;\n  },\n  /**\n   * What should the value for this token be in the `href` HTML attribute?\n   * Returns the `.toString` value by default.\n   * @param {string} [scheme]\n   * @return {string}\n  */\n  toHref(scheme) {\n    return this.toString();\n  },\n  /**\n   * @param {Options} options Formatting options\n   * @returns {string}\n   */\n  toFormattedString(options) {\n    const val = this.toString();\n    const truncate = options.get('truncate', val, this);\n    const formatted = options.get('format', val, this);\n    return truncate && formatted.length > truncate ? formatted.substring(0, truncate) + '…' : formatted;\n  },\n  /**\n   *\n   * @param {Options} options\n   * @returns {string}\n   */\n  toFormattedHref(options) {\n    return options.get('formatHref', this.toHref(options.get('defaultProtocol')), this);\n  },\n  /**\n   * The start index of this token in the original input string\n   * @returns {number}\n   */\n  startIndex() {\n    return this.tk[0].s;\n  },\n  /**\n   * The end index of this token in the original input string (up to this\n   * index but not including it)\n   * @returns {number}\n   */\n  endIndex() {\n    return this.tk[this.tk.length - 1].e;\n  },\n  /**\n  \tReturns an object  of relevant values for this token, which includes keys\n  \t* type - Kind of token ('url', 'email', etc.)\n  \t* value - Original text\n  \t* href - The value that should be added to the anchor tag's href\n  \t\tattribute\n  \t\t@method toObject\n  \t@param {string} [protocol] `'http'` by default\n  */\n  toObject(protocol) {\n    if (protocol === void 0) {\n      protocol = defaults.defaultProtocol;\n    }\n    return {\n      type: this.t,\n      value: this.toString(),\n      isLink: this.isLink,\n      href: this.toHref(protocol),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n  /**\n   *\n   * @param {Options} options Formatting option\n   */\n  toFormattedObject(options) {\n    return {\n      type: this.t,\n      value: this.toFormattedString(options),\n      isLink: this.isLink,\n      href: this.toFormattedHref(options),\n      start: this.startIndex(),\n      end: this.endIndex()\n    };\n  },\n  /**\n   * Whether this token should be rendered as a link according to the given options\n   * @param {Options} options\n   * @returns {boolean}\n   */\n  validate(options) {\n    return options.get('validate', this.toString(), this);\n  },\n  /**\n   * Return an object that represents how this link should be rendered.\n   * @param {Options} options Formattinng options\n   */\n  render(options) {\n    const token = this;\n    const href = this.toHref(options.get('defaultProtocol'));\n    const formattedHref = options.get('formatHref', href, this);\n    const tagName = options.get('tagName', href, token);\n    const content = this.toFormattedString(options);\n    const attributes = {};\n    const className = options.get('className', href, token);\n    const target = options.get('target', href, token);\n    const rel = options.get('rel', href, token);\n    const attrs = options.getObj('attributes', href, token);\n    const eventListeners = options.getObj('events', href, token);\n    attributes.href = formattedHref;\n    if (className) {\n      attributes.class = className;\n    }\n    if (target) {\n      attributes.target = target;\n    }\n    if (rel) {\n      attributes.rel = rel;\n    }\n    if (attrs) {\n      assign(attributes, attrs);\n    }\n    return {\n      tagName,\n      attributes,\n      content,\n      eventListeners\n    };\n  }\n};\n\n/**\n * Create a new token that can be emitted by the parser state machine\n * @param {string} type readable type of the token\n * @param {object} props properties to assign or override, including isLink = true or false\n * @returns {new (value: string, tokens: Token[]) => MultiToken} new token class\n */\nfunction createTokenClass(type, props) {\n  class Token extends MultiToken {\n    constructor(value, tokens) {\n      super(value, tokens);\n      this.t = type;\n    }\n  }\n  for (const p in props) {\n    Token.prototype[p] = props[p];\n  }\n  Token.t = type;\n  return Token;\n}\n\n/**\n\tRepresents a list of tokens making up a valid email address\n*/\nconst Email = createTokenClass('email', {\n  isLink: true,\n  toHref() {\n    return 'mailto:' + this.toString();\n  }\n});\n\n/**\n\tRepresents some plain text\n*/\nconst Text = createTokenClass('text');\n\n/**\n\tMulti-linebreak token - represents a line break\n\t@class Nl\n*/\nconst Nl = createTokenClass('nl');\n\n/**\n\tRepresents a list of text tokens making up a valid URL\n\t@class Url\n*/\nconst Url = createTokenClass('url', {\n  isLink: true,\n  /**\n  \tLowercases relevant parts of the domain and adds the protocol if\n  \trequired. Note that this will not escape unsafe HTML characters in the\n  \tURL.\n  \t\t@param {string} [scheme] default scheme (e.g., 'https')\n  \t@return {string} the full href\n  */\n  toHref(scheme) {\n    if (scheme === void 0) {\n      scheme = defaults.defaultProtocol;\n    }\n    // Check if already has a prefix scheme\n    return this.hasProtocol() ? this.v : `${scheme}://${this.v}`;\n  },\n  /**\n   * Check whether this URL token has a protocol\n   * @return {boolean}\n   */\n  hasProtocol() {\n    const tokens = this.tk;\n    return tokens.length >= 2 && tokens[0].t !== LOCALHOST && tokens[1].t === COLON;\n  }\n});\n\nvar multi = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tMultiToken: MultiToken,\n\tBase: MultiToken,\n\tcreateTokenClass: createTokenClass,\n\tEmail: Email,\n\tText: Text,\n\tNl: Nl,\n\tUrl: Url\n});\n\n/**\n\tNot exactly parser, more like the second-stage scanner (although we can\n\ttheoretically hotswap the code here with a real parser in the future... but\n\tfor a little URL-finding utility abstract syntax trees may be a little\n\toverkill).\n\n\tURL format: http://en.wikipedia.org/wiki/URI_scheme\n\tEmail format: http://en.wikipedia.org/wiki/EmailAddress (links to RFC in\n\treference)\n\n\t@module linkify\n\t@submodule parser\n\t@main run\n*/\nconst makeState = arg => new State(arg);\n\n/**\n * Generate the parser multi token-based state machine\n * @param {{ groups: Collections<string> }} tokens\n */\nfunction init$1(_ref) {\n  let {\n    groups\n  } = _ref;\n  // Types of characters the URL can definitely end in\n  const qsAccepting = groups.domain.concat([AMPERSAND, ASTERISK, AT, BACKSLASH, BACKTICK, CARET, DOLLAR, EQUALS, HYPHEN, NUM, PERCENT, PIPE, PLUS, POUND, SLASH, SYM, TILDE, UNDERSCORE]);\n\n  // Types of tokens that can follow a URL and be part of the query string\n  // but cannot be the very last characters\n  // Characters that cannot appear in the URL at all should be excluded\n  const qsNonAccepting = [APOSTROPHE, CLOSEANGLEBRACKET, CLOSEBRACE, CLOSEBRACKET, CLOSEPAREN, COLON, COMMA, DOT, EXCLAMATION, OPENANGLEBRACKET, OPENBRACE, OPENBRACKET, OPENPAREN, QUERY, QUOTE, SEMI];\n\n  // For addresses without the mailto prefix\n  // Tokens allowed in the localpart of the email\n  const localpartAccepting = [AMPERSAND, APOSTROPHE, ASTERISK, BACKSLASH, BACKTICK, CARET, CLOSEBRACE, DOLLAR, EQUALS, HYPHEN, OPENBRACE, PERCENT, PIPE, PLUS, POUND, QUERY, SLASH, SYM, TILDE, UNDERSCORE];\n\n  // The universal starting state.\n  /**\n   * @type State<Token>\n   */\n  const Start = makeState();\n  const Localpart = tt(Start, TILDE); // Local part of the email address\n  ta(Localpart, localpartAccepting, Localpart);\n  ta(Localpart, groups.domain, Localpart);\n  const Domain = makeState(),\n    Scheme = makeState(),\n    SlashScheme = makeState();\n  ta(Start, groups.domain, Domain); // parsed string ends with a potential domain name (A)\n  ta(Start, groups.scheme, Scheme); // e.g., 'mailto'\n  ta(Start, groups.slashscheme, SlashScheme); // e.g., 'http'\n\n  ta(Domain, localpartAccepting, Localpart);\n  ta(Domain, groups.domain, Domain);\n  const LocalpartAt = tt(Domain, AT); // Local part of the email address plus @\n\n  tt(Localpart, AT, LocalpartAt); // close to an email address now\n\n  // Local part of an email address can be e.g. 'http' or 'mailto'\n  tt(Scheme, AT, LocalpartAt);\n  tt(SlashScheme, AT, LocalpartAt);\n  const LocalpartDot = tt(Localpart, DOT); // Local part of the email address plus '.' (localpart cannot end in .)\n  ta(LocalpartDot, localpartAccepting, Localpart);\n  ta(LocalpartDot, groups.domain, Localpart);\n  const EmailDomain = makeState();\n  ta(LocalpartAt, groups.domain, EmailDomain); // parsed string starts with local email info + @ with a potential domain name\n  ta(EmailDomain, groups.domain, EmailDomain);\n  const EmailDomainDot = tt(EmailDomain, DOT); // domain followed by DOT\n  ta(EmailDomainDot, groups.domain, EmailDomain);\n  const Email$1 = makeState(Email); // Possible email address (could have more tlds)\n  ta(EmailDomainDot, groups.tld, Email$1);\n  ta(EmailDomainDot, groups.utld, Email$1);\n  tt(LocalpartAt, LOCALHOST, Email$1);\n\n  // Hyphen can jump back to a domain name\n  const EmailDomainHyphen = tt(EmailDomain, HYPHEN); // parsed string starts with local email info + @ with a potential domain name\n  ta(EmailDomainHyphen, groups.domain, EmailDomain);\n  ta(Email$1, groups.domain, EmailDomain);\n  tt(Email$1, DOT, EmailDomainDot);\n  tt(Email$1, HYPHEN, EmailDomainHyphen);\n\n  // Final possible email states\n  const EmailColon = tt(Email$1, COLON); // URL followed by colon (potential port number here)\n  /*const EmailColonPort = */\n  ta(EmailColon, groups.numeric, Email); // URL followed by colon and port numner\n\n  // Account for dots and hyphens. Hyphens are usually parts of domain names\n  // (but not TLDs)\n  const DomainHyphen = tt(Domain, HYPHEN); // domain followed by hyphen\n  const DomainDot = tt(Domain, DOT); // domain followed by DOT\n  ta(DomainHyphen, groups.domain, Domain);\n  ta(DomainDot, localpartAccepting, Localpart);\n  ta(DomainDot, groups.domain, Domain);\n  const DomainDotTld = makeState(Url); // Simplest possible URL with no query string\n  ta(DomainDot, groups.tld, DomainDotTld);\n  ta(DomainDot, groups.utld, DomainDotTld);\n  ta(DomainDotTld, groups.domain, Domain);\n  ta(DomainDotTld, localpartAccepting, Localpart);\n  tt(DomainDotTld, DOT, DomainDot);\n  tt(DomainDotTld, HYPHEN, DomainHyphen);\n  tt(DomainDotTld, AT, LocalpartAt);\n  const DomainDotTldColon = tt(DomainDotTld, COLON); // URL followed by colon (potential port number here)\n  const DomainDotTldColonPort = makeState(Url); // TLD followed by a port number\n  ta(DomainDotTldColon, groups.numeric, DomainDotTldColonPort);\n\n  // Long URL with optional port and maybe query string\n  const Url$1 = makeState(Url);\n\n  // URL with extra symbols at the end, followed by an opening bracket\n  const UrlNonaccept = makeState(); // URL followed by some symbols (will not be part of the final URL)\n\n  // Query strings\n  ta(Url$1, qsAccepting, Url$1);\n  ta(Url$1, qsNonAccepting, UrlNonaccept);\n  ta(UrlNonaccept, qsAccepting, Url$1);\n  ta(UrlNonaccept, qsNonAccepting, UrlNonaccept);\n\n  // Become real URLs after `SLASH` or `COLON NUM SLASH`\n  // Here works with or without scheme:// prefix\n  tt(DomainDotTld, SLASH, Url$1);\n  tt(DomainDotTldColonPort, SLASH, Url$1);\n\n  // Note that domains that begin with schemes are treated slighly differently\n  const SchemeColon = tt(Scheme, COLON); // e.g., 'mailto:'\n  const SlashSchemeColon = tt(SlashScheme, COLON); // e.g., 'http:'\n  const SlashSchemeColonSlash = tt(SlashSchemeColon, SLASH); // e.g., 'http:/'\n\n  const UriPrefix = tt(SlashSchemeColonSlash, SLASH); // e.g., 'http://'\n\n  // Scheme states can transition to domain states\n  ta(Scheme, groups.domain, Domain);\n  tt(Scheme, DOT, DomainDot);\n  tt(Scheme, HYPHEN, DomainHyphen);\n  ta(SlashScheme, groups.domain, Domain);\n  tt(SlashScheme, DOT, DomainDot);\n  tt(SlashScheme, HYPHEN, DomainHyphen);\n\n  // Force URL with scheme prefix followed by anything sane\n  ta(SchemeColon, groups.domain, Url$1);\n  tt(SchemeColon, SLASH, Url$1);\n  ta(UriPrefix, groups.domain, Url$1);\n  ta(UriPrefix, qsAccepting, Url$1);\n  tt(UriPrefix, SLASH, Url$1);\n\n  // URL, followed by an opening bracket\n  const UrlOpenbrace = tt(Url$1, OPENBRACE); // URL followed by {\n  const UrlOpenbracket = tt(Url$1, OPENBRACKET); // URL followed by [\n  const UrlOpenanglebracket = tt(Url$1, OPENANGLEBRACKET); // URL followed by <\n  const UrlOpenparen = tt(Url$1, OPENPAREN); // URL followed by (\n\n  tt(UrlNonaccept, OPENBRACE, UrlOpenbrace);\n  tt(UrlNonaccept, OPENBRACKET, UrlOpenbracket);\n  tt(UrlNonaccept, OPENANGLEBRACKET, UrlOpenanglebracket);\n  tt(UrlNonaccept, OPENPAREN, UrlOpenparen);\n\n  // Closing bracket component. This character WILL be included in the URL\n  tt(UrlOpenbrace, CLOSEBRACE, Url$1);\n  tt(UrlOpenbracket, CLOSEBRACKET, Url$1);\n  tt(UrlOpenanglebracket, CLOSEANGLEBRACKET, Url$1);\n  tt(UrlOpenparen, CLOSEPAREN, Url$1);\n  tt(UrlOpenbrace, CLOSEBRACE, Url$1);\n\n  // URL that beings with an opening bracket, followed by a symbols.\n  // Note that the final state can still be `UrlOpenbrace` (if the URL only\n  // has a single opening bracket for some reason).\n  const UrlOpenbraceQ = makeState(Url); // URL followed by { and some symbols that the URL can end it\n  const UrlOpenbracketQ = makeState(Url); // URL followed by [ and some symbols that the URL can end it\n  const UrlOpenanglebracketQ = makeState(Url); // URL followed by < and some symbols that the URL can end it\n  const UrlOpenparenQ = makeState(Url); // URL followed by ( and some symbols that the URL can end it\n  ta(UrlOpenbrace, qsAccepting, UrlOpenbraceQ);\n  ta(UrlOpenbracket, qsAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracket, qsAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparen, qsAccepting, UrlOpenparenQ);\n  const UrlOpenbraceSyms = makeState(); // UrlOpenbrace followed by some symbols it cannot end it\n  const UrlOpenbracketSyms = makeState(); // UrlOpenbracketQ followed by some symbols it cannot end it\n  const UrlOpenanglebracketSyms = makeState(); // UrlOpenanglebracketQ followed by some symbols it cannot end it\n  const UrlOpenparenSyms = makeState(); // UrlOpenparenQ followed by some symbols it cannot end it\n  ta(UrlOpenbrace, qsNonAccepting);\n  ta(UrlOpenbracket, qsNonAccepting);\n  ta(UrlOpenanglebracket, qsNonAccepting);\n  ta(UrlOpenparen, qsNonAccepting);\n\n  // URL that begins with an opening bracket, followed by some symbols\n  ta(UrlOpenbraceQ, qsAccepting, UrlOpenbraceQ);\n  ta(UrlOpenbracketQ, qsAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracketQ, qsAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparenQ, qsAccepting, UrlOpenparenQ);\n  ta(UrlOpenbraceQ, qsNonAccepting, UrlOpenbraceQ);\n  ta(UrlOpenbracketQ, qsNonAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracketQ, qsNonAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparenQ, qsNonAccepting, UrlOpenparenQ);\n  ta(UrlOpenbraceSyms, qsAccepting, UrlOpenbraceSyms);\n  ta(UrlOpenbracketSyms, qsAccepting, UrlOpenbracketQ);\n  ta(UrlOpenanglebracketSyms, qsAccepting, UrlOpenanglebracketQ);\n  ta(UrlOpenparenSyms, qsAccepting, UrlOpenparenQ);\n  ta(UrlOpenbraceSyms, qsNonAccepting, UrlOpenbraceSyms);\n  ta(UrlOpenbracketSyms, qsNonAccepting, UrlOpenbracketSyms);\n  ta(UrlOpenanglebracketSyms, qsNonAccepting, UrlOpenanglebracketSyms);\n  ta(UrlOpenparenSyms, qsNonAccepting, UrlOpenparenSyms);\n\n  // Close brace/bracket to become regular URL\n  tt(UrlOpenbracketQ, CLOSEBRACKET, Url$1);\n  tt(UrlOpenanglebracketQ, CLOSEANGLEBRACKET, Url$1);\n  tt(UrlOpenparenQ, CLOSEPAREN, Url$1);\n  tt(UrlOpenbraceQ, CLOSEBRACE, Url$1);\n  tt(UrlOpenbracketSyms, CLOSEBRACKET, Url$1);\n  tt(UrlOpenanglebracketSyms, CLOSEANGLEBRACKET, Url$1);\n  tt(UrlOpenparenSyms, CLOSEPAREN, Url$1);\n  tt(UrlOpenbraceSyms, CLOSEPAREN, Url$1);\n  tt(Start, LOCALHOST, DomainDotTld); // localhost is a valid URL state\n  tt(Start, NL$1, Nl); // single new line\n\n  return {\n    start: Start,\n    tokens: tk\n  };\n}\n\n/**\n * Run the parser state machine on a list of scanned string-based tokens to\n * create a list of multi tokens, each of which represents a URL, email address,\n * plain text, etc.\n *\n * @param {State<MultiToken>} start parser start state\n * @param {string} input the original input used to generate the given tokens\n * @param {Token[]} tokens list of scanned tokens\n * @returns {MultiToken[]}\n */\nfunction run(start, input, tokens) {\n  let len = tokens.length;\n  let cursor = 0;\n  let multis = [];\n  let textTokens = [];\n  while (cursor < len) {\n    let state = start;\n    let secondState = null;\n    let nextState = null;\n    let multiLength = 0;\n    let latestAccepting = null;\n    let sinceAccepts = -1;\n    while (cursor < len && !(secondState = state.go(tokens[cursor].t))) {\n      // Starting tokens with nowhere to jump to.\n      // Consider these to be just plain text\n      textTokens.push(tokens[cursor++]);\n    }\n    while (cursor < len && (nextState = secondState || state.go(tokens[cursor].t))) {\n      // Get the next state\n      secondState = null;\n      state = nextState;\n\n      // Keep track of the latest accepting state\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts++;\n      }\n      cursor++;\n      multiLength++;\n    }\n    if (sinceAccepts < 0) {\n      // No accepting state was found, part of a regular text token add\n      // the first text token to the text tokens array and try again from\n      // the next\n      cursor -= multiLength;\n      if (cursor < len) {\n        textTokens.push(tokens[cursor]);\n        cursor++;\n      }\n    } else {\n      // Accepting state!\n      // First close off the textTokens (if available)\n      if (textTokens.length > 0) {\n        multis.push(initMultiToken(Text, input, textTokens));\n        textTokens = [];\n      }\n\n      // Roll back to the latest accepting state\n      cursor -= sinceAccepts;\n      multiLength -= sinceAccepts;\n\n      // Create a new multitoken\n      const Multi = latestAccepting.t;\n      const subtokens = tokens.slice(cursor - multiLength, cursor);\n      multis.push(initMultiToken(Multi, input, subtokens));\n    }\n  }\n\n  // Finally close off the textTokens (if available)\n  if (textTokens.length > 0) {\n    multis.push(initMultiToken(Text, input, textTokens));\n  }\n  return multis;\n}\n\n/**\n * Utility function for instantiating a new multitoken with all the relevant\n * fields during parsing.\n * @param {new (value: string, tokens: Token[]) => MultiToken} Multi class to instantiate\n * @param {string} input original input string\n * @param {Token[]} tokens consecutive tokens scanned from input string\n * @returns {MultiToken}\n */\nfunction initMultiToken(Multi, input, tokens) {\n  const startIdx = tokens[0].s;\n  const endIdx = tokens[tokens.length - 1].e;\n  const value = input.slice(startIdx, endIdx);\n  return new Multi(value, tokens);\n}\n\nconst warn = typeof console !== 'undefined' && console && console.warn || (() => {});\nconst warnAdvice = 'until manual call of linkify.init(). Register all schemes and plugins before invoking linkify the first time.';\n\n// Side-effect initialization state\nconst INIT = {\n  scanner: null,\n  parser: null,\n  tokenQueue: [],\n  pluginQueue: [],\n  customSchemes: [],\n  initialized: false\n};\n\n/**\n * @typedef {{\n * \tstart: State<string>,\n * \ttokens: { groups: Collections<string> } & typeof tk\n * }} ScannerInit\n */\n\n/**\n * @typedef {{\n * \tstart: State<MultiToken>,\n * \ttokens: typeof multi\n * }} ParserInit\n */\n\n/**\n * @typedef {(arg: { scanner: ScannerInit }) => void} TokenPlugin\n */\n\n/**\n * @typedef {(arg: { scanner: ScannerInit, parser: ParserInit }) => void} Plugin\n */\n\n/**\n * De-register all plugins and reset the internal state-machine. Used for\n * testing; not required in practice.\n * @private\n */\nfunction reset() {\n  State.groups = {};\n  INIT.scanner = null;\n  INIT.parser = null;\n  INIT.tokenQueue = [];\n  INIT.pluginQueue = [];\n  INIT.customSchemes = [];\n  INIT.initialized = false;\n}\n\n/**\n * Register a token plugin to allow the scanner to recognize additional token\n * types before the parser state machine is constructed from the results.\n * @param {string} name of plugin to register\n * @param {TokenPlugin} plugin function that accepts the scanner state machine\n * and available scanner tokens and collections and extends the state machine to\n * recognize additional tokens or groups.\n */\nfunction registerTokenPlugin(name, plugin) {\n  if (typeof plugin !== 'function') {\n    throw new Error(`linkifyjs: Invalid token plugin ${plugin} (expects function)`);\n  }\n  for (let i = 0; i < INIT.tokenQueue.length; i++) {\n    if (name === INIT.tokenQueue[i][0]) {\n      warn(`linkifyjs: token plugin \"${name}\" already registered - will be overwritten`);\n      INIT.tokenQueue[i] = [name, plugin];\n      return;\n    }\n  }\n  INIT.tokenQueue.push([name, plugin]);\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register token plugin \"${name}\" ${warnAdvice}`);\n  }\n}\n\n/**\n * Register a linkify plugin\n * @param {string} name of plugin to register\n * @param {Plugin} plugin function that accepts the parser state machine and\n * extends the parser to recognize additional link types\n */\nfunction registerPlugin(name, plugin) {\n  if (typeof plugin !== 'function') {\n    throw new Error(`linkifyjs: Invalid plugin ${plugin} (expects function)`);\n  }\n  for (let i = 0; i < INIT.pluginQueue.length; i++) {\n    if (name === INIT.pluginQueue[i][0]) {\n      warn(`linkifyjs: plugin \"${name}\" already registered - will be overwritten`);\n      INIT.pluginQueue[i] = [name, plugin];\n      return;\n    }\n  }\n  INIT.pluginQueue.push([name, plugin]);\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register plugin \"${name}\" ${warnAdvice}`);\n  }\n}\n\n/**\n * Detect URLs with the following additional protocol. Anything with format\n * \"protocol://...\" will be considered a link. If `optionalSlashSlash` is set to\n * `true`, anything with format \"protocol:...\" will be considered a link.\n * @param {string} protocol\n * @param {boolean} [optionalSlashSlash]\n */\nfunction registerCustomProtocol(scheme, optionalSlashSlash) {\n  if (optionalSlashSlash === void 0) {\n    optionalSlashSlash = false;\n  }\n  if (INIT.initialized) {\n    warn(`linkifyjs: already initialized - will not register custom scheme \"${scheme}\" ${warnAdvice}`);\n  }\n  if (!/^[0-9a-z]+(-[0-9a-z]+)*$/.test(scheme)) {\n    throw new Error('linkifyjs: incorrect scheme format.\\n 1. Must only contain digits, lowercase ASCII letters or \"-\"\\n 2. Cannot start or end with \"-\"\\n 3. \"-\" cannot repeat');\n  }\n  INIT.customSchemes.push([scheme, optionalSlashSlash]);\n}\n\n/**\n * Initialize the linkify state machine. Called automatically the first time\n * linkify is called on a string, but may be called manually as well.\n */\nfunction init() {\n  // Initialize scanner state machine and plugins\n  INIT.scanner = init$2(INIT.customSchemes);\n  for (let i = 0; i < INIT.tokenQueue.length; i++) {\n    INIT.tokenQueue[i][1]({\n      scanner: INIT.scanner\n    });\n  }\n\n  // Initialize parser state machine and plugins\n  INIT.parser = init$1(INIT.scanner.tokens);\n  for (let i = 0; i < INIT.pluginQueue.length; i++) {\n    INIT.pluginQueue[i][1]({\n      scanner: INIT.scanner,\n      parser: INIT.parser\n    });\n  }\n  INIT.initialized = true;\n}\n\n/**\n * Parse a string into tokens that represent linkable and non-linkable sub-components\n * @param {string} str\n * @return {MultiToken[]} tokens\n */\nfunction tokenize(str) {\n  if (!INIT.initialized) {\n    init();\n  }\n  return run(INIT.parser.start, str, run$1(INIT.scanner.start, str));\n}\n\n/**\n * Find a list of linkable items in the given string.\n * @param {string} str string to find links in\n * @param {string | Opts} [type] either formatting options or specific type of\n * links to find, e.g., 'url' or 'email'\n * @param {Opts} [opts] formatting options for final output. Cannot be specified\n * if opts already provided in `type` argument\n*/\nfunction find(str, type, opts) {\n  if (type === void 0) {\n    type = null;\n  }\n  if (opts === void 0) {\n    opts = null;\n  }\n  if (type && typeof type === 'object') {\n    if (opts) {\n      throw Error(`linkifyjs: Invalid link type ${type}; must be a string`);\n    }\n    opts = type;\n    type = null;\n  }\n  const options = new Options(opts);\n  const tokens = tokenize(str);\n  const filtered = [];\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    if (token.isLink && (!type || token.t === type)) {\n      filtered.push(token.toFormattedObject(options));\n    }\n  }\n  return filtered;\n}\n\n/**\n * Is the given string valid linkable text of some sort. Note that this does not\n * trim the text for you.\n *\n * Optionally pass in a second `type` param, which is the type of link to test\n * for.\n *\n * For example,\n *\n *     linkify.test(str, 'email');\n *\n * Returns `true` if str is a valid email.\n * @param {string} str string to test for links\n * @param {string} [type] optional specific link type to look for\n * @returns boolean true/false\n */\nfunction test(str, type) {\n  if (type === void 0) {\n    type = null;\n  }\n  const tokens = tokenize(str);\n  return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].t === type);\n}\n\nexport { MultiToken, Options, State, createTokenClass, find, init, multi, options, regexp, registerCustomProtocol, registerPlugin, registerTokenPlugin, reset, stringToArray, test, tokenize };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}