{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React, { useContext } from 'react';\nexport var MessageContext = React.createContext(undefined);\nexport var MessageProvider = function (_a) {\n  var children = _a.children,\n    value = _a.value;\n  return React.createElement(MessageContext.Provider, {\n    value: value\n  }, children);\n};\nexport var useMessageContext = function (componentName) {\n  var contextValue = useContext(MessageContext);\n  if (!contextValue) {\n    console.warn(\"The useMessageContext hook was called outside of the MessageContext provider. Make sure this hook is called within the Message's UI component. The errored call is located in the \".concat(componentName, \" component.\"));\n    return {};\n  }\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if MessageContext\n * typing is desired while using the HOC withMessageContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport var withMessageContext = function (Component) {\n  var WithMessageContextComponent = function (props) {\n    var messageContext = useMessageContext();\n    return React.createElement(Component, __assign({}, props, messageContext));\n  };\n  WithMessageContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithMessageContextComponent;\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useContext","MessageContext","createContext","undefined","MessageProvider","_a","children","value","createElement","Provider","useMessageContext","componentName","contextValue","console","warn","concat","withMessageContext","Component","WithMessageContextComponent","props","messageContext","displayName","name","replace"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/chat_Web/client/node_modules/stream-chat-react/dist/context/MessageContext.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { useContext } from 'react';\nexport var MessageContext = React.createContext(undefined);\nexport var MessageProvider = function (_a) {\n    var children = _a.children, value = _a.value;\n    return (React.createElement(MessageContext.Provider, { value: value }, children));\n};\nexport var useMessageContext = function (componentName) {\n    var contextValue = useContext(MessageContext);\n    if (!contextValue) {\n        console.warn(\"The useMessageContext hook was called outside of the MessageContext provider. Make sure this hook is called within the Message's UI component. The errored call is located in the \".concat(componentName, \" component.\"));\n        return {};\n    }\n    return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if MessageContext\n * typing is desired while using the HOC withMessageContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport var withMessageContext = function (Component) {\n    var WithMessageContextComponent = function (props) {\n        var messageContext = useMessageContext();\n        return React.createElement(Component, __assign({}, props, messageContext));\n    };\n    WithMessageContextComponent.displayName = (Component.displayName ||\n        Component.name ||\n        'Component').replace('Base', '');\n    return WithMessageContextComponent;\n};\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAM,IAAI,UAASC,CAAC,EAAE;IACpC,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;MAChB,KAAK,IAAII,CAAC,IAAIL,CAAC,EAAE,IAAIH,MAAM,CAACS,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAC3DN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IACnB;IACA,OAAON,CAAC;EACZ,CAAC;EACD,OAAOH,QAAQ,CAACa,KAAK,CAAC,IAAI,EAAEN,SAAS,CAAC;AAC1C,CAAC;AACD,OAAOO,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAO,IAAIC,cAAc,GAAGF,KAAK,CAACG,aAAa,CAACC,SAAS,CAAC;AAC1D,OAAO,IAAIC,eAAe,GAAG,SAAAA,CAAUC,EAAE,EAAE;EACvC,IAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAQ;IAAEC,KAAK,GAAGF,EAAE,CAACE,KAAK;EAC5C,OAAQR,KAAK,CAACS,aAAa,CAACP,cAAc,CAACQ,QAAQ,EAAE;IAAEF,KAAK,EAAEA;EAAM,CAAC,EAAED,QAAQ,CAAC;AACpF,CAAC;AACD,OAAO,IAAII,iBAAiB,GAAG,SAAAA,CAAUC,aAAa,EAAE;EACpD,IAAIC,YAAY,GAAGZ,UAAU,CAACC,cAAc,CAAC;EAC7C,IAAI,CAACW,YAAY,EAAE;IACfC,OAAO,CAACC,IAAI,CAAC,oLAAoL,CAACC,MAAM,CAACJ,aAAa,EAAE,aAAa,CAAC,CAAC;IACvO,OAAO,CAAC,CAAC;EACb;EACA,OAAOC,YAAY;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,IAAII,kBAAkB,GAAG,SAAAA,CAAUC,SAAS,EAAE;EACjD,IAAIC,2BAA2B,GAAG,SAAAA,CAAUC,KAAK,EAAE;IAC/C,IAAIC,cAAc,GAAGV,iBAAiB,CAAC,CAAC;IACxC,OAAOX,KAAK,CAACS,aAAa,CAACS,SAAS,EAAEhC,QAAQ,CAAC,CAAC,CAAC,EAAEkC,KAAK,EAAEC,cAAc,CAAC,CAAC;EAC9E,CAAC;EACDF,2BAA2B,CAACG,WAAW,GAAG,CAACJ,SAAS,CAACI,WAAW,IAC5DJ,SAAS,CAACK,IAAI,IACd,WAAW,EAAEC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACpC,OAAOL,2BAA2B;AACtC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}