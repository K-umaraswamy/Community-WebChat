{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport { sanitizeUri } from 'micromark-util-sanitize-uri';\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `htmlExtensions` to support\n * GFM autolink literals when serializing to HTML.\n *\n * @type {HtmlExtension}\n */\nexport const gfmAutolinkLiteralHtml = {\n  exit: {\n    literalAutolinkEmail,\n    literalAutolinkHttp,\n    literalAutolinkWww\n  }\n};\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://');\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:');\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token);\n}\n\n/**\n * @this CompileContext\n * @param {Token} token\n * @param {string | null | undefined} [protocol]\n * @returns {void}\n */\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token);\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">');\n  this.raw(this.encode(url));\n  this.tag('</a>');\n}","map":{"version":3,"names":["sanitizeUri","gfmAutolinkLiteralHtml","exit","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","token","anchorFromToken","call","protocol","url","sliceSerialize","tag","raw","encode"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/Community_Chat-project/client/node_modules/micromark-extension-gfm-autolink-literal/dev/lib/html.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').CompileContext} CompileContext\n * @typedef {import('micromark-util-types').Handle} Handle\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n * @typedef {import('micromark-util-types').Token} Token\n */\n\nimport {sanitizeUri} from 'micromark-util-sanitize-uri'\n\n// To do: next major: expose functions that yields extension.\n\n/**\n * Extension for `micromark` that can be passed in `htmlExtensions` to support\n * GFM autolink literals when serializing to HTML.\n *\n * @type {HtmlExtension}\n */\nexport const gfmAutolinkLiteralHtml = {\n  exit: {literalAutolinkEmail, literalAutolinkHttp, literalAutolinkWww}\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkWww(token) {\n  anchorFromToken.call(this, token, 'http://')\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkEmail(token) {\n  anchorFromToken.call(this, token, 'mailto:')\n}\n\n/**\n * @this {CompileContext}\n * @type {Handle}\n */\nfunction literalAutolinkHttp(token) {\n  anchorFromToken.call(this, token)\n}\n\n/**\n * @this CompileContext\n * @param {Token} token\n * @param {string | null | undefined} [protocol]\n * @returns {void}\n */\nfunction anchorFromToken(token, protocol) {\n  const url = this.sliceSerialize(token)\n  this.tag('<a href=\"' + sanitizeUri((protocol || '') + url) + '\">')\n  this.raw(this.encode(url))\n  this.tag('</a>')\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,WAAW,QAAO,6BAA6B;;AAEvD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,sBAAsB,GAAG;EACpCC,IAAI,EAAE;IAACC,oBAAoB;IAAEC,mBAAmB;IAAEC;EAAkB;AACtE,CAAC;;AAED;AACA;AACA;AACA;AACA,SAASA,kBAAkBA,CAACC,KAAK,EAAE;EACjCC,eAAe,CAACC,IAAI,CAAC,IAAI,EAAEF,KAAK,EAAE,SAAS,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA,SAASH,oBAAoBA,CAACG,KAAK,EAAE;EACnCC,eAAe,CAACC,IAAI,CAAC,IAAI,EAAEF,KAAK,EAAE,SAAS,CAAC;AAC9C;;AAEA;AACA;AACA;AACA;AACA,SAASF,mBAAmBA,CAACE,KAAK,EAAE;EAClCC,eAAe,CAACC,IAAI,CAAC,IAAI,EAAEF,KAAK,CAAC;AACnC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAACD,KAAK,EAAEG,QAAQ,EAAE;EACxC,MAAMC,GAAG,GAAG,IAAI,CAACC,cAAc,CAACL,KAAK,CAAC;EACtC,IAAI,CAACM,GAAG,CAAC,WAAW,GAAGZ,WAAW,CAAC,CAACS,QAAQ,IAAI,EAAE,IAAIC,GAAG,CAAC,GAAG,IAAI,CAAC;EAClE,IAAI,CAACG,GAAG,CAAC,IAAI,CAACC,MAAM,CAACJ,GAAG,CAAC,CAAC;EAC1B,IAAI,CAACE,GAAG,CAAC,MAAM,CAAC;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}