{"ast":null,"code":"/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport { patternCompile } from '../util/pattern-compile.js';\ninlineCode.peek = inlineCodePeek;\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || '';\n  let sequence = '`';\n  let index = -1;\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`';\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (/[^ \\r\\n]/.test(value) && (/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value) || /^`|`$/.test(value))) {\n    value = ' ' + value + ' ';\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index];\n    const expression = patternCompile(pattern);\n    /** @type {RegExpExecArray | null} */\n    let match;\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue;\n    while (match = expression.exec(value)) {\n      let position = match.index;\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (value.charCodeAt(position) === 10 /* `\\n` */ && value.charCodeAt(position - 1) === 13 /* `\\r` */) {\n        position--;\n      }\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1);\n    }\n  }\n  return sequence + value + sequence;\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`';\n}","map":{"version":3,"names":["patternCompile","inlineCode","peek","inlineCodePeek","node","_","state","value","sequence","index","RegExp","test","unsafe","length","pattern","expression","match","atBreak","exec","position","charCodeAt","slice"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/Community_Chat-project/client/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js"],"sourcesContent":["/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n */\n\nimport {patternCompile} from '../util/pattern-compile.js'\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parent | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = patternCompile(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;;AAEA,SAAQA,cAAc,QAAO,4BAA4B;AAEzDC,UAAU,CAACC,IAAI,GAAGC,cAAc;;AAEhC;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASF,UAAUA,CAACG,IAAI,EAAEC,CAAC,EAAEC,KAAK,EAAE;EACzC,IAAIC,KAAK,GAAGH,IAAI,CAACG,KAAK,IAAI,EAAE;EAC5B,IAAIC,QAAQ,GAAG,GAAG;EAClB,IAAIC,KAAK,GAAG,CAAC,CAAC;;EAEd;EACA;EACA;EACA,OAAO,IAAIC,MAAM,CAAC,UAAU,GAAGF,QAAQ,GAAG,UAAU,CAAC,CAACG,IAAI,CAACJ,KAAK,CAAC,EAAE;IACjEC,QAAQ,IAAI,GAAG;EACjB;;EAEA;EACA;EACA,IACE,UAAU,CAACG,IAAI,CAACJ,KAAK,CAAC,KACpB,UAAU,CAACI,IAAI,CAACJ,KAAK,CAAC,IAAI,UAAU,CAACI,IAAI,CAACJ,KAAK,CAAC,IAAK,OAAO,CAACI,IAAI,CAACJ,KAAK,CAAC,CAAC,EAC3E;IACAA,KAAK,GAAG,GAAG,GAAGA,KAAK,GAAG,GAAG;EAC3B;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,OAAO,EAAEE,KAAK,GAAGH,KAAK,CAACM,MAAM,CAACC,MAAM,EAAE;IACpC,MAAMC,OAAO,GAAGR,KAAK,CAACM,MAAM,CAACH,KAAK,CAAC;IACnC,MAAMM,UAAU,GAAGf,cAAc,CAACc,OAAO,CAAC;IAC1C;IACA,IAAIE,KAAK;;IAET;IACA;IACA;IACA,IAAI,CAACF,OAAO,CAACG,OAAO,EAAE;IAEtB,OAAQD,KAAK,GAAGD,UAAU,CAACG,IAAI,CAACX,KAAK,CAAC,EAAG;MACvC,IAAIY,QAAQ,GAAGH,KAAK,CAACP,KAAK;;MAE1B;MACA,IACEF,KAAK,CAACa,UAAU,CAACD,QAAQ,CAAC,KAAK,EAAE,CAAC,cAClCZ,KAAK,CAACa,UAAU,CAACD,QAAQ,GAAG,CAAC,CAAC,KAAK,EAAE,CAAC,YACtC;QACAA,QAAQ,EAAE;MACZ;MAEAZ,KAAK,GAAGA,KAAK,CAACc,KAAK,CAAC,CAAC,EAAEF,QAAQ,CAAC,GAAG,GAAG,GAAGZ,KAAK,CAACc,KAAK,CAACL,KAAK,CAACP,KAAK,GAAG,CAAC,CAAC;IACvE;EACF;EAEA,OAAOD,QAAQ,GAAGD,KAAK,GAAGC,QAAQ;AACpC;;AAEA;AACA;AACA;AACA,SAASL,cAAcA,CAAA,EAAG;EACxB,OAAO,GAAG;AACZ"},"metadata":{},"sourceType":"module","externalDependencies":[]}