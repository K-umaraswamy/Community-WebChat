{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.URL = exports.TEXT = exports.NL = exports.EMAIL = exports.MAILTOEMAIL = exports.Base = undefined;\nvar _createTokenClass = require('./create-token-class');\nvar _class = require('../../utils/class');\nvar _text = require('./text');\n\n/******************************************************************************\n\tMulti-Tokens\n\tTokens composed of arrays of TextTokens\n******************************************************************************/\n\n// Is the given token a valid domain token?\n// Should nums be included here?\nfunction isDomainToken(token) {\n  return token instanceof _text.DOMAIN || token instanceof _text.TLD;\n}\n\n/**\n\tAbstract class used for manufacturing tokens of text tokens. That is rather\n\tthan the value for a token being a small string of text, it's value an array\n\tof text tokens.\n\n\tUsed for grouping together URLs, emails, hashtags, and other potential\n\tcreations.\n\n\t@class MultiToken\n\t@abstract\n*/\nvar MultiToken = (0, _createTokenClass.createTokenClass)();\nMultiToken.prototype = {\n  /**\n  \tString representing the type for this token\n  \t@property type\n  \t@default 'TOKEN'\n  */\n  type: 'token',\n  /**\n  \tIs this multitoken a link?\n  \t@property isLink\n  \t@default false\n  */\n  isLink: false,\n  /**\n  \tReturn the string this token represents.\n  \t@method toString\n  \t@return {String}\n  */\n  toString: function toString() {\n    var result = [];\n    for (var i = 0; i < this.v.length; i++) {\n      result.push(this.v[i].toString());\n    }\n    return result.join('');\n  },\n  /**\n  \tWhat should the value for this token be in the `href` HTML attribute?\n  \tReturns the `.toString` value by default.\n  \t\t@method toHref\n  \t@return {String}\n  */\n  toHref: function toHref() {\n    return this.toString();\n  },\n  /**\n  \tReturns a hash of relevant values for this token, which includes keys\n  \t* type - Kind of token ('url', 'email', etc.)\n  \t* value - Original text\n  \t* href - The value that should be added to the anchor tag's href\n  \t\tattribute\n  \t\t@method toObject\n  \t@param {String} [protocol] `'http'` by default\n  \t@return {Object}\n  */\n  toObject: function toObject() {\n    var protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http';\n    return {\n      type: this.type,\n      value: this.toString(),\n      href: this.toHref(protocol)\n    };\n  }\n};\n\n/**\n\tRepresents an arbitrarily mailto email address with the prefix included\n\t@class MAILTO\n\t@extends MultiToken\n*/\nvar MAILTOEMAIL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n  type: 'email',\n  isLink: true\n});\n\n/**\n\tRepresents a list of tokens making up a valid email address\n\t@class EMAIL\n\t@extends MultiToken\n*/\nvar EMAIL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n  type: 'email',\n  isLink: true,\n  toHref: function toHref() {\n    return 'mailto:' + this.toString();\n  }\n});\n\n/**\n\tRepresents some plain text\n\t@class TEXT\n\t@extends MultiToken\n*/\nvar TEXT = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n  type: 'text'\n});\n\n/**\n\tMulti-linebreak token - represents a line break\n\t@class NL\n\t@extends MultiToken\n*/\nvar NL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n  type: 'nl'\n});\n\n/**\n\tRepresents a list of tokens making up a valid URL\n\t@class URL\n\t@extends MultiToken\n*/\nvar URL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n  type: 'url',\n  isLink: true,\n  /**\n  \tLowercases relevant parts of the domain and adds the protocol if\n  \trequired. Note that this will not escape unsafe HTML characters in the\n  \tURL.\n  \t\t@method href\n  \t@param {String} protocol\n  \t@return {String}\n  */\n  toHref: function toHref() {\n    var protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http';\n    var hasProtocol = false;\n    var hasSlashSlash = false;\n    var tokens = this.v;\n    var result = [];\n    var i = 0;\n\n    // Make the first part of the domain lowercase\n    // Lowercase protocol\n    while (tokens[i] instanceof _text.PROTOCOL) {\n      hasProtocol = true;\n      result.push(tokens[i].toString().toLowerCase());\n      i++;\n    }\n\n    // Skip slash-slash\n    while (tokens[i] instanceof _text.SLASH) {\n      hasSlashSlash = true;\n      result.push(tokens[i].toString());\n      i++;\n    }\n\n    // Lowercase all other characters in the domain\n    while (isDomainToken(tokens[i])) {\n      result.push(tokens[i].toString().toLowerCase());\n      i++;\n    }\n\n    // Leave all other characters as they were written\n    for (; i < tokens.length; i++) {\n      result.push(tokens[i].toString());\n    }\n    result = result.join('');\n    if (!(hasProtocol || hasSlashSlash)) {\n      result = protocol + '://' + result;\n    }\n    return result;\n  },\n  hasProtocol: function hasProtocol() {\n    return this.v[0] instanceof _text.PROTOCOL;\n  }\n});\nexports.Base = MultiToken;\nexports.MAILTOEMAIL = MAILTOEMAIL;\nexports.EMAIL = EMAIL;\nexports.NL = NL;\nexports.TEXT = TEXT;\nexports.URL = URL;","map":{"version":3,"names":["exports","__esModule","URL","TEXT","NL","EMAIL","MAILTOEMAIL","Base","undefined","_createTokenClass","require","_class","_text","isDomainToken","token","DOMAIN","TLD","MultiToken","createTokenClass","prototype","type","isLink","toString","result","i","v","length","push","join","toHref","toObject","protocol","arguments","value","href","inherits","hasProtocol","hasSlashSlash","tokens","PROTOCOL","toLowerCase","SLASH"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/Community_Chat-project/client/node_modules/mml-react/node_modules/linkifyjs/lib/linkify/core/tokens/multi.js"],"sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.URL = exports.TEXT = exports.NL = exports.EMAIL = exports.MAILTOEMAIL = exports.Base = undefined;\n\nvar _createTokenClass = require('./create-token-class');\n\nvar _class = require('../../utils/class');\n\nvar _text = require('./text');\n\n/******************************************************************************\n\tMulti-Tokens\n\tTokens composed of arrays of TextTokens\n******************************************************************************/\n\n// Is the given token a valid domain token?\n// Should nums be included here?\nfunction isDomainToken(token) {\n\treturn token instanceof _text.DOMAIN || token instanceof _text.TLD;\n}\n\n/**\n\tAbstract class used for manufacturing tokens of text tokens. That is rather\n\tthan the value for a token being a small string of text, it's value an array\n\tof text tokens.\n\n\tUsed for grouping together URLs, emails, hashtags, and other potential\n\tcreations.\n\n\t@class MultiToken\n\t@abstract\n*/\nvar MultiToken = (0, _createTokenClass.createTokenClass)();\n\nMultiToken.prototype = {\n\t/**\n \tString representing the type for this token\n \t@property type\n \t@default 'TOKEN'\n */\n\ttype: 'token',\n\n\t/**\n \tIs this multitoken a link?\n \t@property isLink\n \t@default false\n */\n\tisLink: false,\n\n\t/**\n \tReturn the string this token represents.\n \t@method toString\n \t@return {String}\n */\n\ttoString: function toString() {\n\t\tvar result = [];\n\t\tfor (var i = 0; i < this.v.length; i++) {\n\t\t\tresult.push(this.v[i].toString());\n\t\t}\n\t\treturn result.join('');\n\t},\n\n\n\t/**\n \tWhat should the value for this token be in the `href` HTML attribute?\n \tReturns the `.toString` value by default.\n \t\t@method toHref\n \t@return {String}\n */\n\ttoHref: function toHref() {\n\t\treturn this.toString();\n\t},\n\n\n\t/**\n \tReturns a hash of relevant values for this token, which includes keys\n \t* type - Kind of token ('url', 'email', etc.)\n \t* value - Original text\n \t* href - The value that should be added to the anchor tag's href\n \t\tattribute\n \t\t@method toObject\n \t@param {String} [protocol] `'http'` by default\n \t@return {Object}\n */\n\ttoObject: function toObject() {\n\t\tvar protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http';\n\n\t\treturn {\n\t\t\ttype: this.type,\n\t\t\tvalue: this.toString(),\n\t\t\thref: this.toHref(protocol)\n\t\t};\n\t}\n};\n\n/**\n\tRepresents an arbitrarily mailto email address with the prefix included\n\t@class MAILTO\n\t@extends MultiToken\n*/\nvar MAILTOEMAIL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n\ttype: 'email',\n\tisLink: true\n});\n\n/**\n\tRepresents a list of tokens making up a valid email address\n\t@class EMAIL\n\t@extends MultiToken\n*/\nvar EMAIL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n\ttype: 'email',\n\tisLink: true,\n\ttoHref: function toHref() {\n\t\treturn 'mailto:' + this.toString();\n\t}\n});\n\n/**\n\tRepresents some plain text\n\t@class TEXT\n\t@extends MultiToken\n*/\nvar TEXT = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), { type: 'text' });\n\n/**\n\tMulti-linebreak token - represents a line break\n\t@class NL\n\t@extends MultiToken\n*/\nvar NL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), { type: 'nl' });\n\n/**\n\tRepresents a list of tokens making up a valid URL\n\t@class URL\n\t@extends MultiToken\n*/\nvar URL = (0, _class.inherits)(MultiToken, (0, _createTokenClass.createTokenClass)(), {\n\ttype: 'url',\n\tisLink: true,\n\n\t/**\n \tLowercases relevant parts of the domain and adds the protocol if\n \trequired. Note that this will not escape unsafe HTML characters in the\n \tURL.\n \t\t@method href\n \t@param {String} protocol\n \t@return {String}\n */\n\ttoHref: function toHref() {\n\t\tvar protocol = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'http';\n\n\t\tvar hasProtocol = false;\n\t\tvar hasSlashSlash = false;\n\t\tvar tokens = this.v;\n\t\tvar result = [];\n\t\tvar i = 0;\n\n\t\t// Make the first part of the domain lowercase\n\t\t// Lowercase protocol\n\t\twhile (tokens[i] instanceof _text.PROTOCOL) {\n\t\t\thasProtocol = true;\n\t\t\tresult.push(tokens[i].toString().toLowerCase());\n\t\t\ti++;\n\t\t}\n\n\t\t// Skip slash-slash\n\t\twhile (tokens[i] instanceof _text.SLASH) {\n\t\t\thasSlashSlash = true;\n\t\t\tresult.push(tokens[i].toString());\n\t\t\ti++;\n\t\t}\n\n\t\t// Lowercase all other characters in the domain\n\t\twhile (isDomainToken(tokens[i])) {\n\t\t\tresult.push(tokens[i].toString().toLowerCase());\n\t\t\ti++;\n\t\t}\n\n\t\t// Leave all other characters as they were written\n\t\tfor (; i < tokens.length; i++) {\n\t\t\tresult.push(tokens[i].toString());\n\t\t}\n\n\t\tresult = result.join('');\n\n\t\tif (!(hasProtocol || hasSlashSlash)) {\n\t\t\tresult = protocol + '://' + result;\n\t\t}\n\n\t\treturn result;\n\t},\n\thasProtocol: function hasProtocol() {\n\t\treturn this.v[0] instanceof _text.PROTOCOL;\n\t}\n});\n\nexports.Base = MultiToken;\nexports.MAILTOEMAIL = MAILTOEMAIL;\nexports.EMAIL = EMAIL;\nexports.NL = NL;\nexports.TEXT = TEXT;\nexports.URL = URL;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}