{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\nexport var useEmojiPicker = function (state, dispatch, insertText, textareaRef, closeEmojiPickerOnClick) {\n  var emojiPickerRef = useRef(null);\n  var closeEmojiPicker = useCallback(function (event) {\n    event.preventDefault();\n    if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target)) {\n      dispatch({\n        type: 'setEmojiPickerIsOpen',\n        value: false\n      });\n    }\n  }, [emojiPickerRef]);\n  var openEmojiPicker = useCallback(function (event) {\n    event.preventDefault();\n    dispatch({\n      type: 'setEmojiPickerIsOpen',\n      value: true\n    });\n    // Prevent event from bubbling to document, so the close handler is never called for this event\n    event.stopPropagation();\n  }, []);\n  var handleEmojiKeyDown = function (event) {\n    if (event.key === ' ' || event.key === 'Enter' || event.key === 'Spacebar') {\n      event.preventDefault();\n      /**\n       * TODO: fix the below at some point because this type casting is wrong\n       * and just forced to not have warnings currently with the unknown casting\n       */\n      openEmojiPicker(event);\n    }\n  };\n  var handleEmojiEscape = function (event) {\n    if (event.key === 'Escape') {\n      dispatch({\n        type: 'setEmojiPickerIsOpen',\n        value: false\n      });\n    }\n  };\n  useEffect(function () {\n    if (state.emojiPickerIsOpen) {\n      document.addEventListener('click', closeEmojiPicker, false);\n      document.addEventListener('keydown', handleEmojiEscape);\n    }\n    return function () {\n      document.removeEventListener('click', closeEmojiPicker, false);\n      document.removeEventListener('keydown', handleEmojiEscape);\n    };\n  }, [closeEmojiPicker, state.emojiPickerIsOpen]);\n  var onSelectEmoji = useCallback(function (emoji) {\n    var _a;\n    insertText(emoji.native);\n    if (closeEmojiPickerOnClick) {\n      dispatch({\n        type: 'setEmojiPickerIsOpen',\n        value: false\n      });\n    }\n    (_a = textareaRef === null || textareaRef === void 0 ? void 0 : textareaRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  }, [insertText]);\n  return {\n    closeEmojiPicker: closeEmojiPicker,\n    emojiPickerRef: emojiPickerRef,\n    handleEmojiKeyDown: handleEmojiKeyDown,\n    onSelectEmoji: onSelectEmoji,\n    openEmojiPicker: openEmojiPicker\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useRef","useEmojiPicker","state","dispatch","insertText","textareaRef","closeEmojiPickerOnClick","emojiPickerRef","closeEmojiPicker","event","preventDefault","current","contains","target","type","value","openEmojiPicker","stopPropagation","handleEmojiKeyDown","key","handleEmojiEscape","emojiPickerIsOpen","document","addEventListener","removeEventListener","onSelectEmoji","emoji","_a","native","focus"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/Community_Chat-project/client/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useEmojiPicker.js"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nexport var useEmojiPicker = function (state, dispatch, insertText, textareaRef, closeEmojiPickerOnClick) {\n    var emojiPickerRef = useRef(null);\n    var closeEmojiPicker = useCallback(function (event) {\n        event.preventDefault();\n        if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target)) {\n            dispatch({\n                type: 'setEmojiPickerIsOpen',\n                value: false,\n            });\n        }\n    }, [emojiPickerRef]);\n    var openEmojiPicker = useCallback(function (event) {\n        event.preventDefault();\n        dispatch({\n            type: 'setEmojiPickerIsOpen',\n            value: true,\n        });\n        // Prevent event from bubbling to document, so the close handler is never called for this event\n        event.stopPropagation();\n    }, []);\n    var handleEmojiKeyDown = function (event) {\n        if (event.key === ' ' || event.key === 'Enter' || event.key === 'Spacebar') {\n            event.preventDefault();\n            /**\n             * TODO: fix the below at some point because this type casting is wrong\n             * and just forced to not have warnings currently with the unknown casting\n             */\n            openEmojiPicker(event);\n        }\n    };\n    var handleEmojiEscape = function (event) {\n        if (event.key === 'Escape') {\n            dispatch({\n                type: 'setEmojiPickerIsOpen',\n                value: false,\n            });\n        }\n    };\n    useEffect(function () {\n        if (state.emojiPickerIsOpen) {\n            document.addEventListener('click', closeEmojiPicker, false);\n            document.addEventListener('keydown', handleEmojiEscape);\n        }\n        return function () {\n            document.removeEventListener('click', closeEmojiPicker, false);\n            document.removeEventListener('keydown', handleEmojiEscape);\n        };\n    }, [closeEmojiPicker, state.emojiPickerIsOpen]);\n    var onSelectEmoji = useCallback(function (emoji) {\n        var _a;\n        insertText(emoji.native);\n        if (closeEmojiPickerOnClick) {\n            dispatch({\n                type: 'setEmojiPickerIsOpen',\n                value: false,\n            });\n        }\n        (_a = textareaRef === null || textareaRef === void 0 ? void 0 : textareaRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }, [insertText]);\n    return {\n        closeEmojiPicker: closeEmojiPicker,\n        emojiPickerRef: emojiPickerRef,\n        handleEmojiKeyDown: handleEmojiKeyDown,\n        onSelectEmoji: onSelectEmoji,\n        openEmojiPicker: openEmojiPicker,\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}