{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport React, { useContext } from 'react';\nexport var ComponentContext = React.createContext(undefined);\nexport var ComponentProvider = function (_a) {\n  var children = _a.children,\n    value = _a.value;\n  return React.createElement(ComponentContext.Provider, {\n    value: value\n  }, children);\n};\nexport var useComponentContext = function (componentName) {\n  var contextValue = useContext(ComponentContext);\n  if (!contextValue) {\n    console.warn(\"The useComponentContext hook was called outside of the ComponentContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the \".concat(componentName, \" component.\"));\n    return {};\n  }\n  return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if ComponentContext\n * typing is desired while using the HOC withComponentContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport var withComponentContext = function (Component) {\n  var WithComponentContextComponent = function (props) {\n    var componentContext = useComponentContext();\n    return React.createElement(Component, __assign({}, props, componentContext));\n  };\n  WithComponentContextComponent.displayName = (Component.displayName || Component.name || 'Component').replace('Base', '');\n  return WithComponentContextComponent;\n};","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","React","useContext","ComponentContext","createContext","undefined","ComponentProvider","_a","children","value","createElement","Provider","useComponentContext","componentName","contextValue","console","warn","concat","withComponentContext","Component","WithComponentContextComponent","props","componentContext","displayName","name","replace"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/Community_Chat-project/client/node_modules/stream-chat-react/dist/context/ComponentContext.js"],"sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nimport React, { useContext } from 'react';\nexport var ComponentContext = React.createContext(undefined);\nexport var ComponentProvider = function (_a) {\n    var children = _a.children, value = _a.value;\n    return (React.createElement(ComponentContext.Provider, { value: value }, children));\n};\nexport var useComponentContext = function (componentName) {\n    var contextValue = useContext(ComponentContext);\n    if (!contextValue) {\n        console.warn(\"The useComponentContext hook was called outside of the ComponentContext provider. Make sure this hook is called within a child of the Channel component. The errored call is located in the \".concat(componentName, \" component.\"));\n        return {};\n    }\n    return contextValue;\n};\n/**\n * Typescript currently does not support partial inference, so if ComponentContext\n * typing is desired while using the HOC withComponentContext, the Props for the\n * wrapped component must be provided as the first generic.\n */\nexport var withComponentContext = function (Component) {\n    var WithComponentContextComponent = function (props) {\n        var componentContext = useComponentContext();\n        return React.createElement(Component, __assign({}, props, componentContext));\n    };\n    WithComponentContextComponent.displayName = (Component.displayName ||\n        Component.name ||\n        'Component').replace('Base', '');\n    return WithComponentContextComponent;\n};\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAI,IAAI,IAAI,IAAI,CAACA,QAAQ,IAAK,YAAY;EAClDA,QAAQ,GAAGC,MAAM,CAACC,MAAM,IAAI,UAASC,CAAC,EAAE;IACpC,KAAK,IAAIC,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGC,SAAS,CAACC,MAAM,EAAEH,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;MACjDD,CAAC,GAAGG,SAAS,CAACF,CAAC,CAAC;MAChB,KAAK,IAAII,CAAC,IAAIL,CAAC,EAAE,IAAIH,MAAM,CAACS,SAAS,CAACC,cAAc,CAACC,IAAI,CAACR,CAAC,EAAEK,CAAC,CAAC,EAC3DN,CAAC,CAACM,CAAC,CAAC,GAAGL,CAAC,CAACK,CAAC,CAAC;IACnB;IACA,OAAON,CAAC;EACZ,CAAC;EACD,OAAOH,QAAQ,CAACa,KAAK,CAAC,IAAI,EAAEN,SAAS,CAAC;AAC1C,CAAC;AACD,OAAOO,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,OAAO,IAAIC,gBAAgB,GAAGF,KAAK,CAACG,aAAa,CAACC,SAAS,CAAC;AAC5D,OAAO,IAAIC,iBAAiB,GAAG,SAAAA,CAAUC,EAAE,EAAE;EACzC,IAAIC,QAAQ,GAAGD,EAAE,CAACC,QAAQ;IAAEC,KAAK,GAAGF,EAAE,CAACE,KAAK;EAC5C,OAAQR,KAAK,CAACS,aAAa,CAACP,gBAAgB,CAACQ,QAAQ,EAAE;IAAEF,KAAK,EAAEA;EAAM,CAAC,EAAED,QAAQ,CAAC;AACtF,CAAC;AACD,OAAO,IAAII,mBAAmB,GAAG,SAAAA,CAAUC,aAAa,EAAE;EACtD,IAAIC,YAAY,GAAGZ,UAAU,CAACC,gBAAgB,CAAC;EAC/C,IAAI,CAACW,YAAY,EAAE;IACfC,OAAO,CAACC,IAAI,CAAC,8LAA8L,CAACC,MAAM,CAACJ,aAAa,EAAE,aAAa,CAAC,CAAC;IACjP,OAAO,CAAC,CAAC;EACb;EACA,OAAOC,YAAY;AACvB,CAAC;AACD;AACA;AACA;AACA;AACA;AACA,OAAO,IAAII,oBAAoB,GAAG,SAAAA,CAAUC,SAAS,EAAE;EACnD,IAAIC,6BAA6B,GAAG,SAAAA,CAAUC,KAAK,EAAE;IACjD,IAAIC,gBAAgB,GAAGV,mBAAmB,CAAC,CAAC;IAC5C,OAAOX,KAAK,CAACS,aAAa,CAACS,SAAS,EAAEhC,QAAQ,CAAC,CAAC,CAAC,EAAEkC,KAAK,EAAEC,gBAAgB,CAAC,CAAC;EAChF,CAAC;EACDF,6BAA6B,CAACG,WAAW,GAAG,CAACJ,SAAS,CAACI,WAAW,IAC9DJ,SAAS,CAACK,IAAI,IACd,WAAW,EAAEC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;EACpC,OAAOL,6BAA6B;AACxC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}