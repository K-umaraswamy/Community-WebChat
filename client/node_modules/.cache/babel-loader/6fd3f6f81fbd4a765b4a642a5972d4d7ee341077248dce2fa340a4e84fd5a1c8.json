{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.start = exports.run = exports.TOKENS = exports.State = undefined;\nvar _state = require('./state');\nvar _multi = require('./tokens/multi');\nvar MULTI_TOKENS = _interopRequireWildcard(_multi);\nvar _text = require('./tokens/text');\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\n\n/**\n\tNot exactly parser, more like the second-stage scanner (although we can\n\ttheoretically hotswap the code here with a real parser in the future... but\n\tfor a little URL-finding utility abstract syntax trees may be a little\n\toverkill).\n\n\tURL format: http://en.wikipedia.org/wiki/URI_scheme\n\tEmail format: http://en.wikipedia.org/wiki/Email_address (links to RFC in\n\treference)\n\n\t@module linkify\n\t@submodule parser\n\t@main parser\n*/\n\nvar makeState = function makeState(tokenClass) {\n  return new _state.TokenState(tokenClass);\n};\n\n// The universal starting state.\nvar S_START = makeState();\n\n// Intermediate states for URLs. Note that domains that begin with a protocol\n// are treated slighly differently from those that don't.\nvar S_PROTOCOL = makeState(); // e.g., 'http:'\nvar S_MAILTO = makeState(); // 'mailto:'\nvar S_PROTOCOL_SLASH = makeState(); // e.g., '/', 'http:/''\nvar S_PROTOCOL_SLASH_SLASH = makeState(); // e.g., '//', 'http://'\nvar S_DOMAIN = makeState(); // parsed string ends with a potential domain name (A)\nvar S_DOMAIN_DOT = makeState(); // (A) domain followed by DOT\nvar S_TLD = makeState(_multi.URL); // (A) Simplest possible URL with no query string\nvar S_TLD_COLON = makeState(); // (A) URL followed by colon (potential port number here)\nvar S_TLD_PORT = makeState(_multi.URL); // TLD followed by a port number\nvar S_URL = makeState(_multi.URL); // Long URL with optional port and maybe query string\nvar S_URL_NON_ACCEPTING = makeState(); // URL followed by some symbols (will not be part of the final URL)\nvar S_URL_OPENBRACE = makeState(); // URL followed by {\nvar S_URL_OPENBRACKET = makeState(); // URL followed by [\nvar S_URL_OPENANGLEBRACKET = makeState(); // URL followed by <\nvar S_URL_OPENPAREN = makeState(); // URL followed by (\nvar S_URL_OPENBRACE_Q = makeState(_multi.URL); // URL followed by { and some symbols that the URL can end it\nvar S_URL_OPENBRACKET_Q = makeState(_multi.URL); // URL followed by [ and some symbols that the URL can end it\nvar S_URL_OPENANGLEBRACKET_Q = makeState(_multi.URL); // URL followed by < and some symbols that the URL can end it\nvar S_URL_OPENPAREN_Q = makeState(_multi.URL); // URL followed by ( and some symbols that the URL can end it\nvar S_URL_OPENBRACE_SYMS = makeState(); // S_URL_OPENBRACE_Q followed by some symbols it cannot end it\nvar S_URL_OPENBRACKET_SYMS = makeState(); // S_URL_OPENBRACKET_Q followed by some symbols it cannot end it\nvar S_URL_OPENANGLEBRACKET_SYMS = makeState(); // S_URL_OPENANGLEBRACKET_Q followed by some symbols it cannot end it\nvar S_URL_OPENPAREN_SYMS = makeState(); // S_URL_OPENPAREN_Q followed by some symbols it cannot end it\nvar S_EMAIL_DOMAIN = makeState(); // parsed string starts with local email info + @ with a potential domain name (C)\nvar S_EMAIL_DOMAIN_DOT = makeState(); // (C) domain followed by DOT\nvar S_EMAIL = makeState(_multi.EMAIL); // (C) Possible email address (could have more tlds)\nvar S_EMAIL_COLON = makeState(); // (C) URL followed by colon (potential port number here)\nvar S_EMAIL_PORT = makeState(_multi.EMAIL); // (C) Email address with a port\nvar S_MAILTO_EMAIL = makeState(_multi.MAILTOEMAIL); // Email that begins with the mailto prefix (D)\nvar S_MAILTO_EMAIL_NON_ACCEPTING = makeState(); // (D) Followed by some non-query string chars\nvar S_LOCALPART = makeState(); // Local part of the email address\nvar S_LOCALPART_AT = makeState(); // Local part of the email address plus @\nvar S_LOCALPART_DOT = makeState(); // Local part of the email address plus '.' (localpart cannot end in .)\nvar S_NL = makeState(_multi.NL); // single new line\n\n// Make path from start to protocol (with '//')\nS_START.on(_text.NL, S_NL).on(_text.PROTOCOL, S_PROTOCOL).on(_text.MAILTO, S_MAILTO).on(_text.SLASH, S_PROTOCOL_SLASH);\nS_PROTOCOL.on(_text.SLASH, S_PROTOCOL_SLASH);\nS_PROTOCOL_SLASH.on(_text.SLASH, S_PROTOCOL_SLASH_SLASH);\n\n// The very first potential domain name\nS_START.on(_text.TLD, S_DOMAIN).on(_text.DOMAIN, S_DOMAIN).on(_text.LOCALHOST, S_TLD).on(_text.NUM, S_DOMAIN);\n\n// Force URL for protocol followed by anything sane\nS_PROTOCOL_SLASH_SLASH.on(_text.TLD, S_URL).on(_text.DOMAIN, S_URL).on(_text.NUM, S_URL).on(_text.LOCALHOST, S_URL);\n\n// Account for dots and hyphens\n// hyphens are usually parts of domain names\nS_DOMAIN.on(_text.DOT, S_DOMAIN_DOT);\nS_EMAIL_DOMAIN.on(_text.DOT, S_EMAIL_DOMAIN_DOT);\n\n// Hyphen can jump back to a domain name\n\n// After the first domain and a dot, we can find either a URL or another domain\nS_DOMAIN_DOT.on(_text.TLD, S_TLD).on(_text.DOMAIN, S_DOMAIN).on(_text.NUM, S_DOMAIN).on(_text.LOCALHOST, S_DOMAIN);\nS_EMAIL_DOMAIN_DOT.on(_text.TLD, S_EMAIL).on(_text.DOMAIN, S_EMAIL_DOMAIN).on(_text.NUM, S_EMAIL_DOMAIN).on(_text.LOCALHOST, S_EMAIL_DOMAIN);\n\n// S_TLD accepts! But the URL could be longer, try to find a match greedily\n// The `run` function should be able to \"rollback\" to the accepting state\nS_TLD.on(_text.DOT, S_DOMAIN_DOT);\nS_EMAIL.on(_text.DOT, S_EMAIL_DOMAIN_DOT);\n\n// Become real URLs after `SLASH` or `COLON NUM SLASH`\n// Here PSS and non-PSS converge\nS_TLD.on(_text.COLON, S_TLD_COLON).on(_text.SLASH, S_URL);\nS_TLD_COLON.on(_text.NUM, S_TLD_PORT);\nS_TLD_PORT.on(_text.SLASH, S_URL);\nS_EMAIL.on(_text.COLON, S_EMAIL_COLON);\nS_EMAIL_COLON.on(_text.NUM, S_EMAIL_PORT);\n\n// Types of characters the URL can definitely end in\nvar qsAccepting = [_text.DOMAIN, _text.AT, _text.LOCALHOST, _text.NUM, _text.PLUS, _text.POUND, _text.PROTOCOL, _text.SLASH, _text.TLD, _text.UNDERSCORE, _text.SYM, _text.AMPERSAND];\n\n// Types of tokens that can follow a URL and be part of the query string\n// but cannot be the very last characters\n// Characters that cannot appear in the URL at all should be excluded\nvar qsNonAccepting = [_text.COLON, _text.DOT, _text.QUERY, _text.PUNCTUATION, _text.CLOSEBRACE, _text.CLOSEBRACKET, _text.CLOSEANGLEBRACKET, _text.CLOSEPAREN, _text.OPENBRACE, _text.OPENBRACKET, _text.OPENANGLEBRACKET, _text.OPENPAREN];\n\n// These states are responsible primarily for determining whether or not to\n// include the final round bracket.\n\n// URL, followed by an opening bracket\nS_URL.on(_text.OPENBRACE, S_URL_OPENBRACE).on(_text.OPENBRACKET, S_URL_OPENBRACKET).on(_text.OPENANGLEBRACKET, S_URL_OPENANGLEBRACKET).on(_text.OPENPAREN, S_URL_OPENPAREN);\n\n// URL with extra symbols at the end, followed by an opening bracket\nS_URL_NON_ACCEPTING.on(_text.OPENBRACE, S_URL_OPENBRACE).on(_text.OPENBRACKET, S_URL_OPENBRACKET).on(_text.OPENANGLEBRACKET, S_URL_OPENANGLEBRACKET).on(_text.OPENPAREN, S_URL_OPENPAREN);\n\n// Closing bracket component. This character WILL be included in the URL\nS_URL_OPENBRACE.on(_text.CLOSEBRACE, S_URL);\nS_URL_OPENBRACKET.on(_text.CLOSEBRACKET, S_URL);\nS_URL_OPENANGLEBRACKET.on(_text.CLOSEANGLEBRACKET, S_URL);\nS_URL_OPENPAREN.on(_text.CLOSEPAREN, S_URL);\nS_URL_OPENBRACE_Q.on(_text.CLOSEBRACE, S_URL);\nS_URL_OPENBRACKET_Q.on(_text.CLOSEBRACKET, S_URL);\nS_URL_OPENANGLEBRACKET_Q.on(_text.CLOSEANGLEBRACKET, S_URL);\nS_URL_OPENPAREN_Q.on(_text.CLOSEPAREN, S_URL);\nS_URL_OPENBRACE_SYMS.on(_text.CLOSEBRACE, S_URL);\nS_URL_OPENBRACKET_SYMS.on(_text.CLOSEBRACKET, S_URL);\nS_URL_OPENANGLEBRACKET_SYMS.on(_text.CLOSEANGLEBRACKET, S_URL);\nS_URL_OPENPAREN_SYMS.on(_text.CLOSEPAREN, S_URL);\n\n// URL that beings with an opening bracket, followed by a symbols.\n// Note that the final state can still be `S_URL_OPENBRACE_Q` (if the URL only\n// has a single opening bracket for some reason).\nS_URL_OPENBRACE.on(qsAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET.on(qsAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN.on(qsAccepting, S_URL_OPENPAREN_Q);\nS_URL_OPENBRACE.on(qsNonAccepting, S_URL_OPENBRACE_SYMS);\nS_URL_OPENBRACKET.on(qsNonAccepting, S_URL_OPENBRACKET_SYMS);\nS_URL_OPENANGLEBRACKET.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_SYMS);\nS_URL_OPENPAREN.on(qsNonAccepting, S_URL_OPENPAREN_SYMS);\n\n// URL that begins with an opening bracket, followed by some symbols\nS_URL_OPENBRACE_Q.on(qsAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET_Q.on(qsAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET_Q.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN_Q.on(qsAccepting, S_URL_OPENPAREN_Q);\nS_URL_OPENBRACE_Q.on(qsNonAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET_Q.on(qsNonAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET_Q.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN_Q.on(qsNonAccepting, S_URL_OPENPAREN_Q);\nS_URL_OPENBRACE_SYMS.on(qsAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET_SYMS.on(qsAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET_SYMS.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN_SYMS.on(qsAccepting, S_URL_OPENPAREN_Q);\nS_URL_OPENBRACE_SYMS.on(qsNonAccepting, S_URL_OPENBRACE_SYMS);\nS_URL_OPENBRACKET_SYMS.on(qsNonAccepting, S_URL_OPENBRACKET_SYMS);\nS_URL_OPENANGLEBRACKET_SYMS.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_SYMS);\nS_URL_OPENPAREN_SYMS.on(qsNonAccepting, S_URL_OPENPAREN_SYMS);\n\n// Account for the query string\nS_URL.on(qsAccepting, S_URL);\nS_URL_NON_ACCEPTING.on(qsAccepting, S_URL);\nS_URL.on(qsNonAccepting, S_URL_NON_ACCEPTING);\nS_URL_NON_ACCEPTING.on(qsNonAccepting, S_URL_NON_ACCEPTING);\n\n// Email address-specific state definitions\n// Note: We are not allowing '/' in email addresses since this would interfere\n// with real URLs\n\n// For addresses with the mailto prefix\n// 'mailto:' followed by anything sane is a valid email\nS_MAILTO.on(_text.TLD, S_MAILTO_EMAIL).on(_text.DOMAIN, S_MAILTO_EMAIL).on(_text.NUM, S_MAILTO_EMAIL).on(_text.LOCALHOST, S_MAILTO_EMAIL);\n\n// Greedily get more potential valid email values\nS_MAILTO_EMAIL.on(qsAccepting, S_MAILTO_EMAIL).on(qsNonAccepting, S_MAILTO_EMAIL_NON_ACCEPTING);\nS_MAILTO_EMAIL_NON_ACCEPTING.on(qsAccepting, S_MAILTO_EMAIL).on(qsNonAccepting, S_MAILTO_EMAIL_NON_ACCEPTING);\n\n// For addresses without the mailto prefix\n// Tokens allowed in the localpart of the email\nvar localpartAccepting = [_text.DOMAIN, _text.NUM, _text.PLUS, _text.POUND, _text.QUERY, _text.UNDERSCORE, _text.SYM, _text.AMPERSAND, _text.TLD];\n\n// Some of the tokens in `localpartAccepting` are already accounted for here and\n// will not be overwritten (don't worry)\nS_DOMAIN.on(localpartAccepting, S_LOCALPART).on(_text.AT, S_LOCALPART_AT);\nS_TLD.on(localpartAccepting, S_LOCALPART).on(_text.AT, S_LOCALPART_AT);\nS_DOMAIN_DOT.on(localpartAccepting, S_LOCALPART);\n\n// Okay we're on a localpart. Now what?\n// TODO: IP addresses and what if the email starts with numbers?\nS_LOCALPART.on(localpartAccepting, S_LOCALPART).on(_text.AT, S_LOCALPART_AT) // close to an email address now\n.on(_text.DOT, S_LOCALPART_DOT);\nS_LOCALPART_DOT.on(localpartAccepting, S_LOCALPART);\nS_LOCALPART_AT.on(_text.TLD, S_EMAIL_DOMAIN).on(_text.DOMAIN, S_EMAIL_DOMAIN).on(_text.LOCALHOST, S_EMAIL);\n// States following `@` defined above\n\nvar run = function run(tokens) {\n  var len = tokens.length;\n  var cursor = 0;\n  var multis = [];\n  var textTokens = [];\n  while (cursor < len) {\n    var state = S_START;\n    var secondState = null;\n    var nextState = null;\n    var multiLength = 0;\n    var latestAccepting = null;\n    var sinceAccepts = -1;\n    while (cursor < len && !(secondState = state.next(tokens[cursor]))) {\n      // Starting tokens with nowhere to jump to.\n      // Consider these to be just plain text\n      textTokens.push(tokens[cursor++]);\n    }\n    while (cursor < len && (nextState = secondState || state.next(tokens[cursor]))) {\n      // Get the next state\n      secondState = null;\n      state = nextState;\n\n      // Keep track of the latest accepting state\n      if (state.accepts()) {\n        sinceAccepts = 0;\n        latestAccepting = state;\n      } else if (sinceAccepts >= 0) {\n        sinceAccepts++;\n      }\n      cursor++;\n      multiLength++;\n    }\n    if (sinceAccepts < 0) {\n      // No accepting state was found, part of a regular text token\n      // Add all the tokens we looked at to the text tokens array\n      for (var i = cursor - multiLength; i < cursor; i++) {\n        textTokens.push(tokens[i]);\n      }\n    } else {\n      // Accepting state!\n\n      // First close off the textTokens (if available)\n      if (textTokens.length > 0) {\n        multis.push(new _multi.TEXT(textTokens));\n        textTokens = [];\n      }\n\n      // Roll back to the latest accepting state\n      cursor -= sinceAccepts;\n      multiLength -= sinceAccepts;\n\n      // Create a new multitoken\n      var MULTI = latestAccepting.emit();\n      multis.push(new MULTI(tokens.slice(cursor - multiLength, cursor)));\n    }\n  }\n\n  // Finally close off the textTokens (if available)\n  if (textTokens.length > 0) {\n    multis.push(new _multi.TEXT(textTokens));\n  }\n  return multis;\n};\nexports.State = _state.TokenState;\nexports.TOKENS = MULTI_TOKENS;\nexports.run = run;\nexports.start = S_START;","map":{"version":3,"names":["exports","__esModule","start","run","TOKENS","State","undefined","_state","require","_multi","MULTI_TOKENS","_interopRequireWildcard","_text","obj","newObj","key","Object","prototype","hasOwnProperty","call","default","makeState","tokenClass","TokenState","S_START","S_PROTOCOL","S_MAILTO","S_PROTOCOL_SLASH","S_PROTOCOL_SLASH_SLASH","S_DOMAIN","S_DOMAIN_DOT","S_TLD","URL","S_TLD_COLON","S_TLD_PORT","S_URL","S_URL_NON_ACCEPTING","S_URL_OPENBRACE","S_URL_OPENBRACKET","S_URL_OPENANGLEBRACKET","S_URL_OPENPAREN","S_URL_OPENBRACE_Q","S_URL_OPENBRACKET_Q","S_URL_OPENANGLEBRACKET_Q","S_URL_OPENPAREN_Q","S_URL_OPENBRACE_SYMS","S_URL_OPENBRACKET_SYMS","S_URL_OPENANGLEBRACKET_SYMS","S_URL_OPENPAREN_SYMS","S_EMAIL_DOMAIN","S_EMAIL_DOMAIN_DOT","S_EMAIL","EMAIL","S_EMAIL_COLON","S_EMAIL_PORT","S_MAILTO_EMAIL","MAILTOEMAIL","S_MAILTO_EMAIL_NON_ACCEPTING","S_LOCALPART","S_LOCALPART_AT","S_LOCALPART_DOT","S_NL","NL","on","PROTOCOL","MAILTO","SLASH","TLD","DOMAIN","LOCALHOST","NUM","DOT","COLON","qsAccepting","AT","PLUS","POUND","UNDERSCORE","SYM","AMPERSAND","qsNonAccepting","QUERY","PUNCTUATION","CLOSEBRACE","CLOSEBRACKET","CLOSEANGLEBRACKET","CLOSEPAREN","OPENBRACE","OPENBRACKET","OPENANGLEBRACKET","OPENPAREN","localpartAccepting","tokens","len","length","cursor","multis","textTokens","state","secondState","nextState","multiLength","latestAccepting","sinceAccepts","next","push","accepts","i","TEXT","MULTI","emit","slice"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/Community_Chat-project/client/node_modules/mml-react/node_modules/linkifyjs/lib/linkify/core/parser.js"],"sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.start = exports.run = exports.TOKENS = exports.State = undefined;\n\nvar _state = require('./state');\n\nvar _multi = require('./tokens/multi');\n\nvar MULTI_TOKENS = _interopRequireWildcard(_multi);\n\nvar _text = require('./tokens/text');\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\n/**\n\tNot exactly parser, more like the second-stage scanner (although we can\n\ttheoretically hotswap the code here with a real parser in the future... but\n\tfor a little URL-finding utility abstract syntax trees may be a little\n\toverkill).\n\n\tURL format: http://en.wikipedia.org/wiki/URI_scheme\n\tEmail format: http://en.wikipedia.org/wiki/Email_address (links to RFC in\n\treference)\n\n\t@module linkify\n\t@submodule parser\n\t@main parser\n*/\n\nvar makeState = function makeState(tokenClass) {\n\treturn new _state.TokenState(tokenClass);\n};\n\n// The universal starting state.\nvar S_START = makeState();\n\n// Intermediate states for URLs. Note that domains that begin with a protocol\n// are treated slighly differently from those that don't.\nvar S_PROTOCOL = makeState(); // e.g., 'http:'\nvar S_MAILTO = makeState(); // 'mailto:'\nvar S_PROTOCOL_SLASH = makeState(); // e.g., '/', 'http:/''\nvar S_PROTOCOL_SLASH_SLASH = makeState(); // e.g., '//', 'http://'\nvar S_DOMAIN = makeState(); // parsed string ends with a potential domain name (A)\nvar S_DOMAIN_DOT = makeState(); // (A) domain followed by DOT\nvar S_TLD = makeState(_multi.URL); // (A) Simplest possible URL with no query string\nvar S_TLD_COLON = makeState(); // (A) URL followed by colon (potential port number here)\nvar S_TLD_PORT = makeState(_multi.URL); // TLD followed by a port number\nvar S_URL = makeState(_multi.URL); // Long URL with optional port and maybe query string\nvar S_URL_NON_ACCEPTING = makeState(); // URL followed by some symbols (will not be part of the final URL)\nvar S_URL_OPENBRACE = makeState(); // URL followed by {\nvar S_URL_OPENBRACKET = makeState(); // URL followed by [\nvar S_URL_OPENANGLEBRACKET = makeState(); // URL followed by <\nvar S_URL_OPENPAREN = makeState(); // URL followed by (\nvar S_URL_OPENBRACE_Q = makeState(_multi.URL); // URL followed by { and some symbols that the URL can end it\nvar S_URL_OPENBRACKET_Q = makeState(_multi.URL); // URL followed by [ and some symbols that the URL can end it\nvar S_URL_OPENANGLEBRACKET_Q = makeState(_multi.URL); // URL followed by < and some symbols that the URL can end it\nvar S_URL_OPENPAREN_Q = makeState(_multi.URL); // URL followed by ( and some symbols that the URL can end it\nvar S_URL_OPENBRACE_SYMS = makeState(); // S_URL_OPENBRACE_Q followed by some symbols it cannot end it\nvar S_URL_OPENBRACKET_SYMS = makeState(); // S_URL_OPENBRACKET_Q followed by some symbols it cannot end it\nvar S_URL_OPENANGLEBRACKET_SYMS = makeState(); // S_URL_OPENANGLEBRACKET_Q followed by some symbols it cannot end it\nvar S_URL_OPENPAREN_SYMS = makeState(); // S_URL_OPENPAREN_Q followed by some symbols it cannot end it\nvar S_EMAIL_DOMAIN = makeState(); // parsed string starts with local email info + @ with a potential domain name (C)\nvar S_EMAIL_DOMAIN_DOT = makeState(); // (C) domain followed by DOT\nvar S_EMAIL = makeState(_multi.EMAIL); // (C) Possible email address (could have more tlds)\nvar S_EMAIL_COLON = makeState(); // (C) URL followed by colon (potential port number here)\nvar S_EMAIL_PORT = makeState(_multi.EMAIL); // (C) Email address with a port\nvar S_MAILTO_EMAIL = makeState(_multi.MAILTOEMAIL); // Email that begins with the mailto prefix (D)\nvar S_MAILTO_EMAIL_NON_ACCEPTING = makeState(); // (D) Followed by some non-query string chars\nvar S_LOCALPART = makeState(); // Local part of the email address\nvar S_LOCALPART_AT = makeState(); // Local part of the email address plus @\nvar S_LOCALPART_DOT = makeState(); // Local part of the email address plus '.' (localpart cannot end in .)\nvar S_NL = makeState(_multi.NL); // single new line\n\n// Make path from start to protocol (with '//')\nS_START.on(_text.NL, S_NL).on(_text.PROTOCOL, S_PROTOCOL).on(_text.MAILTO, S_MAILTO).on(_text.SLASH, S_PROTOCOL_SLASH);\n\nS_PROTOCOL.on(_text.SLASH, S_PROTOCOL_SLASH);\nS_PROTOCOL_SLASH.on(_text.SLASH, S_PROTOCOL_SLASH_SLASH);\n\n// The very first potential domain name\nS_START.on(_text.TLD, S_DOMAIN).on(_text.DOMAIN, S_DOMAIN).on(_text.LOCALHOST, S_TLD).on(_text.NUM, S_DOMAIN);\n\n// Force URL for protocol followed by anything sane\nS_PROTOCOL_SLASH_SLASH.on(_text.TLD, S_URL).on(_text.DOMAIN, S_URL).on(_text.NUM, S_URL).on(_text.LOCALHOST, S_URL);\n\n// Account for dots and hyphens\n// hyphens are usually parts of domain names\nS_DOMAIN.on(_text.DOT, S_DOMAIN_DOT);\nS_EMAIL_DOMAIN.on(_text.DOT, S_EMAIL_DOMAIN_DOT);\n\n// Hyphen can jump back to a domain name\n\n// After the first domain and a dot, we can find either a URL or another domain\nS_DOMAIN_DOT.on(_text.TLD, S_TLD).on(_text.DOMAIN, S_DOMAIN).on(_text.NUM, S_DOMAIN).on(_text.LOCALHOST, S_DOMAIN);\n\nS_EMAIL_DOMAIN_DOT.on(_text.TLD, S_EMAIL).on(_text.DOMAIN, S_EMAIL_DOMAIN).on(_text.NUM, S_EMAIL_DOMAIN).on(_text.LOCALHOST, S_EMAIL_DOMAIN);\n\n// S_TLD accepts! But the URL could be longer, try to find a match greedily\n// The `run` function should be able to \"rollback\" to the accepting state\nS_TLD.on(_text.DOT, S_DOMAIN_DOT);\nS_EMAIL.on(_text.DOT, S_EMAIL_DOMAIN_DOT);\n\n// Become real URLs after `SLASH` or `COLON NUM SLASH`\n// Here PSS and non-PSS converge\nS_TLD.on(_text.COLON, S_TLD_COLON).on(_text.SLASH, S_URL);\nS_TLD_COLON.on(_text.NUM, S_TLD_PORT);\nS_TLD_PORT.on(_text.SLASH, S_URL);\nS_EMAIL.on(_text.COLON, S_EMAIL_COLON);\nS_EMAIL_COLON.on(_text.NUM, S_EMAIL_PORT);\n\n// Types of characters the URL can definitely end in\nvar qsAccepting = [_text.DOMAIN, _text.AT, _text.LOCALHOST, _text.NUM, _text.PLUS, _text.POUND, _text.PROTOCOL, _text.SLASH, _text.TLD, _text.UNDERSCORE, _text.SYM, _text.AMPERSAND];\n\n// Types of tokens that can follow a URL and be part of the query string\n// but cannot be the very last characters\n// Characters that cannot appear in the URL at all should be excluded\nvar qsNonAccepting = [_text.COLON, _text.DOT, _text.QUERY, _text.PUNCTUATION, _text.CLOSEBRACE, _text.CLOSEBRACKET, _text.CLOSEANGLEBRACKET, _text.CLOSEPAREN, _text.OPENBRACE, _text.OPENBRACKET, _text.OPENANGLEBRACKET, _text.OPENPAREN];\n\n// These states are responsible primarily for determining whether or not to\n// include the final round bracket.\n\n// URL, followed by an opening bracket\nS_URL.on(_text.OPENBRACE, S_URL_OPENBRACE).on(_text.OPENBRACKET, S_URL_OPENBRACKET).on(_text.OPENANGLEBRACKET, S_URL_OPENANGLEBRACKET).on(_text.OPENPAREN, S_URL_OPENPAREN);\n\n// URL with extra symbols at the end, followed by an opening bracket\nS_URL_NON_ACCEPTING.on(_text.OPENBRACE, S_URL_OPENBRACE).on(_text.OPENBRACKET, S_URL_OPENBRACKET).on(_text.OPENANGLEBRACKET, S_URL_OPENANGLEBRACKET).on(_text.OPENPAREN, S_URL_OPENPAREN);\n\n// Closing bracket component. This character WILL be included in the URL\nS_URL_OPENBRACE.on(_text.CLOSEBRACE, S_URL);\nS_URL_OPENBRACKET.on(_text.CLOSEBRACKET, S_URL);\nS_URL_OPENANGLEBRACKET.on(_text.CLOSEANGLEBRACKET, S_URL);\nS_URL_OPENPAREN.on(_text.CLOSEPAREN, S_URL);\nS_URL_OPENBRACE_Q.on(_text.CLOSEBRACE, S_URL);\nS_URL_OPENBRACKET_Q.on(_text.CLOSEBRACKET, S_URL);\nS_URL_OPENANGLEBRACKET_Q.on(_text.CLOSEANGLEBRACKET, S_URL);\nS_URL_OPENPAREN_Q.on(_text.CLOSEPAREN, S_URL);\nS_URL_OPENBRACE_SYMS.on(_text.CLOSEBRACE, S_URL);\nS_URL_OPENBRACKET_SYMS.on(_text.CLOSEBRACKET, S_URL);\nS_URL_OPENANGLEBRACKET_SYMS.on(_text.CLOSEANGLEBRACKET, S_URL);\nS_URL_OPENPAREN_SYMS.on(_text.CLOSEPAREN, S_URL);\n\n// URL that beings with an opening bracket, followed by a symbols.\n// Note that the final state can still be `S_URL_OPENBRACE_Q` (if the URL only\n// has a single opening bracket for some reason).\nS_URL_OPENBRACE.on(qsAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET.on(qsAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN.on(qsAccepting, S_URL_OPENPAREN_Q);\nS_URL_OPENBRACE.on(qsNonAccepting, S_URL_OPENBRACE_SYMS);\nS_URL_OPENBRACKET.on(qsNonAccepting, S_URL_OPENBRACKET_SYMS);\nS_URL_OPENANGLEBRACKET.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_SYMS);\nS_URL_OPENPAREN.on(qsNonAccepting, S_URL_OPENPAREN_SYMS);\n\n// URL that begins with an opening bracket, followed by some symbols\nS_URL_OPENBRACE_Q.on(qsAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET_Q.on(qsAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET_Q.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN_Q.on(qsAccepting, S_URL_OPENPAREN_Q);\nS_URL_OPENBRACE_Q.on(qsNonAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET_Q.on(qsNonAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET_Q.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN_Q.on(qsNonAccepting, S_URL_OPENPAREN_Q);\n\nS_URL_OPENBRACE_SYMS.on(qsAccepting, S_URL_OPENBRACE_Q);\nS_URL_OPENBRACKET_SYMS.on(qsAccepting, S_URL_OPENBRACKET_Q);\nS_URL_OPENANGLEBRACKET_SYMS.on(qsAccepting, S_URL_OPENANGLEBRACKET_Q);\nS_URL_OPENPAREN_SYMS.on(qsAccepting, S_URL_OPENPAREN_Q);\nS_URL_OPENBRACE_SYMS.on(qsNonAccepting, S_URL_OPENBRACE_SYMS);\nS_URL_OPENBRACKET_SYMS.on(qsNonAccepting, S_URL_OPENBRACKET_SYMS);\nS_URL_OPENANGLEBRACKET_SYMS.on(qsNonAccepting, S_URL_OPENANGLEBRACKET_SYMS);\nS_URL_OPENPAREN_SYMS.on(qsNonAccepting, S_URL_OPENPAREN_SYMS);\n\n// Account for the query string\nS_URL.on(qsAccepting, S_URL);\nS_URL_NON_ACCEPTING.on(qsAccepting, S_URL);\n\nS_URL.on(qsNonAccepting, S_URL_NON_ACCEPTING);\nS_URL_NON_ACCEPTING.on(qsNonAccepting, S_URL_NON_ACCEPTING);\n\n// Email address-specific state definitions\n// Note: We are not allowing '/' in email addresses since this would interfere\n// with real URLs\n\n// For addresses with the mailto prefix\n// 'mailto:' followed by anything sane is a valid email\nS_MAILTO.on(_text.TLD, S_MAILTO_EMAIL).on(_text.DOMAIN, S_MAILTO_EMAIL).on(_text.NUM, S_MAILTO_EMAIL).on(_text.LOCALHOST, S_MAILTO_EMAIL);\n\n// Greedily get more potential valid email values\nS_MAILTO_EMAIL.on(qsAccepting, S_MAILTO_EMAIL).on(qsNonAccepting, S_MAILTO_EMAIL_NON_ACCEPTING);\nS_MAILTO_EMAIL_NON_ACCEPTING.on(qsAccepting, S_MAILTO_EMAIL).on(qsNonAccepting, S_MAILTO_EMAIL_NON_ACCEPTING);\n\n// For addresses without the mailto prefix\n// Tokens allowed in the localpart of the email\nvar localpartAccepting = [_text.DOMAIN, _text.NUM, _text.PLUS, _text.POUND, _text.QUERY, _text.UNDERSCORE, _text.SYM, _text.AMPERSAND, _text.TLD];\n\n// Some of the tokens in `localpartAccepting` are already accounted for here and\n// will not be overwritten (don't worry)\nS_DOMAIN.on(localpartAccepting, S_LOCALPART).on(_text.AT, S_LOCALPART_AT);\nS_TLD.on(localpartAccepting, S_LOCALPART).on(_text.AT, S_LOCALPART_AT);\nS_DOMAIN_DOT.on(localpartAccepting, S_LOCALPART);\n\n// Okay we're on a localpart. Now what?\n// TODO: IP addresses and what if the email starts with numbers?\nS_LOCALPART.on(localpartAccepting, S_LOCALPART).on(_text.AT, S_LOCALPART_AT) // close to an email address now\n.on(_text.DOT, S_LOCALPART_DOT);\nS_LOCALPART_DOT.on(localpartAccepting, S_LOCALPART);\nS_LOCALPART_AT.on(_text.TLD, S_EMAIL_DOMAIN).on(_text.DOMAIN, S_EMAIL_DOMAIN).on(_text.LOCALHOST, S_EMAIL);\n// States following `@` defined above\n\nvar run = function run(tokens) {\n\tvar len = tokens.length;\n\tvar cursor = 0;\n\tvar multis = [];\n\tvar textTokens = [];\n\n\twhile (cursor < len) {\n\t\tvar state = S_START;\n\t\tvar secondState = null;\n\t\tvar nextState = null;\n\t\tvar multiLength = 0;\n\t\tvar latestAccepting = null;\n\t\tvar sinceAccepts = -1;\n\n\t\twhile (cursor < len && !(secondState = state.next(tokens[cursor]))) {\n\t\t\t// Starting tokens with nowhere to jump to.\n\t\t\t// Consider these to be just plain text\n\t\t\ttextTokens.push(tokens[cursor++]);\n\t\t}\n\n\t\twhile (cursor < len && (nextState = secondState || state.next(tokens[cursor]))) {\n\n\t\t\t// Get the next state\n\t\t\tsecondState = null;\n\t\t\tstate = nextState;\n\n\t\t\t// Keep track of the latest accepting state\n\t\t\tif (state.accepts()) {\n\t\t\t\tsinceAccepts = 0;\n\t\t\t\tlatestAccepting = state;\n\t\t\t} else if (sinceAccepts >= 0) {\n\t\t\t\tsinceAccepts++;\n\t\t\t}\n\n\t\t\tcursor++;\n\t\t\tmultiLength++;\n\t\t}\n\n\t\tif (sinceAccepts < 0) {\n\n\t\t\t// No accepting state was found, part of a regular text token\n\t\t\t// Add all the tokens we looked at to the text tokens array\n\t\t\tfor (var i = cursor - multiLength; i < cursor; i++) {\n\t\t\t\ttextTokens.push(tokens[i]);\n\t\t\t}\n\t\t} else {\n\n\t\t\t// Accepting state!\n\n\t\t\t// First close off the textTokens (if available)\n\t\t\tif (textTokens.length > 0) {\n\t\t\t\tmultis.push(new _multi.TEXT(textTokens));\n\t\t\t\ttextTokens = [];\n\t\t\t}\n\n\t\t\t// Roll back to the latest accepting state\n\t\t\tcursor -= sinceAccepts;\n\t\t\tmultiLength -= sinceAccepts;\n\n\t\t\t// Create a new multitoken\n\t\t\tvar MULTI = latestAccepting.emit();\n\t\t\tmultis.push(new MULTI(tokens.slice(cursor - multiLength, cursor)));\n\t\t}\n\t}\n\n\t// Finally close off the textTokens (if available)\n\tif (textTokens.length > 0) {\n\t\tmultis.push(new _multi.TEXT(textTokens));\n\t}\n\n\treturn multis;\n};\n\nexports.State = _state.TokenState;\nexports.TOKENS = MULTI_TOKENS;\nexports.run = run;\nexports.start = S_START;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}