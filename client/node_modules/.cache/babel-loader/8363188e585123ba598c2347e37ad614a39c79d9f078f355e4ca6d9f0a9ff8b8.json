{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useEffect } from 'react';\nimport uniqBy from 'lodash.uniqby';\nimport { moveChannelUp } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var useMessageNewListener = function (setChannels, lockChannelOrder, allowNewMessagesFromUnfilteredChannels) {\n  if (lockChannelOrder === void 0) {\n    lockChannelOrder = false;\n  }\n  if (allowNewMessagesFromUnfilteredChannels === void 0) {\n    allowNewMessagesFromUnfilteredChannels = true;\n  }\n  var client = useChatContext('useMessageNewListener').client;\n  useEffect(function () {\n    var handleEvent = function (event) {\n      setChannels(function (channels) {\n        var channelInList = channels.filter(function (channel) {\n          return channel.cid === event.cid;\n        }).length > 0;\n        if (!channelInList && allowNewMessagesFromUnfilteredChannels && event.channel_type) {\n          var channel = client.channel(event.channel_type, event.channel_id);\n          return uniqBy(__spreadArray([channel], channels, true), 'cid');\n        }\n        if (!lockChannelOrder) return moveChannelUp({\n          channels: channels,\n          cid: event.cid || ''\n        });\n        return channels;\n      });\n    };\n    client.on('message.new', handleEvent);\n    return function () {\n      client.off('message.new', handleEvent);\n    };\n  }, [lockChannelOrder]);\n};","map":{"version":3,"names":["__spreadArray","to","from","pack","arguments","length","i","l","ar","Array","prototype","slice","call","concat","useEffect","uniqBy","moveChannelUp","useChatContext","useMessageNewListener","setChannels","lockChannelOrder","allowNewMessagesFromUnfilteredChannels","client","handleEvent","event","channels","channelInList","filter","channel","cid","channel_type","channel_id","on","off"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/chat_Web/client/node_modules/stream-chat-react/dist/components/ChannelList/hooks/useMessageNewListener.js"],"sourcesContent":["var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { useEffect } from 'react';\nimport uniqBy from 'lodash.uniqby';\nimport { moveChannelUp } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport var useMessageNewListener = function (setChannels, lockChannelOrder, allowNewMessagesFromUnfilteredChannels) {\n    if (lockChannelOrder === void 0) { lockChannelOrder = false; }\n    if (allowNewMessagesFromUnfilteredChannels === void 0) { allowNewMessagesFromUnfilteredChannels = true; }\n    var client = useChatContext('useMessageNewListener').client;\n    useEffect(function () {\n        var handleEvent = function (event) {\n            setChannels(function (channels) {\n                var channelInList = channels.filter(function (channel) { return channel.cid === event.cid; }).length > 0;\n                if (!channelInList && allowNewMessagesFromUnfilteredChannels && event.channel_type) {\n                    var channel = client.channel(event.channel_type, event.channel_id);\n                    return uniqBy(__spreadArray([channel], channels, true), 'cid');\n                }\n                if (!lockChannelOrder)\n                    return moveChannelUp({ channels: channels, cid: event.cid || '' });\n                return channels;\n            });\n        };\n        client.on('message.new', handleEvent);\n        return function () {\n            client.off('message.new', handleEvent);\n        };\n    }, [lockChannelOrder]);\n};\n"],"mappings":"AAAA,IAAIA,aAAa,GAAI,IAAI,IAAI,IAAI,CAACA,aAAa,IAAK,UAAUC,EAAE,EAAEC,IAAI,EAAEC,IAAI,EAAE;EAC1E,IAAIA,IAAI,IAAIC,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,CAAC,GAAGL,IAAI,CAACG,MAAM,EAAEG,EAAE,EAAEF,CAAC,GAAGC,CAAC,EAAED,CAAC,EAAE,EAAE;IACjF,IAAIE,EAAE,IAAI,EAAEF,CAAC,IAAIJ,IAAI,CAAC,EAAE;MACpB,IAAI,CAACM,EAAE,EAAEA,EAAE,GAAGC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACV,IAAI,EAAE,CAAC,EAAEI,CAAC,CAAC;MACpDE,EAAE,CAACF,CAAC,CAAC,GAAGJ,IAAI,CAACI,CAAC,CAAC;IACnB;EACJ;EACA,OAAOL,EAAE,CAACY,MAAM,CAACL,EAAE,IAAIC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACV,IAAI,CAAC,CAAC;AAC5D,CAAC;AACD,SAASY,SAAS,QAAQ,OAAO;AACjC,OAAOC,MAAM,MAAM,eAAe;AAClC,SAASC,aAAa,QAAQ,UAAU;AACxC,SAASC,cAAc,QAAQ,8BAA8B;AAC7D,OAAO,IAAIC,qBAAqB,GAAG,SAAAA,CAAUC,WAAW,EAAEC,gBAAgB,EAAEC,sCAAsC,EAAE;EAChH,IAAID,gBAAgB,KAAK,KAAK,CAAC,EAAE;IAAEA,gBAAgB,GAAG,KAAK;EAAE;EAC7D,IAAIC,sCAAsC,KAAK,KAAK,CAAC,EAAE;IAAEA,sCAAsC,GAAG,IAAI;EAAE;EACxG,IAAIC,MAAM,GAAGL,cAAc,CAAC,uBAAuB,CAAC,CAACK,MAAM;EAC3DR,SAAS,CAAC,YAAY;IAClB,IAAIS,WAAW,GAAG,SAAAA,CAAUC,KAAK,EAAE;MAC/BL,WAAW,CAAC,UAAUM,QAAQ,EAAE;QAC5B,IAAIC,aAAa,GAAGD,QAAQ,CAACE,MAAM,CAAC,UAAUC,OAAO,EAAE;UAAE,OAAOA,OAAO,CAACC,GAAG,KAAKL,KAAK,CAACK,GAAG;QAAE,CAAC,CAAC,CAACxB,MAAM,GAAG,CAAC;QACxG,IAAI,CAACqB,aAAa,IAAIL,sCAAsC,IAAIG,KAAK,CAACM,YAAY,EAAE;UAChF,IAAIF,OAAO,GAAGN,MAAM,CAACM,OAAO,CAACJ,KAAK,CAACM,YAAY,EAAEN,KAAK,CAACO,UAAU,CAAC;UAClE,OAAOhB,MAAM,CAACf,aAAa,CAAC,CAAC4B,OAAO,CAAC,EAAEH,QAAQ,EAAE,IAAI,CAAC,EAAE,KAAK,CAAC;QAClE;QACA,IAAI,CAACL,gBAAgB,EACjB,OAAOJ,aAAa,CAAC;UAAES,QAAQ,EAAEA,QAAQ;UAAEI,GAAG,EAAEL,KAAK,CAACK,GAAG,IAAI;QAAG,CAAC,CAAC;QACtE,OAAOJ,QAAQ;MACnB,CAAC,CAAC;IACN,CAAC;IACDH,MAAM,CAACU,EAAE,CAAC,aAAa,EAAET,WAAW,CAAC;IACrC,OAAO,YAAY;MACfD,MAAM,CAACW,GAAG,CAAC,aAAa,EAAEV,WAAW,CAAC;IAC1C,CAAC;EACL,CAAC,EAAE,CAACH,gBAAgB,CAAC,CAAC;AAC1B,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}