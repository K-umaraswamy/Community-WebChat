{"ast":null,"code":"import React, { useCallback, useState } from 'react';\nimport clsx from 'clsx';\nimport { MESSAGE_ACTIONS } from '../Message/utils';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nvar CustomMessageActionsList = function (props) {\n  var customMessageActions = props.customMessageActions,\n    message = props.message;\n  var customActionsArray = Object.keys(customMessageActions);\n  return React.createElement(React.Fragment, null, customActionsArray.map(function (customAction) {\n    var customHandler = customMessageActions[customAction];\n    return React.createElement(\"button\", {\n      \"aria-selected\": 'false',\n      className: 'str-chat__message-actions-list-item str-chat__message-actions-list-item-button',\n      key: customAction,\n      onClick: function (event) {\n        return customHandler(message, event);\n      },\n      role: 'option'\n    }, customAction);\n  }));\n};\nvar UnMemoizedMessageActionsBox = function (props) {\n  var getMessageActions = props.getMessageActions,\n    handleDelete = props.handleDelete,\n    handleEdit = props.handleEdit,\n    handleFlag = props.handleFlag,\n    handleMute = props.handleMute,\n    handlePin = props.handlePin,\n    isUserMuted = props.isUserMuted,\n    mine = props.mine,\n    _a = props.open,\n    open = _a === void 0 ? false : _a;\n  var setQuotedMessage = useChannelActionContext('MessageActionsBox').setQuotedMessage;\n  var _b = useMessageContext('MessageActionsBox'),\n    customMessageActions = _b.customMessageActions,\n    message = _b.message,\n    messageListRect = _b.messageListRect;\n  var t = useTranslationContext('MessageActionsBox').t;\n  var _c = useState(false),\n    reverse = _c[0],\n    setReverse = _c[1];\n  var messageActions = getMessageActions();\n  var checkIfReverse = useCallback(function (containerElement) {\n    if (!containerElement) {\n      setReverse(false);\n      return;\n    }\n    if (open) {\n      var containerRect = containerElement.getBoundingClientRect();\n      if (mine) {\n        setReverse(!!messageListRect && containerRect.left < messageListRect.left);\n      } else {\n        setReverse(!!messageListRect && containerRect.right + 5 > messageListRect.right);\n      }\n    }\n  }, [messageListRect, mine, open]);\n  var handleQuote = function () {\n    setQuotedMessage(message);\n    var elements = message.parent_id ? document.querySelectorAll('.str-chat__thread .str-chat__textarea__textarea') : document.getElementsByClassName('str-chat__textarea__textarea');\n    var textarea = elements.item(0);\n    if (textarea instanceof HTMLTextAreaElement) {\n      textarea.focus();\n    }\n  };\n  var rootClassName = clsx('str-chat__message-actions-box', {\n    'str-chat__message-actions-box--mine': mine,\n    'str-chat__message-actions-box--open': open,\n    'str-chat__message-actions-box--reverse': reverse\n  });\n  var buttonClassName = 'str-chat__message-actions-list-item str-chat__message-actions-list-item-button';\n  return React.createElement(\"div\", {\n    className: rootClassName,\n    \"data-testid\": 'message-actions-box',\n    ref: checkIfReverse\n  }, React.createElement(\"div\", {\n    \"aria-label\": 'Message Options',\n    className: 'str-chat__message-actions-list',\n    role: 'listbox'\n  }, customMessageActions && React.createElement(CustomMessageActionsList, {\n    customMessageActions: customMessageActions,\n    message: message\n  }), messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleQuote,\n    role: 'option'\n  }, t('Reply')), messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1 && !message.parent_id && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handlePin,\n    role: 'option'\n  }, !message.pinned ? t('Pin') : t('Unpin')), messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleFlag,\n    role: 'option'\n  }, t('Flag')), messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleMute,\n    role: 'option'\n  }, isUserMuted() ? t('Unmute') : t('Mute')), messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleEdit,\n    role: 'option'\n  }, t('Edit Message')), messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1 && React.createElement(\"button\", {\n    \"aria-selected\": 'false',\n    className: buttonClassName,\n    onClick: handleDelete,\n    role: 'option'\n  }, t('Delete'))));\n};\n/**\n * A popup box that displays the available actions on a message, such as edit, delete, pin, etc.\n */\nexport var MessageActionsBox = React.memo(UnMemoizedMessageActionsBox);","map":{"version":3,"names":["React","useCallback","useState","clsx","MESSAGE_ACTIONS","useChannelActionContext","useMessageContext","useTranslationContext","CustomMessageActionsList","props","customMessageActions","message","customActionsArray","Object","keys","createElement","Fragment","map","customAction","customHandler","className","key","onClick","event","role","UnMemoizedMessageActionsBox","getMessageActions","handleDelete","handleEdit","handleFlag","handleMute","handlePin","isUserMuted","mine","_a","open","setQuotedMessage","_b","messageListRect","t","_c","reverse","setReverse","messageActions","checkIfReverse","containerElement","containerRect","getBoundingClientRect","left","right","handleQuote","elements","parent_id","document","querySelectorAll","getElementsByClassName","textarea","item","HTMLTextAreaElement","focus","rootClassName","buttonClassName","ref","indexOf","quote","pin","pinned","flag","mute","edit","delete","MessageActionsBox","memo"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/chat_Web/client/node_modules/stream-chat-react/dist/components/MessageActions/MessageActionsBox.js"],"sourcesContent":["import React, { useCallback, useState } from 'react';\nimport clsx from 'clsx';\nimport { MESSAGE_ACTIONS } from '../Message/utils';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useMessageContext, } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nvar CustomMessageActionsList = function (props) {\n    var customMessageActions = props.customMessageActions, message = props.message;\n    var customActionsArray = Object.keys(customMessageActions);\n    return (React.createElement(React.Fragment, null, customActionsArray.map(function (customAction) {\n        var customHandler = customMessageActions[customAction];\n        return (React.createElement(\"button\", { \"aria-selected\": 'false', className: 'str-chat__message-actions-list-item str-chat__message-actions-list-item-button', key: customAction, onClick: function (event) { return customHandler(message, event); }, role: 'option' }, customAction));\n    })));\n};\nvar UnMemoizedMessageActionsBox = function (props) {\n    var getMessageActions = props.getMessageActions, handleDelete = props.handleDelete, handleEdit = props.handleEdit, handleFlag = props.handleFlag, handleMute = props.handleMute, handlePin = props.handlePin, isUserMuted = props.isUserMuted, mine = props.mine, _a = props.open, open = _a === void 0 ? false : _a;\n    var setQuotedMessage = useChannelActionContext('MessageActionsBox').setQuotedMessage;\n    var _b = useMessageContext('MessageActionsBox'), customMessageActions = _b.customMessageActions, message = _b.message, messageListRect = _b.messageListRect;\n    var t = useTranslationContext('MessageActionsBox').t;\n    var _c = useState(false), reverse = _c[0], setReverse = _c[1];\n    var messageActions = getMessageActions();\n    var checkIfReverse = useCallback(function (containerElement) {\n        if (!containerElement) {\n            setReverse(false);\n            return;\n        }\n        if (open) {\n            var containerRect = containerElement.getBoundingClientRect();\n            if (mine) {\n                setReverse(!!messageListRect && containerRect.left < messageListRect.left);\n            }\n            else {\n                setReverse(!!messageListRect && containerRect.right + 5 > messageListRect.right);\n            }\n        }\n    }, [messageListRect, mine, open]);\n    var handleQuote = function () {\n        setQuotedMessage(message);\n        var elements = message.parent_id\n            ? document.querySelectorAll('.str-chat__thread .str-chat__textarea__textarea')\n            : document.getElementsByClassName('str-chat__textarea__textarea');\n        var textarea = elements.item(0);\n        if (textarea instanceof HTMLTextAreaElement) {\n            textarea.focus();\n        }\n    };\n    var rootClassName = clsx('str-chat__message-actions-box', {\n        'str-chat__message-actions-box--mine': mine,\n        'str-chat__message-actions-box--open': open,\n        'str-chat__message-actions-box--reverse': reverse,\n    });\n    var buttonClassName = 'str-chat__message-actions-list-item str-chat__message-actions-list-item-button';\n    return (React.createElement(\"div\", { className: rootClassName, \"data-testid\": 'message-actions-box', ref: checkIfReverse },\n        React.createElement(\"div\", { \"aria-label\": 'Message Options', className: 'str-chat__message-actions-list', role: 'listbox' },\n            customMessageActions && (React.createElement(CustomMessageActionsList, { customMessageActions: customMessageActions, message: message })),\n            messageActions.indexOf(MESSAGE_ACTIONS.quote) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleQuote, role: 'option' }, t('Reply'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.pin) > -1 && !message.parent_id && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handlePin, role: 'option' }, !message.pinned ? t('Pin') : t('Unpin'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.flag) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleFlag, role: 'option' }, t('Flag'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.mute) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleMute, role: 'option' }, isUserMuted() ? t('Unmute') : t('Mute'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.edit) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleEdit, role: 'option' }, t('Edit Message'))),\n            messageActions.indexOf(MESSAGE_ACTIONS.delete) > -1 && (React.createElement(\"button\", { \"aria-selected\": 'false', className: buttonClassName, onClick: handleDelete, role: 'option' }, t('Delete'))))));\n};\n/**\n * A popup box that displays the available actions on a message, such as edit, delete, pin, etc.\n */\nexport var MessageActionsBox = React.memo(UnMemoizedMessageActionsBox);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}