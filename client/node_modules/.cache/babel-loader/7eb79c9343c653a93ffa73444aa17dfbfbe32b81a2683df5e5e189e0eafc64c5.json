{"ast":null,"code":"/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack;\n  const children = parent.children || [];\n  const tracker = state.createTracker(info);\n  /** @type {Array<string>} */\n  const results = [];\n  let index = -1;\n  indexStack.push(-1);\n  while (++index < children.length) {\n    const child = children[index];\n    indexStack[indexStack.length - 1] = index;\n    results.push(tracker.move(state.handle(child, parent, state, {\n      before: '\\n',\n      after: '\\n',\n      ...tracker.current()\n    })));\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined;\n    }\n    if (index < children.length - 1) {\n      results.push(tracker.move(between(child, children[index + 1], parent, state)));\n    }\n  }\n  indexStack.pop();\n  return results.join('');\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length;\n  while (index--) {\n    const result = state.join[index](left, right, parent, state);\n    if (result === true || result === 1) {\n      break;\n    }\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result);\n    }\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n';\n    }\n  }\n  return '\\n\\n';\n}","map":{"version":3,"names":["containerFlow","parent","state","info","indexStack","children","tracker","createTracker","results","index","push","length","child","move","handle","before","after","current","type","bulletLastUsed","undefined","between","pop","join","left","right","result","repeat"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/Community_Chat-project/client/node_modules/mdast-util-to-markdown/lib/util/container-flow.js"],"sourcesContent":["/**\n * @typedef {import('../types.js').FlowContent} FlowContent\n * @typedef {import('../types.js').Node} Node\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').State} State\n * @typedef {import('../types.js').TrackFields} TrackFields\n */\n\n/**\n * @param {Parent & {children: Array<FlowContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {TrackFields} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined by (blank) lines.\n */\nexport function containerFlow(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  const tracker = state.createTracker(info)\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n\n  indexStack.push(-1)\n\n  while (++index < children.length) {\n    const child = children[index]\n\n    indexStack[indexStack.length - 1] = index\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          before: '\\n',\n          after: '\\n',\n          ...tracker.current()\n        })\n      )\n    )\n\n    if (child.type !== 'list') {\n      state.bulletLastUsed = undefined\n    }\n\n    if (index < children.length - 1) {\n      results.push(\n        tracker.move(between(child, children[index + 1], parent, state))\n      )\n    }\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n\n/**\n * @param {Node} left\n * @param {Node} right\n * @param {Parent} parent\n * @param {State} state\n * @returns {string}\n */\nfunction between(left, right, parent, state) {\n  let index = state.join.length\n\n  while (index--) {\n    const result = state.join[index](left, right, parent, state)\n\n    if (result === true || result === 1) {\n      break\n    }\n\n    if (typeof result === 'number') {\n      return '\\n'.repeat(1 + result)\n    }\n\n    if (result === false) {\n      return '\\n\\n<!---->\\n\\n'\n    }\n  }\n\n  return '\\n\\n'\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,aAAaA,CAACC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAE;EACjD,MAAMC,UAAU,GAAGF,KAAK,CAACE,UAAU;EACnC,MAAMC,QAAQ,GAAGJ,MAAM,CAACI,QAAQ,IAAI,EAAE;EACtC,MAAMC,OAAO,GAAGJ,KAAK,CAACK,aAAa,CAACJ,IAAI,CAAC;EACzC;EACA,MAAMK,OAAO,GAAG,EAAE;EAClB,IAAIC,KAAK,GAAG,CAAC,CAAC;EAEdL,UAAU,CAACM,IAAI,CAAC,CAAC,CAAC,CAAC;EAEnB,OAAO,EAAED,KAAK,GAAGJ,QAAQ,CAACM,MAAM,EAAE;IAChC,MAAMC,KAAK,GAAGP,QAAQ,CAACI,KAAK,CAAC;IAE7BL,UAAU,CAACA,UAAU,CAACO,MAAM,GAAG,CAAC,CAAC,GAAGF,KAAK;IAEzCD,OAAO,CAACE,IAAI,CACVJ,OAAO,CAACO,IAAI,CACVX,KAAK,CAACY,MAAM,CAACF,KAAK,EAAEX,MAAM,EAAEC,KAAK,EAAE;MACjCa,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE,IAAI;MACX,GAAGV,OAAO,CAACW,OAAO,CAAC;IACrB,CAAC,CACH,CACF,CAAC;IAED,IAAIL,KAAK,CAACM,IAAI,KAAK,MAAM,EAAE;MACzBhB,KAAK,CAACiB,cAAc,GAAGC,SAAS;IAClC;IAEA,IAAIX,KAAK,GAAGJ,QAAQ,CAACM,MAAM,GAAG,CAAC,EAAE;MAC/BH,OAAO,CAACE,IAAI,CACVJ,OAAO,CAACO,IAAI,CAACQ,OAAO,CAACT,KAAK,EAAEP,QAAQ,CAACI,KAAK,GAAG,CAAC,CAAC,EAAER,MAAM,EAAEC,KAAK,CAAC,CACjE,CAAC;IACH;EACF;EAEAE,UAAU,CAACkB,GAAG,CAAC,CAAC;EAEhB,OAAOd,OAAO,CAACe,IAAI,CAAC,EAAE,CAAC;AACzB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASF,OAAOA,CAACG,IAAI,EAAEC,KAAK,EAAExB,MAAM,EAAEC,KAAK,EAAE;EAC3C,IAAIO,KAAK,GAAGP,KAAK,CAACqB,IAAI,CAACZ,MAAM;EAE7B,OAAOF,KAAK,EAAE,EAAE;IACd,MAAMiB,MAAM,GAAGxB,KAAK,CAACqB,IAAI,CAACd,KAAK,CAAC,CAACe,IAAI,EAAEC,KAAK,EAAExB,MAAM,EAAEC,KAAK,CAAC;IAE5D,IAAIwB,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,CAAC,EAAE;MACnC;IACF;IAEA,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;MAC9B,OAAO,IAAI,CAACC,MAAM,CAAC,CAAC,GAAGD,MAAM,CAAC;IAChC;IAEA,IAAIA,MAAM,KAAK,KAAK,EAAE;MACpB,OAAO,iBAAiB;IAC1B;EACF;EAEA,OAAO,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}