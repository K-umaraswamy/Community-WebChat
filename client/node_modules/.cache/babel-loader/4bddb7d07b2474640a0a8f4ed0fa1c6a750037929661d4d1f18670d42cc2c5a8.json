{"ast":null,"code":"/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack;\n  const children = parent.children || [];\n  /** @type {Array<string>} */\n  const results = [];\n  let index = -1;\n  let before = info.before;\n  indexStack.push(-1);\n  let tracker = state.createTracker(info);\n  while (++index < children.length) {\n    const child = children[index];\n    /** @type {string} */\n    let after;\n    indexStack[indexStack.length - 1] = index;\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type];\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek;\n      after = handle ? handle(children[index + 1], parent, state, {\n        before: '',\n        after: '',\n        ...tracker.current()\n      }).charAt(0) : '';\n    } else {\n      after = info.after;\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (results.length > 0 && (before === '\\r' || before === '\\n') && child.type === 'html') {\n      results[results.length - 1] = results[results.length - 1].replace(/(\\r?\\n|\\r)$/, ' ');\n      before = ' ';\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info);\n      tracker.move(results.join(''));\n    }\n    results.push(tracker.move(state.handle(child, parent, state, {\n      ...tracker.current(),\n      before,\n      after\n    })));\n    before = results[results.length - 1].slice(-1);\n  }\n  indexStack.pop();\n  return results.join('');\n}","map":{"version":3,"names":["containerPhrasing","parent","state","info","indexStack","children","results","index","before","push","tracker","createTracker","length","child","after","handle","handlers","type","peek","current","charAt","replace","move","join","slice","pop"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/Community_Chat-project/client/node_modules/mdast-util-to-markdown/lib/util/container-phrasing.js"],"sourcesContent":["/**\n * @typedef {import('../types.js').Handle} Handle\n * @typedef {import('../types.js').Info} Info\n * @typedef {import('../types.js').Parent} Parent\n * @typedef {import('../types.js').PhrasingContent} PhrasingContent\n * @typedef {import('../types.js').State} State\n */\n\n/**\n * Serialize the children of a parent that contains phrasing children.\n *\n * These children will be joined flush together.\n *\n * @param {Parent & {children: Array<PhrasingContent>}} parent\n *   Parent of flow nodes.\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Info} info\n *   Info on where we are in the document we are generating.\n * @returns {string}\n *   Serialized children, joined together.\n */\nexport function containerPhrasing(parent, state, info) {\n  const indexStack = state.indexStack\n  const children = parent.children || []\n  /** @type {Array<string>} */\n  const results = []\n  let index = -1\n  let before = info.before\n\n  indexStack.push(-1)\n  let tracker = state.createTracker(info)\n\n  while (++index < children.length) {\n    const child = children[index]\n    /** @type {string} */\n    let after\n\n    indexStack[indexStack.length - 1] = index\n\n    if (index + 1 < children.length) {\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      let handle = state.handle.handlers[children[index + 1].type]\n      /** @type {Handle} */\n      // @ts-expect-error: hush, it’s actually a `zwitch`.\n      if (handle && handle.peek) handle = handle.peek\n      after = handle\n        ? handle(children[index + 1], parent, state, {\n            before: '',\n            after: '',\n            ...tracker.current()\n          }).charAt(0)\n        : ''\n    } else {\n      after = info.after\n    }\n\n    // In some cases, html (text) can be found in phrasing right after an eol.\n    // When we’d serialize that, in most cases that would be seen as html\n    // (flow).\n    // As we can’t escape or so to prevent it from happening, we take a somewhat\n    // reasonable approach: replace that eol with a space.\n    // See: <https://github.com/syntax-tree/mdast-util-to-markdown/issues/15>\n    if (\n      results.length > 0 &&\n      (before === '\\r' || before === '\\n') &&\n      child.type === 'html'\n    ) {\n      results[results.length - 1] = results[results.length - 1].replace(\n        /(\\r?\\n|\\r)$/,\n        ' '\n      )\n      before = ' '\n\n      // To do: does this work to reset tracker?\n      tracker = state.createTracker(info)\n      tracker.move(results.join(''))\n    }\n\n    results.push(\n      tracker.move(\n        state.handle(child, parent, state, {\n          ...tracker.current(),\n          before,\n          after\n        })\n      )\n    )\n\n    before = results[results.length - 1].slice(-1)\n  }\n\n  indexStack.pop()\n\n  return results.join('')\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,iBAAiBA,CAACC,MAAM,EAAEC,KAAK,EAAEC,IAAI,EAAE;EACrD,MAAMC,UAAU,GAAGF,KAAK,CAACE,UAAU;EACnC,MAAMC,QAAQ,GAAGJ,MAAM,CAACI,QAAQ,IAAI,EAAE;EACtC;EACA,MAAMC,OAAO,GAAG,EAAE;EAClB,IAAIC,KAAK,GAAG,CAAC,CAAC;EACd,IAAIC,MAAM,GAAGL,IAAI,CAACK,MAAM;EAExBJ,UAAU,CAACK,IAAI,CAAC,CAAC,CAAC,CAAC;EACnB,IAAIC,OAAO,GAAGR,KAAK,CAACS,aAAa,CAACR,IAAI,CAAC;EAEvC,OAAO,EAAEI,KAAK,GAAGF,QAAQ,CAACO,MAAM,EAAE;IAChC,MAAMC,KAAK,GAAGR,QAAQ,CAACE,KAAK,CAAC;IAC7B;IACA,IAAIO,KAAK;IAETV,UAAU,CAACA,UAAU,CAACQ,MAAM,GAAG,CAAC,CAAC,GAAGL,KAAK;IAEzC,IAAIA,KAAK,GAAG,CAAC,GAAGF,QAAQ,CAACO,MAAM,EAAE;MAC/B;MACA;MACA,IAAIG,MAAM,GAAGb,KAAK,CAACa,MAAM,CAACC,QAAQ,CAACX,QAAQ,CAACE,KAAK,GAAG,CAAC,CAAC,CAACU,IAAI,CAAC;MAC5D;MACA;MACA,IAAIF,MAAM,IAAIA,MAAM,CAACG,IAAI,EAAEH,MAAM,GAAGA,MAAM,CAACG,IAAI;MAC/CJ,KAAK,GAAGC,MAAM,GACVA,MAAM,CAACV,QAAQ,CAACE,KAAK,GAAG,CAAC,CAAC,EAAEN,MAAM,EAAEC,KAAK,EAAE;QACzCM,MAAM,EAAE,EAAE;QACVM,KAAK,EAAE,EAAE;QACT,GAAGJ,OAAO,CAACS,OAAO,CAAC;MACrB,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,CAAC,GACZ,EAAE;IACR,CAAC,MAAM;MACLN,KAAK,GAAGX,IAAI,CAACW,KAAK;IACpB;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA,IACER,OAAO,CAACM,MAAM,GAAG,CAAC,KACjBJ,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAK,IAAI,CAAC,IACpCK,KAAK,CAACI,IAAI,KAAK,MAAM,EACrB;MACAX,OAAO,CAACA,OAAO,CAACM,MAAM,GAAG,CAAC,CAAC,GAAGN,OAAO,CAACA,OAAO,CAACM,MAAM,GAAG,CAAC,CAAC,CAACS,OAAO,CAC/D,aAAa,EACb,GACF,CAAC;MACDb,MAAM,GAAG,GAAG;;MAEZ;MACAE,OAAO,GAAGR,KAAK,CAACS,aAAa,CAACR,IAAI,CAAC;MACnCO,OAAO,CAACY,IAAI,CAAChB,OAAO,CAACiB,IAAI,CAAC,EAAE,CAAC,CAAC;IAChC;IAEAjB,OAAO,CAACG,IAAI,CACVC,OAAO,CAACY,IAAI,CACVpB,KAAK,CAACa,MAAM,CAACF,KAAK,EAAEZ,MAAM,EAAEC,KAAK,EAAE;MACjC,GAAGQ,OAAO,CAACS,OAAO,CAAC,CAAC;MACpBX,MAAM;MACNM;IACF,CAAC,CACH,CACF,CAAC;IAEDN,MAAM,GAAGF,OAAO,CAACA,OAAO,CAACM,MAAM,GAAG,CAAC,CAAC,CAACY,KAAK,CAAC,CAAC,CAAC,CAAC;EAChD;EAEApB,UAAU,CAACqB,GAAG,CAAC,CAAC;EAEhB,OAAOnB,OAAO,CAACiB,IAAI,CAAC,EAAE,CAAC;AACzB"},"metadata":{},"sourceType":"module","externalDependencies":[]}