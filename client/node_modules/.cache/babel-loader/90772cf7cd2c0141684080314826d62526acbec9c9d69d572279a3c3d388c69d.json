{"ast":null,"code":"/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport { ok as assert } from 'uvu/assert';\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { codes } from 'micromark-util-symbol/codes.js';\nimport { constants } from 'micromark-util-symbol/constants.js';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { types } from 'micromark-util-symbol/types.js';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [codes.leftSquareBracket]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [codes.leftSquareBracket]: {\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [codes.rightSquareBracket]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === types.labelImage) {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === types.labelLink || token.type === types.label || token.type === types.image || token.type === types.link) {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.rightSquareBracket, 'expected `]`');\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== codes.caret || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === types.labelImage && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  assert(labelStart, 'expected `labelStart` to resolve');\n\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = types.data;\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: types.chunkString,\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`');\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== codes.caret) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > constants.linkReferenceSizeMax ||\n    // Closing brace with nothing.\n    code === codes.rightSquareBracket && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === codes.eof || code === codes.leftSquareBracket || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === codes.rightSquareBracket) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === codes.backslash ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === codes.leftSquareBracket || code === codes.backslash || code === codes.rightSquareBracket) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`');\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === codes.caret) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > constants.linkReferenceSizeMax ||\n    // Closing brace with nothing.\n    code === codes.rightSquareBracket && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === codes.eof || code === codes.leftSquareBracket || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === codes.rightSquareBracket) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === codes.backslash ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === codes.leftSquareBracket || code === codes.backslash || code === codes.rightSquareBracket) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === codes.colon) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', constants.tabSize + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === constants.tabSize ? ok(code) : nok(code);\n  }\n}","map":{"version":3,"names":["ok","assert","blankLine","factorySpace","markdownLineEndingOrSpace","codes","constants","normalizeIdentifier","types","indent","tokenize","tokenizeIndent","partial","gfmFootnote","document","leftSquareBracket","tokenizeDefinitionStart","continuation","tokenizeDefinitionContinuation","exit","gfmFootnoteDefinitionEnd","text","tokenizeGfmFootnoteCall","rightSquareBracket","add","tokenizePotentialGfmFootnoteCall","resolveTo","resolveToPotentialGfmFootnoteCall","effects","nok","self","index","events","length","defined","parser","gfmFootnotes","labelStart","token","type","labelImage","labelLink","label","image","link","start","code","_balanced","id","sliceSerialize","end","now","codePointAt","caret","includes","slice","enter","consume","context","data","call","Object","assign","marker","column","offset","_bufferIndex","string","chunk","chunkString","contentType","replacement","splice","size","callStart","callData","linkReferenceSizeMax","eof","backslash","callEscape","identifier","_container","labelAtMarker","labelInside","labelAfter","labelEscape","colon","push","whitespaceAfter","check","attempt","afterPrefix","tabSize","tail"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/chat_Web/client/node_modules/micromark-extension-gfm-footnote/dev/lib/syntax.js"],"sourcesContent":["/**\n * @typedef {import('micromark-util-types').Event} Event\n * @typedef {import('micromark-util-types').Exiter} Exiter\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').Resolver} Resolver\n * @typedef {import('micromark-util-types').State} State\n * @typedef {import('micromark-util-types').Token} Token\n * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext\n * @typedef {import('micromark-util-types').Tokenizer} Tokenizer\n */\n\nimport {ok as assert} from 'uvu/assert'\nimport {blankLine} from 'micromark-core-commonmark'\nimport {factorySpace} from 'micromark-factory-space'\nimport {markdownLineEndingOrSpace} from 'micromark-util-character'\nimport {codes} from 'micromark-util-symbol/codes.js'\nimport {constants} from 'micromark-util-symbol/constants.js'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {types} from 'micromark-util-symbol/types.js'\n\nconst indent = {tokenize: tokenizeIndent, partial: true}\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [codes.leftSquareBracket]: {\n        tokenize: tokenizeDefinitionStart,\n        continuation: {tokenize: tokenizeDefinitionContinuation},\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [codes.leftSquareBracket]: {tokenize: tokenizeGfmFootnoteCall},\n      [codes.rightSquareBracket]: {\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  }\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  let index = self.events.length\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {Token} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1]\n\n    if (token.type === types.labelImage) {\n      labelStart = token\n      break\n    }\n\n    // Exit if we’ve walked far enough.\n    if (\n      token.type === 'gfmFootnoteCall' ||\n      token.type === types.labelLink ||\n      token.type === types.label ||\n      token.type === types.image ||\n      token.type === types.link\n    ) {\n      break\n    }\n  }\n\n  return start\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.rightSquareBracket, 'expected `]`')\n\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code)\n    }\n\n    const id = normalizeIdentifier(\n      self.sliceSerialize({start: labelStart.end, end: self.now()})\n    )\n\n    if (id.codePointAt(0) !== codes.caret || !defined.includes(id.slice(1))) {\n      return nok(code)\n    }\n\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return ok(code)\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length\n  /** @type {Token | undefined} */\n  let labelStart\n\n  // Find an opening.\n  while (index--) {\n    if (\n      events[index][1].type === types.labelImage &&\n      events[index][0] === 'enter'\n    ) {\n      labelStart = events[index][1]\n      break\n    }\n  }\n\n  assert(labelStart, 'expected `labelStart` to resolve')\n\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = types.data\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker'\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  }\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  }\n  // Increment the end 1 character.\n  marker.end.column++\n  marker.end.offset++\n  marker.end._bufferIndex++\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  }\n  /** @type {Token} */\n  const chunk = {\n    type: types.chunkString,\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  }\n\n  /** @type {Array<Event>} */\n  const replacement = [\n    // Take the `labelImageMarker` (now `data`, the `!`)\n    events[index + 1],\n    events[index + 2],\n    ['enter', call, context],\n    // The `[`\n    events[index + 3],\n    events[index + 4],\n    // The `^`.\n    ['enter', marker, context],\n    ['exit', marker, context],\n    // Everything in between.\n    ['enter', string, context],\n    ['enter', chunk, context],\n    ['exit', chunk, context],\n    ['exit', string, context],\n    // The ending (`]`, properly parsed and labelled).\n    events[events.length - 2],\n    events[events.length - 1],\n    ['exit', call, context]\n  ]\n\n  events.splice(index, events.length - index + 1, ...replacement)\n\n  return events\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  let size = 0\n  /** @type {boolean} */\n  let data\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter('gfmFootnoteCall')\n    effects.enter('gfmFootnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallLabelMarker')\n    return callStart\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== codes.caret) return nok(code)\n\n    effects.enter('gfmFootnoteCallMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteCallMarker')\n    effects.enter('gfmFootnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n      // Too long.\n      size > constants.linkReferenceSizeMax ||\n      // Closing brace with nothing.\n      (code === codes.rightSquareBracket && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === codes.eof ||\n      code === codes.leftSquareBracket ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteCallString')\n\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code)\n      }\n\n      effects.enter('gfmFootnoteCallLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteCallLabelMarker')\n      effects.exit('gfmFootnoteCall')\n      return ok\n    }\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    size++\n    effects.consume(code)\n    return code === codes.backslash ? callEscape : callData\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (\n      code === codes.leftSquareBracket ||\n      code === codes.backslash ||\n      code === codes.rightSquareBracket\n    ) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n\n    return callData(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this\n  /** @type {Array<string>} */\n  // @ts-expect-error It’s fine!\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = [])\n  /** @type {string} */\n  let identifier\n  let size = 0\n  /** @type {boolean | undefined} */\n  let data\n\n  return start\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    assert(code === codes.leftSquareBracket, 'expected `[`')\n    effects.enter('gfmFootnoteDefinition')._container = true\n    effects.enter('gfmFootnoteDefinitionLabel')\n    effects.enter('gfmFootnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('gfmFootnoteDefinitionLabelMarker')\n    return labelAtMarker\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === codes.caret) {\n      effects.enter('gfmFootnoteDefinitionMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionMarker')\n      effects.enter('gfmFootnoteDefinitionLabelString')\n      effects.enter('chunkString').contentType = 'string'\n      return labelInside\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n      // Too long.\n      size > constants.linkReferenceSizeMax ||\n      // Closing brace with nothing.\n      (code === codes.rightSquareBracket && !data) ||\n      // Space or tab is not supported by GFM for some reason.\n      // `\\n` and `[` not being supported makes sense.\n      code === codes.eof ||\n      code === codes.leftSquareBracket ||\n      markdownLineEndingOrSpace(code)\n    ) {\n      return nok(code)\n    }\n\n    if (code === codes.rightSquareBracket) {\n      effects.exit('chunkString')\n      const token = effects.exit('gfmFootnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('gfmFootnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('gfmFootnoteDefinitionLabelMarker')\n      effects.exit('gfmFootnoteDefinitionLabel')\n      return labelAfter\n    }\n\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true\n    }\n\n    size++\n    effects.consume(code)\n    return code === codes.backslash ? labelEscape : labelInside\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (\n      code === codes.leftSquareBracket ||\n      code === codes.backslash ||\n      code === codes.rightSquareBracket\n    ) {\n      effects.consume(code)\n      size++\n      return labelInside\n    }\n\n    return labelInside(code)\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === codes.colon) {\n      effects.enter('definitionMarker')\n      effects.consume(code)\n      effects.exit('definitionMarker')\n\n      if (!defined.includes(identifier)) {\n        defined.push(identifier)\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(\n        effects,\n        whitespaceAfter,\n        'gfmFootnoteDefinitionWhitespace'\n      )\n    }\n\n    return nok(code)\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code)\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok))\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition')\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this\n\n  return factorySpace(\n    effects,\n    afterPrefix,\n    'gfmFootnoteDefinitionIndent',\n    constants.tabSize + 1\n  )\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1]\n    return tail &&\n      tail[1].type === 'gfmFootnoteDefinitionIndent' &&\n      tail[2].sliceSerialize(tail[1], true).length === constants.tabSize\n      ? ok(code)\n      : nok(code)\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}