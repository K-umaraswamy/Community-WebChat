{"ast":null,"code":"import React from 'react';\nimport { useChat } from './hooks/useChat';\nimport { useCreateChatContext } from './hooks/useCreateChatContext';\nimport { useChannelsQueryState } from './hooks/useChannelsQueryState';\nimport { darkModeTheme, useCustomStyles } from './hooks/useCustomStyles';\nimport { ChatProvider } from '../../context/ChatContext';\nimport { TranslationProvider } from '../../context/TranslationContext';\n/**\n * Wrapper component for a StreamChat application. Chat needs to be placed around any other chat components\n * as it provides the ChatContext.\n */\nexport var Chat = function (props) {\n  var children = props.children,\n    client = props.client,\n    customClasses = props.customClasses,\n    customStyles = props.customStyles,\n    _a = props.darkMode,\n    darkMode = _a === void 0 ? false : _a,\n    defaultLanguage = props.defaultLanguage,\n    i18nInstance = props.i18nInstance,\n    _b = props.initialNavOpen,\n    initialNavOpen = _b === void 0 ? true : _b,\n    _c = props.theme,\n    theme = _c === void 0 ? 'messaging light' : _c,\n    _d = props.useImageFlagEmojisOnWindows,\n    useImageFlagEmojisOnWindows = _d === void 0 ? false : _d;\n  var _e = useChat({\n      client: client,\n      defaultLanguage: defaultLanguage,\n      i18nInstance: i18nInstance,\n      initialNavOpen: initialNavOpen\n    }),\n    channel = _e.channel,\n    closeMobileNav = _e.closeMobileNav,\n    getAppSettings = _e.getAppSettings,\n    latestMessageDatesByChannels = _e.latestMessageDatesByChannels,\n    mutes = _e.mutes,\n    navOpen = _e.navOpen,\n    openMobileNav = _e.openMobileNav,\n    setActiveChannel = _e.setActiveChannel,\n    translators = _e.translators;\n  var channelsQueryState = useChannelsQueryState();\n  var themeVersion = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement).getPropertyValue('--str-chat__theme-version').replace(' ', '') || '1' : '1';\n  useCustomStyles(darkMode ? darkModeTheme : customStyles);\n  var chatContextValue = useCreateChatContext({\n    channel: channel,\n    channelsQueryState: channelsQueryState,\n    client: client,\n    closeMobileNav: closeMobileNav,\n    customClasses: customClasses,\n    getAppSettings: getAppSettings,\n    latestMessageDatesByChannels: latestMessageDatesByChannels,\n    mutes: mutes,\n    navOpen: navOpen,\n    openMobileNav: openMobileNav,\n    setActiveChannel: setActiveChannel,\n    theme: theme,\n    themeVersion: themeVersion,\n    useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows\n  });\n  if (!translators.t) return null;\n  return React.createElement(ChatProvider, {\n    value: chatContextValue\n  }, React.createElement(TranslationProvider, {\n    value: translators\n  }, children));\n};","map":{"version":3,"names":["React","useChat","useCreateChatContext","useChannelsQueryState","darkModeTheme","useCustomStyles","ChatProvider","TranslationProvider","Chat","props","children","client","customClasses","customStyles","_a","darkMode","defaultLanguage","i18nInstance","_b","initialNavOpen","_c","theme","_d","useImageFlagEmojisOnWindows","_e","channel","closeMobileNav","getAppSettings","latestMessageDatesByChannels","mutes","navOpen","openMobileNav","setActiveChannel","translators","channelsQueryState","themeVersion","window","getComputedStyle","document","documentElement","getPropertyValue","replace","chatContextValue","t","createElement","value"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/Community_Chat-project/client/node_modules/stream-chat-react/dist/components/Chat/Chat.js"],"sourcesContent":["import React from 'react';\nimport { useChat } from './hooks/useChat';\nimport { useCreateChatContext } from './hooks/useCreateChatContext';\nimport { useChannelsQueryState } from './hooks/useChannelsQueryState';\nimport { darkModeTheme, useCustomStyles } from './hooks/useCustomStyles';\nimport { ChatProvider } from '../../context/ChatContext';\nimport { TranslationProvider } from '../../context/TranslationContext';\n/**\n * Wrapper component for a StreamChat application. Chat needs to be placed around any other chat components\n * as it provides the ChatContext.\n */\nexport var Chat = function (props) {\n    var children = props.children, client = props.client, customClasses = props.customClasses, customStyles = props.customStyles, _a = props.darkMode, darkMode = _a === void 0 ? false : _a, defaultLanguage = props.defaultLanguage, i18nInstance = props.i18nInstance, _b = props.initialNavOpen, initialNavOpen = _b === void 0 ? true : _b, _c = props.theme, theme = _c === void 0 ? 'messaging light' : _c, _d = props.useImageFlagEmojisOnWindows, useImageFlagEmojisOnWindows = _d === void 0 ? false : _d;\n    var _e = useChat({ client: client, defaultLanguage: defaultLanguage, i18nInstance: i18nInstance, initialNavOpen: initialNavOpen }), channel = _e.channel, closeMobileNav = _e.closeMobileNav, getAppSettings = _e.getAppSettings, latestMessageDatesByChannels = _e.latestMessageDatesByChannels, mutes = _e.mutes, navOpen = _e.navOpen, openMobileNav = _e.openMobileNav, setActiveChannel = _e.setActiveChannel, translators = _e.translators;\n    var channelsQueryState = useChannelsQueryState();\n    var themeVersion = typeof window !== 'undefined'\n        ? (window\n            .getComputedStyle(document.documentElement)\n            .getPropertyValue('--str-chat__theme-version')\n            .replace(' ', '') || '1')\n        : '1';\n    useCustomStyles(darkMode ? darkModeTheme : customStyles);\n    var chatContextValue = useCreateChatContext({\n        channel: channel,\n        channelsQueryState: channelsQueryState,\n        client: client,\n        closeMobileNav: closeMobileNav,\n        customClasses: customClasses,\n        getAppSettings: getAppSettings,\n        latestMessageDatesByChannels: latestMessageDatesByChannels,\n        mutes: mutes,\n        navOpen: navOpen,\n        openMobileNav: openMobileNav,\n        setActiveChannel: setActiveChannel,\n        theme: theme,\n        themeVersion: themeVersion,\n        useImageFlagEmojisOnWindows: useImageFlagEmojisOnWindows,\n    });\n    if (!translators.t)\n        return null;\n    return (React.createElement(ChatProvider, { value: chatContextValue },\n        React.createElement(TranslationProvider, { value: translators }, children)));\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}