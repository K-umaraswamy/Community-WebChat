{"ast":null,"code":"/* eslint-disable no-continue */\nimport { nanoid } from 'nanoid';\nimport { CUSTOM_MESSAGE_TYPE } from '../../constants/messageTypes';\nimport { isDate } from '../../context/TranslationContext';\n/**\n * processMessages - Transform the input message list according to config parameters\n *\n * Inserts date separators btw. messages created on different dates or before unread incoming messages. By default:\n * - enabled in main message list\n * - disabled in virtualized message list\n * - disabled in thread\n *\n * Allows to filter out deleted messages, contolled by hideDeletedMessages param. This is disabled by default.\n *\n * Sets Giphy preview message for VirtualizedMessageList\n *\n * The only required params are messages and userId, the rest are config params:\n *\n * @return {StreamMessage<StreamChatGenerics>[]} Transformed list of messages\n */\nexport var processMessages = function (params) {\n  var _a, _b;\n  var enableDateSeparator = params.enableDateSeparator,\n    hideDeletedMessages = params.hideDeletedMessages,\n    hideNewMessageSeparator = params.hideNewMessageSeparator,\n    lastRead = params.lastRead,\n    messages = params.messages,\n    setGiphyPreviewMessage = params.setGiphyPreviewMessage,\n    userId = params.userId;\n  var unread = false;\n  var ephemeralMessagePresent = false;\n  var lastDateSeparator;\n  var newMessages = [];\n  for (var i = 0; i < messages.length; i += 1) {\n    var message = messages[i];\n    if (hideDeletedMessages && message.type === 'deleted') {\n      continue;\n    }\n    if (setGiphyPreviewMessage && message.type === 'ephemeral' && message.command === 'giphy') {\n      ephemeralMessagePresent = true;\n      setGiphyPreviewMessage(message);\n      continue;\n    }\n    var messageDate = message.created_at && isDate(message.created_at) && message.created_at.toDateString() || '';\n    var previousMessage = messages[i - 1];\n    var prevMessageDate = messageDate;\n    if (enableDateSeparator && (previousMessage === null || previousMessage === void 0 ? void 0 : previousMessage.created_at) && isDate(previousMessage.created_at)) {\n      prevMessageDate = previousMessage.created_at.toDateString();\n    }\n    if (!unread && !hideNewMessageSeparator) {\n      unread = lastRead && message.created_at && new Date(lastRead) < message.created_at || false;\n      // do not show date separator for current user's messages\n      if (enableDateSeparator && unread && ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) !== userId) {\n        newMessages.push({\n          customType: CUSTOM_MESSAGE_TYPE.date,\n          date: message.created_at,\n          id: makeDateMessageId(message.created_at),\n          unread: unread\n        });\n      }\n    }\n    if (enableDateSeparator && (i === 0 ||\n    // always put date separator before the first message\n    messageDate !== prevMessageDate ||\n    // add date separator btw. 2 messages created on different date\n    // if hiding deleted messages replace the previous deleted message(s) with A separator if the last rendered message was created on different date\n    hideDeletedMessages && (previousMessage === null || previousMessage === void 0 ? void 0 : previousMessage.type) === 'deleted' && lastDateSeparator !== messageDate) && ((_b = newMessages === null || newMessages === void 0 ? void 0 : newMessages[newMessages.length - 1]) === null || _b === void 0 ? void 0 : _b.customType) !== CUSTOM_MESSAGE_TYPE.date // do not show two date separators in a row)\n    ) {\n      lastDateSeparator = messageDate;\n      newMessages.push({\n        customType: CUSTOM_MESSAGE_TYPE.date,\n        date: message.created_at,\n        id: makeDateMessageId(message.created_at)\n      }, message);\n    } else {\n      newMessages.push(message);\n    }\n  }\n  // clean up the giphy preview component state after a Cancel action\n  if (setGiphyPreviewMessage && !ephemeralMessagePresent) {\n    setGiphyPreviewMessage(undefined);\n  }\n  return newMessages;\n};\nexport var makeDateMessageId = function (date) {\n  var idSuffix;\n  try {\n    idSuffix = !date ? nanoid() : date instanceof Date ? date.toISOString() : date;\n  } catch (e) {\n    idSuffix = nanoid();\n  }\n  return \"\".concat(CUSTOM_MESSAGE_TYPE.date, \"-\").concat(idSuffix);\n};\n// fast since it usually iterates just the last few messages\nexport var getLastReceived = function (messages) {\n  for (var i = messages.length - 1; i > 0; i -= 1) {\n    if (messages[i].status === 'received') {\n      return messages[i].id;\n    }\n  }\n  return null;\n};\nexport var getReadStates = function (messages, read, returnAllReadData) {\n  if (read === void 0) {\n    read = {};\n  }\n  // create object with empty array for each message id\n  var readData = {};\n  Object.values(read).forEach(function (readState) {\n    if (!readState.last_read) return;\n    var userLastReadMsgId;\n    // loop messages sent by current user and add read data for other users in channel\n    messages.forEach(function (msg) {\n      if (msg.updated_at && msg.updated_at < readState.last_read) {\n        userLastReadMsgId = msg.id;\n        // if true, save other user's read data for all messages they've read\n        if (returnAllReadData) {\n          if (!readData[userLastReadMsgId]) {\n            readData[userLastReadMsgId] = [];\n          }\n          readData[userLastReadMsgId].push(readState.user);\n        }\n      }\n    });\n    // if true, only save read data for other user's last read message\n    if (userLastReadMsgId && !returnAllReadData) {\n      if (!readData[userLastReadMsgId]) {\n        readData[userLastReadMsgId] = [];\n      }\n      readData[userLastReadMsgId].push(readState.user);\n    }\n  });\n  return readData;\n};\nexport var insertIntro = function (messages, headerPosition) {\n  var newMessages = messages;\n  var intro = {\n    customType: CUSTOM_MESSAGE_TYPE.intro\n  };\n  // if no headerPosition is set, HeaderComponent will go at the top\n  if (!headerPosition) {\n    newMessages.unshift(intro);\n    return newMessages;\n  }\n  // if no messages, intro gets inserted\n  if (!newMessages.length) {\n    newMessages.unshift(intro);\n    return newMessages;\n  }\n  // else loop over the messages\n  for (var i = 0; i < messages.length; i += 1) {\n    var message = messages[i];\n    var messageTime = message.created_at && isDate(message.created_at) ? message.created_at.getTime() : null;\n    var nextMessage = messages[i + 1];\n    var nextMessageTime = nextMessage.created_at && isDate(nextMessage.created_at) ? nextMessage.created_at.getTime() : null;\n    // header position is smaller than message time so comes after;\n    if (messageTime && messageTime < headerPosition) {\n      // if header position is also smaller than message time continue;\n      if (nextMessageTime && nextMessageTime < headerPosition) {\n        if (messages[i + 1] && messages[i + 1].customType === CUSTOM_MESSAGE_TYPE.date) continue;\n        if (!nextMessageTime) {\n          newMessages.push(intro);\n          return newMessages;\n        }\n      } else {\n        newMessages.splice(i + 1, 0, intro);\n        return newMessages;\n      }\n    }\n  }\n  return newMessages;\n};\nexport var getGroupStyles = function (message, previousMessage, nextMessage, noGroupByUser) {\n  var _a, _b, _c, _d, _e, _f, _g;\n  if (message.customType === CUSTOM_MESSAGE_TYPE.date) return '';\n  if (message.customType === CUSTOM_MESSAGE_TYPE.intro) return '';\n  if (noGroupByUser || ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) !== 0) return 'single';\n  var isTopMessage = !previousMessage || previousMessage.customType === CUSTOM_MESSAGE_TYPE.intro || previousMessage.customType === CUSTOM_MESSAGE_TYPE.date || previousMessage.type === 'system' || ((_b = previousMessage.attachments) === null || _b === void 0 ? void 0 : _b.length) !== 0 || ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id) !== ((_d = previousMessage.user) === null || _d === void 0 ? void 0 : _d.id) || previousMessage.type === 'error' || previousMessage.deleted_at || message.reaction_counts && Object.keys(message.reaction_counts).length > 0;\n  var isBottomMessage = !nextMessage || nextMessage.customType === CUSTOM_MESSAGE_TYPE.date || nextMessage.type === 'system' || nextMessage.customType === CUSTOM_MESSAGE_TYPE.intro || ((_e = nextMessage.attachments) === null || _e === void 0 ? void 0 : _e.length) !== 0 || ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id) !== ((_g = nextMessage.user) === null || _g === void 0 ? void 0 : _g.id) || nextMessage.type === 'error' || nextMessage.deleted_at || nextMessage.reaction_counts && Object.keys(nextMessage.reaction_counts).length > 0;\n  if (!isTopMessage && !isBottomMessage) {\n    if (message.deleted_at || message.type === 'error') return 'single';\n    return 'middle';\n  }\n  if (isBottomMessage) {\n    if (isTopMessage || message.deleted_at || message.type === 'error') return 'single';\n    return 'bottom';\n  }\n  if (isTopMessage) return 'top';\n  return '';\n};\n// \"Probably\" included, because it may happen that the last page was returned and it has exactly the size of the limit\n// but the back-end cannot provide us with information on whether it has still more messages in the DB\n// FIXME: once the pagination state is moved from Channel to MessageList, these should be moved as well.\n//  The MessageList should have configurable the limit for performing the requests.\n//  This parameter would then be used within these functions\nexport var hasMoreMessagesProbably = function (returnedCountMessages, limit) {\n  return returnedCountMessages === limit;\n};\nexport var hasNotMoreMessages = function (returnedCountMessages, limit) {\n  return returnedCountMessages < limit;\n};","map":{"version":3,"names":["nanoid","CUSTOM_MESSAGE_TYPE","isDate","processMessages","params","_a","_b","enableDateSeparator","hideDeletedMessages","hideNewMessageSeparator","lastRead","messages","setGiphyPreviewMessage","userId","unread","ephemeralMessagePresent","lastDateSeparator","newMessages","i","length","message","type","command","messageDate","created_at","toDateString","previousMessage","prevMessageDate","Date","user","id","push","customType","date","makeDateMessageId","undefined","idSuffix","toISOString","e","concat","getLastReceived","status","getReadStates","read","returnAllReadData","readData","Object","values","forEach","readState","last_read","userLastReadMsgId","msg","updated_at","insertIntro","headerPosition","intro","unshift","messageTime","getTime","nextMessage","nextMessageTime","splice","getGroupStyles","noGroupByUser","_c","_d","_e","_f","_g","attachments","isTopMessage","deleted_at","reaction_counts","keys","isBottomMessage","hasMoreMessagesProbably","returnedCountMessages","limit","hasNotMoreMessages"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/Community_Chat-project/client/node_modules/stream-chat-react/dist/components/MessageList/utils.js"],"sourcesContent":["/* eslint-disable no-continue */\nimport { nanoid } from 'nanoid';\nimport { CUSTOM_MESSAGE_TYPE } from '../../constants/messageTypes';\nimport { isDate } from '../../context/TranslationContext';\n/**\n * processMessages - Transform the input message list according to config parameters\n *\n * Inserts date separators btw. messages created on different dates or before unread incoming messages. By default:\n * - enabled in main message list\n * - disabled in virtualized message list\n * - disabled in thread\n *\n * Allows to filter out deleted messages, contolled by hideDeletedMessages param. This is disabled by default.\n *\n * Sets Giphy preview message for VirtualizedMessageList\n *\n * The only required params are messages and userId, the rest are config params:\n *\n * @return {StreamMessage<StreamChatGenerics>[]} Transformed list of messages\n */\nexport var processMessages = function (params) {\n    var _a, _b;\n    var enableDateSeparator = params.enableDateSeparator, hideDeletedMessages = params.hideDeletedMessages, hideNewMessageSeparator = params.hideNewMessageSeparator, lastRead = params.lastRead, messages = params.messages, setGiphyPreviewMessage = params.setGiphyPreviewMessage, userId = params.userId;\n    var unread = false;\n    var ephemeralMessagePresent = false;\n    var lastDateSeparator;\n    var newMessages = [];\n    for (var i = 0; i < messages.length; i += 1) {\n        var message = messages[i];\n        if (hideDeletedMessages && message.type === 'deleted') {\n            continue;\n        }\n        if (setGiphyPreviewMessage && message.type === 'ephemeral' && message.command === 'giphy') {\n            ephemeralMessagePresent = true;\n            setGiphyPreviewMessage(message);\n            continue;\n        }\n        var messageDate = (message.created_at && isDate(message.created_at) && message.created_at.toDateString()) || '';\n        var previousMessage = messages[i - 1];\n        var prevMessageDate = messageDate;\n        if (enableDateSeparator && (previousMessage === null || previousMessage === void 0 ? void 0 : previousMessage.created_at) && isDate(previousMessage.created_at)) {\n            prevMessageDate = previousMessage.created_at.toDateString();\n        }\n        if (!unread && !hideNewMessageSeparator) {\n            unread = (lastRead && message.created_at && new Date(lastRead) < message.created_at) || false;\n            // do not show date separator for current user's messages\n            if (enableDateSeparator && unread && ((_a = message.user) === null || _a === void 0 ? void 0 : _a.id) !== userId) {\n                newMessages.push({\n                    customType: CUSTOM_MESSAGE_TYPE.date,\n                    date: message.created_at,\n                    id: makeDateMessageId(message.created_at),\n                    unread: unread,\n                });\n            }\n        }\n        if (enableDateSeparator &&\n            (i === 0 || // always put date separator before the first message\n                messageDate !== prevMessageDate || // add date separator btw. 2 messages created on different date\n                // if hiding deleted messages replace the previous deleted message(s) with A separator if the last rendered message was created on different date\n                (hideDeletedMessages &&\n                    (previousMessage === null || previousMessage === void 0 ? void 0 : previousMessage.type) === 'deleted' &&\n                    lastDateSeparator !== messageDate)) &&\n            ((_b = newMessages === null || newMessages === void 0 ? void 0 : newMessages[newMessages.length - 1]) === null || _b === void 0 ? void 0 : _b.customType) !== CUSTOM_MESSAGE_TYPE.date // do not show two date separators in a row)\n        ) {\n            lastDateSeparator = messageDate;\n            newMessages.push({\n                customType: CUSTOM_MESSAGE_TYPE.date,\n                date: message.created_at,\n                id: makeDateMessageId(message.created_at),\n            }, message);\n        }\n        else {\n            newMessages.push(message);\n        }\n    }\n    // clean up the giphy preview component state after a Cancel action\n    if (setGiphyPreviewMessage && !ephemeralMessagePresent) {\n        setGiphyPreviewMessage(undefined);\n    }\n    return newMessages;\n};\nexport var makeDateMessageId = function (date) {\n    var idSuffix;\n    try {\n        idSuffix = !date ? nanoid() : date instanceof Date ? date.toISOString() : date;\n    }\n    catch (e) {\n        idSuffix = nanoid();\n    }\n    return \"\".concat(CUSTOM_MESSAGE_TYPE.date, \"-\").concat(idSuffix);\n};\n// fast since it usually iterates just the last few messages\nexport var getLastReceived = function (messages) {\n    for (var i = messages.length - 1; i > 0; i -= 1) {\n        if (messages[i].status === 'received') {\n            return messages[i].id;\n        }\n    }\n    return null;\n};\nexport var getReadStates = function (messages, read, returnAllReadData) {\n    if (read === void 0) { read = {}; }\n    // create object with empty array for each message id\n    var readData = {};\n    Object.values(read).forEach(function (readState) {\n        if (!readState.last_read)\n            return;\n        var userLastReadMsgId;\n        // loop messages sent by current user and add read data for other users in channel\n        messages.forEach(function (msg) {\n            if (msg.updated_at && msg.updated_at < readState.last_read) {\n                userLastReadMsgId = msg.id;\n                // if true, save other user's read data for all messages they've read\n                if (returnAllReadData) {\n                    if (!readData[userLastReadMsgId]) {\n                        readData[userLastReadMsgId] = [];\n                    }\n                    readData[userLastReadMsgId].push(readState.user);\n                }\n            }\n        });\n        // if true, only save read data for other user's last read message\n        if (userLastReadMsgId && !returnAllReadData) {\n            if (!readData[userLastReadMsgId]) {\n                readData[userLastReadMsgId] = [];\n            }\n            readData[userLastReadMsgId].push(readState.user);\n        }\n    });\n    return readData;\n};\nexport var insertIntro = function (messages, headerPosition) {\n    var newMessages = messages;\n    var intro = {\n        customType: CUSTOM_MESSAGE_TYPE.intro,\n    };\n    // if no headerPosition is set, HeaderComponent will go at the top\n    if (!headerPosition) {\n        newMessages.unshift(intro);\n        return newMessages;\n    }\n    // if no messages, intro gets inserted\n    if (!newMessages.length) {\n        newMessages.unshift(intro);\n        return newMessages;\n    }\n    // else loop over the messages\n    for (var i = 0; i < messages.length; i += 1) {\n        var message = messages[i];\n        var messageTime = message.created_at && isDate(message.created_at) ? message.created_at.getTime() : null;\n        var nextMessage = messages[i + 1];\n        var nextMessageTime = nextMessage.created_at && isDate(nextMessage.created_at)\n            ? nextMessage.created_at.getTime()\n            : null;\n        // header position is smaller than message time so comes after;\n        if (messageTime && messageTime < headerPosition) {\n            // if header position is also smaller than message time continue;\n            if (nextMessageTime && nextMessageTime < headerPosition) {\n                if (messages[i + 1] && messages[i + 1].customType === CUSTOM_MESSAGE_TYPE.date)\n                    continue;\n                if (!nextMessageTime) {\n                    newMessages.push(intro);\n                    return newMessages;\n                }\n            }\n            else {\n                newMessages.splice(i + 1, 0, intro);\n                return newMessages;\n            }\n        }\n    }\n    return newMessages;\n};\nexport var getGroupStyles = function (message, previousMessage, nextMessage, noGroupByUser) {\n    var _a, _b, _c, _d, _e, _f, _g;\n    if (message.customType === CUSTOM_MESSAGE_TYPE.date)\n        return '';\n    if (message.customType === CUSTOM_MESSAGE_TYPE.intro)\n        return '';\n    if (noGroupByUser || ((_a = message.attachments) === null || _a === void 0 ? void 0 : _a.length) !== 0)\n        return 'single';\n    var isTopMessage = !previousMessage ||\n        previousMessage.customType === CUSTOM_MESSAGE_TYPE.intro ||\n        previousMessage.customType === CUSTOM_MESSAGE_TYPE.date ||\n        previousMessage.type === 'system' ||\n        ((_b = previousMessage.attachments) === null || _b === void 0 ? void 0 : _b.length) !== 0 ||\n        ((_c = message.user) === null || _c === void 0 ? void 0 : _c.id) !== ((_d = previousMessage.user) === null || _d === void 0 ? void 0 : _d.id) ||\n        previousMessage.type === 'error' ||\n        previousMessage.deleted_at ||\n        (message.reaction_counts && Object.keys(message.reaction_counts).length > 0);\n    var isBottomMessage = !nextMessage ||\n        nextMessage.customType === CUSTOM_MESSAGE_TYPE.date ||\n        nextMessage.type === 'system' ||\n        nextMessage.customType === CUSTOM_MESSAGE_TYPE.intro ||\n        ((_e = nextMessage.attachments) === null || _e === void 0 ? void 0 : _e.length) !== 0 ||\n        ((_f = message.user) === null || _f === void 0 ? void 0 : _f.id) !== ((_g = nextMessage.user) === null || _g === void 0 ? void 0 : _g.id) ||\n        nextMessage.type === 'error' ||\n        nextMessage.deleted_at ||\n        (nextMessage.reaction_counts && Object.keys(nextMessage.reaction_counts).length > 0);\n    if (!isTopMessage && !isBottomMessage) {\n        if (message.deleted_at || message.type === 'error')\n            return 'single';\n        return 'middle';\n    }\n    if (isBottomMessage) {\n        if (isTopMessage || message.deleted_at || message.type === 'error')\n            return 'single';\n        return 'bottom';\n    }\n    if (isTopMessage)\n        return 'top';\n    return '';\n};\n// \"Probably\" included, because it may happen that the last page was returned and it has exactly the size of the limit\n// but the back-end cannot provide us with information on whether it has still more messages in the DB\n// FIXME: once the pagination state is moved from Channel to MessageList, these should be moved as well.\n//  The MessageList should have configurable the limit for performing the requests.\n//  This parameter would then be used within these functions\nexport var hasMoreMessagesProbably = function (returnedCountMessages, limit) {\n    return returnedCountMessages === limit;\n};\nexport var hasNotMoreMessages = function (returnedCountMessages, limit) {\n    return returnedCountMessages < limit;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}