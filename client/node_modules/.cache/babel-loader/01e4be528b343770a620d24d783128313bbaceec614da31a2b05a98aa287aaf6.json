{"ast":null,"code":"import React from 'react';\nimport { ActionsIcon as DefaultActionsIcon, ReactionIcon as DefaultReactionIcon, ThreadIcon as DefaultThreadIcon } from './icons';\nimport { MESSAGE_ACTIONS, showMessageActionsBox } from './utils';\nimport { MessageActions } from '../MessageActions';\nimport { useMessageContext } from '../../context/MessageContext';\nvar UnMemoizedMessageOptions = function (props) {\n  var _a = props.ActionsIcon,\n    ActionsIcon = _a === void 0 ? DefaultActionsIcon : _a,\n    _b = props.displayReplies,\n    displayReplies = _b === void 0 ? true : _b,\n    propHandleOpenThread = props.handleOpenThread,\n    messageWrapperRef = props.messageWrapperRef,\n    _c = props.ReactionIcon,\n    ReactionIcon = _c === void 0 ? DefaultReactionIcon : _c,\n    _d = props.theme,\n    theme = _d === void 0 ? 'simple' : _d,\n    _e = props.ThreadIcon,\n    ThreadIcon = _e === void 0 ? DefaultThreadIcon : _e;\n  var _f = useMessageContext('MessageOptions'),\n    customMessageActions = _f.customMessageActions,\n    getMessageActions = _f.getMessageActions,\n    contextHandleOpenThread = _f.handleOpenThread,\n    initialMessage = _f.initialMessage,\n    message = _f.message,\n    onReactionListClick = _f.onReactionListClick,\n    threadList = _f.threadList;\n  var handleOpenThread = propHandleOpenThread || contextHandleOpenThread;\n  var messageActions = getMessageActions();\n  var showActionsBox = showMessageActionsBox(messageActions, threadList) || !!customMessageActions;\n  var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;\n  var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;\n  if (!message.type || message.type === 'error' || message.type === 'system' || message.type === 'ephemeral' || message.status === 'failed' || message.status === 'sending' || initialMessage) {\n    return null;\n  }\n  var rootClassName = \"str-chat__message-\".concat(theme, \"__actions str-chat__message-options\");\n  return React.createElement(\"div\", {\n    className: rootClassName,\n    \"data-testid\": 'message-options'\n  }, showActionsBox && React.createElement(MessageActions, {\n    ActionsIcon: ActionsIcon,\n    messageWrapperRef: messageWrapperRef\n  }), shouldShowReplies && React.createElement(\"button\", {\n    \"aria-label\": 'Open Thread',\n    className: \"str-chat__message-\".concat(theme, \"__actions__action str-chat__message-\").concat(theme, \"__actions__action--thread str-chat__message-reply-in-thread-button\"),\n    \"data-testid\": 'thread-action',\n    onClick: handleOpenThread\n  }, React.createElement(ThreadIcon, {\n    className: 'str-chat__message-action-icon'\n  })), shouldShowReactions && React.createElement(\"button\", {\n    \"aria-label\": 'Open Reaction Selector',\n    className: \"str-chat__message-\".concat(theme, \"__actions__action str-chat__message-\").concat(theme, \"__actions__action--reactions str-chat__message-reactions-button\"),\n    \"data-testid\": 'message-reaction-action',\n    onClick: onReactionListClick\n  }, React.createElement(ReactionIcon, {\n    className: 'str-chat__message-action-icon'\n  })));\n};\nexport var MessageOptions = React.memo(UnMemoizedMessageOptions);","map":{"version":3,"names":["React","ActionsIcon","DefaultActionsIcon","ReactionIcon","DefaultReactionIcon","ThreadIcon","DefaultThreadIcon","MESSAGE_ACTIONS","showMessageActionsBox","MessageActions","useMessageContext","UnMemoizedMessageOptions","props","_a","_b","displayReplies","propHandleOpenThread","handleOpenThread","messageWrapperRef","_c","_d","theme","_e","_f","customMessageActions","getMessageActions","contextHandleOpenThread","initialMessage","message","onReactionListClick","threadList","messageActions","showActionsBox","shouldShowReactions","indexOf","react","shouldShowReplies","reply","type","status","rootClassName","concat","createElement","className","onClick","MessageOptions","memo"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/chat_Web/client/node_modules/stream-chat-react/dist/components/Message/MessageOptions.js"],"sourcesContent":["import React from 'react';\nimport { ActionsIcon as DefaultActionsIcon, ReactionIcon as DefaultReactionIcon, ThreadIcon as DefaultThreadIcon, } from './icons';\nimport { MESSAGE_ACTIONS, showMessageActionsBox } from './utils';\nimport { MessageActions } from '../MessageActions';\nimport { useMessageContext } from '../../context/MessageContext';\nvar UnMemoizedMessageOptions = function (props) {\n    var _a = props.ActionsIcon, ActionsIcon = _a === void 0 ? DefaultActionsIcon : _a, _b = props.displayReplies, displayReplies = _b === void 0 ? true : _b, propHandleOpenThread = props.handleOpenThread, messageWrapperRef = props.messageWrapperRef, _c = props.ReactionIcon, ReactionIcon = _c === void 0 ? DefaultReactionIcon : _c, _d = props.theme, theme = _d === void 0 ? 'simple' : _d, _e = props.ThreadIcon, ThreadIcon = _e === void 0 ? DefaultThreadIcon : _e;\n    var _f = useMessageContext('MessageOptions'), customMessageActions = _f.customMessageActions, getMessageActions = _f.getMessageActions, contextHandleOpenThread = _f.handleOpenThread, initialMessage = _f.initialMessage, message = _f.message, onReactionListClick = _f.onReactionListClick, threadList = _f.threadList;\n    var handleOpenThread = propHandleOpenThread || contextHandleOpenThread;\n    var messageActions = getMessageActions();\n    var showActionsBox = showMessageActionsBox(messageActions, threadList) || !!customMessageActions;\n    var shouldShowReactions = messageActions.indexOf(MESSAGE_ACTIONS.react) > -1;\n    var shouldShowReplies = messageActions.indexOf(MESSAGE_ACTIONS.reply) > -1 && displayReplies && !threadList;\n    if (!message.type ||\n        message.type === 'error' ||\n        message.type === 'system' ||\n        message.type === 'ephemeral' ||\n        message.status === 'failed' ||\n        message.status === 'sending' ||\n        initialMessage) {\n        return null;\n    }\n    var rootClassName = \"str-chat__message-\".concat(theme, \"__actions str-chat__message-options\");\n    return (React.createElement(\"div\", { className: rootClassName, \"data-testid\": 'message-options' },\n        showActionsBox && (React.createElement(MessageActions, { ActionsIcon: ActionsIcon, messageWrapperRef: messageWrapperRef })),\n        shouldShowReplies && (React.createElement(\"button\", { \"aria-label\": 'Open Thread', className: \"str-chat__message-\".concat(theme, \"__actions__action str-chat__message-\").concat(theme, \"__actions__action--thread str-chat__message-reply-in-thread-button\"), \"data-testid\": 'thread-action', onClick: handleOpenThread },\n            React.createElement(ThreadIcon, { className: 'str-chat__message-action-icon' }))),\n        shouldShowReactions && (React.createElement(\"button\", { \"aria-label\": 'Open Reaction Selector', className: \"str-chat__message-\".concat(theme, \"__actions__action str-chat__message-\").concat(theme, \"__actions__action--reactions str-chat__message-reactions-button\"), \"data-testid\": 'message-reaction-action', onClick: onReactionListClick },\n            React.createElement(ReactionIcon, { className: 'str-chat__message-action-icon' })))));\n};\nexport var MessageOptions = React.memo(UnMemoizedMessageOptions);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}