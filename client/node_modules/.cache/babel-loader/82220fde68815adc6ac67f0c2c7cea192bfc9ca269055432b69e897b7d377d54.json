{"ast":null,"code":"import { useCallback } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useImageUploads } from './useImageUploads';\nimport { useFileUploads } from './useFileUploads';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nvar apiMaxNumberOfFiles = 10;\nexport var useAttachments = function (props, state, dispatch, textareaRef) {\n  var noFiles = props.noFiles;\n  var fileUploads = state.fileUploads,\n    imageUploads = state.imageUploads;\n  var _a = useChannelStateContext('useAttachments'),\n    maxNumberOfFiles = _a.maxNumberOfFiles,\n    multipleUploads = _a.multipleUploads;\n  var _b = useFileUploads(props, state, dispatch),\n    removeFile = _b.removeFile,\n    uploadFile = _b.uploadFile;\n  var _c = useImageUploads(props, state, dispatch),\n    removeImage = _c.removeImage,\n    uploadImage = _c.uploadImage;\n  // Number of files that the user can still add. Should never be more than the amount allowed by the API.\n  // If multipleUploads is false, we only want to allow a single upload.\n  var maxFilesAllowed = !multipleUploads ? 1 : maxNumberOfFiles || apiMaxNumberOfFiles;\n  // OG attachments should not be counted towards \"numberOfImages\"\n  var numberOfImages = Object.values(imageUploads).filter(function (_a) {\n    var og_scrape_url = _a.og_scrape_url,\n      state = _a.state;\n    return state !== 'failed' && !og_scrape_url;\n  }).length;\n  var numberOfFiles = Object.values(fileUploads).filter(function (_a) {\n    var state = _a.state;\n    return state !== 'failed';\n  }).length;\n  var numberOfUploads = numberOfImages + numberOfFiles;\n  var maxFilesLeft = maxFilesAllowed - numberOfUploads;\n  var uploadNewFiles = useCallback(function (files) {\n    var _a;\n    Array.from(files).slice(0, maxFilesLeft).forEach(function (file) {\n      var _a;\n      var id = nanoid();\n      if (file.type.startsWith('image/') && !file.type.endsWith('.photoshop') // photoshop files begin with 'image/'\n      ) {\n        dispatch({\n          file: file,\n          id: id,\n          previewUri: (_a = URL.createObjectURL) === null || _a === void 0 ? void 0 : _a.call(URL, file),\n          state: 'uploading',\n          type: 'setImageUpload'\n        });\n      } else if (file instanceof File && !noFiles) {\n        dispatch({\n          file: file,\n          id: id,\n          state: 'uploading',\n          type: 'setFileUpload'\n        });\n      }\n    });\n    (_a = textareaRef === null || textareaRef === void 0 ? void 0 : textareaRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n  }, [maxFilesLeft, noFiles]);\n  return {\n    maxFilesLeft: maxFilesLeft,\n    numberOfUploads: numberOfUploads,\n    removeFile: removeFile,\n    removeImage: removeImage,\n    uploadFile: uploadFile,\n    uploadImage: uploadImage,\n    uploadNewFiles: uploadNewFiles\n  };\n};","map":{"version":3,"names":["useCallback","nanoid","useImageUploads","useFileUploads","useChannelStateContext","apiMaxNumberOfFiles","useAttachments","props","state","dispatch","textareaRef","noFiles","fileUploads","imageUploads","_a","maxNumberOfFiles","multipleUploads","_b","removeFile","uploadFile","_c","removeImage","uploadImage","maxFilesAllowed","numberOfImages","Object","values","filter","og_scrape_url","length","numberOfFiles","numberOfUploads","maxFilesLeft","uploadNewFiles","files","Array","from","slice","forEach","file","id","type","startsWith","endsWith","previewUri","URL","createObjectURL","call","File","current","focus"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/chat_Web/client/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useAttachments.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useImageUploads } from './useImageUploads';\nimport { useFileUploads } from './useFileUploads';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nvar apiMaxNumberOfFiles = 10;\nexport var useAttachments = function (props, state, dispatch, textareaRef) {\n    var noFiles = props.noFiles;\n    var fileUploads = state.fileUploads, imageUploads = state.imageUploads;\n    var _a = useChannelStateContext('useAttachments'), maxNumberOfFiles = _a.maxNumberOfFiles, multipleUploads = _a.multipleUploads;\n    var _b = useFileUploads(props, state, dispatch), removeFile = _b.removeFile, uploadFile = _b.uploadFile;\n    var _c = useImageUploads(props, state, dispatch), removeImage = _c.removeImage, uploadImage = _c.uploadImage;\n    // Number of files that the user can still add. Should never be more than the amount allowed by the API.\n    // If multipleUploads is false, we only want to allow a single upload.\n    var maxFilesAllowed = !multipleUploads ? 1 : maxNumberOfFiles || apiMaxNumberOfFiles;\n    // OG attachments should not be counted towards \"numberOfImages\"\n    var numberOfImages = Object.values(imageUploads).filter(function (_a) {\n        var og_scrape_url = _a.og_scrape_url, state = _a.state;\n        return state !== 'failed' && !og_scrape_url;\n    }).length;\n    var numberOfFiles = Object.values(fileUploads).filter(function (_a) {\n        var state = _a.state;\n        return state !== 'failed';\n    }).length;\n    var numberOfUploads = numberOfImages + numberOfFiles;\n    var maxFilesLeft = maxFilesAllowed - numberOfUploads;\n    var uploadNewFiles = useCallback(function (files) {\n        var _a;\n        Array.from(files)\n            .slice(0, maxFilesLeft)\n            .forEach(function (file) {\n            var _a;\n            var id = nanoid();\n            if (file.type.startsWith('image/') &&\n                !file.type.endsWith('.photoshop') // photoshop files begin with 'image/'\n            ) {\n                dispatch({\n                    file: file,\n                    id: id,\n                    previewUri: (_a = URL.createObjectURL) === null || _a === void 0 ? void 0 : _a.call(URL, file),\n                    state: 'uploading',\n                    type: 'setImageUpload',\n                });\n            }\n            else if (file instanceof File && !noFiles) {\n                dispatch({ file: file, id: id, state: 'uploading', type: 'setFileUpload' });\n            }\n        });\n        (_a = textareaRef === null || textareaRef === void 0 ? void 0 : textareaRef.current) === null || _a === void 0 ? void 0 : _a.focus();\n    }, [maxFilesLeft, noFiles]);\n    return {\n        maxFilesLeft: maxFilesLeft,\n        numberOfUploads: numberOfUploads,\n        removeFile: removeFile,\n        removeImage: removeImage,\n        uploadFile: uploadFile,\n        uploadImage: uploadImage,\n        uploadNewFiles: uploadNewFiles,\n    };\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}