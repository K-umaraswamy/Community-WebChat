{"ast":null,"code":"/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp';\nimport { visitParents } from 'unist-util-visit-parents';\nimport { convert } from 'unist-util-is';\nconst own = {}.hasOwnProperty;\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n/**\n * @type {(\n *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n * )}\n **/\n\n/**\n * @template {Node} Tree\n * @param {Tree} tree\n * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n * @param {Replace | Options | null | undefined} [replace]\n * @param {Options | null | undefined} [options]\n * @returns {Tree}\n */\nfunction (tree, find, replace, options) {\n  /** @type {Options | null | undefined} */\n  let settings;\n  /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n  let schema;\n  if (typeof find === 'string' || find instanceof RegExp) {\n    // @ts-expect-error don’t expect options twice.\n    schema = [[find, replace]];\n    settings = options;\n  } else {\n    schema = find;\n    // @ts-expect-error don’t expect replace twice.\n    settings = replace;\n  }\n  if (!settings) {\n    settings = {};\n  }\n  const ignored = convert(settings.ignore || []);\n  const pairs = toPairs(schema);\n  let pairIndex = -1;\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor);\n  }\n\n  // To do next major: don’t return the given tree.\n  return tree;\n\n  /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1;\n    /** @type {Parent | undefined} */\n    let grandparent;\n    while (++index < parents.length) {\n      const parent = parents[index];\n      if (ignored(parent,\n      // @ts-expect-error: TS doesn’t understand but it’s perfect.\n      grandparent ? grandparent.children.indexOf(parent) : undefined, grandparent)) {\n        return;\n      }\n      grandparent = parent;\n    }\n    if (grandparent) {\n      return handler(node, parents);\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parent>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1];\n    const find = pairs[pairIndex][0];\n    const replace = pairs[pairIndex][1];\n    let start = 0;\n    // @ts-expect-error: TS is wrong, some of these children can be text.\n    const index = parent.children.indexOf(node);\n    let change = false;\n    /** @type {Array<PhrasingContent>} */\n    let nodes = [];\n    find.lastIndex = 0;\n    let match = find.exec(node.value);\n    while (match) {\n      const position = match.index;\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        // @ts-expect-error: stack is fine.\n        stack: [...parents, node]\n      };\n      let value = replace(...match, matchObject);\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {\n          type: 'text',\n          value\n        } : undefined;\n      }\n\n      // It wasn’t a match after all.\n      if (value !== false) {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          });\n        }\n        if (Array.isArray(value)) {\n          nodes.push(...value);\n        } else if (value) {\n          nodes.push(value);\n        }\n        start = position + match[0].length;\n        change = true;\n      }\n      if (!find.global) {\n        break;\n      }\n      match = find.exec(node.value);\n    }\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({\n          type: 'text',\n          value: node.value.slice(start)\n        });\n      }\n      parent.children.splice(index, 1, ...nodes);\n    } else {\n      nodes = [node];\n    }\n    return index + nodes.length;\n  }\n};\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = [];\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema');\n  }\n  if (Array.isArray(schema)) {\n    let index = -1;\n    while (++index < schema.length) {\n      result.push([toExpression(schema[index][0]), toFunction(schema[index][1])]);\n    }\n  } else {\n    /** @type {string} */\n    let key;\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])]);\n      }\n    }\n  }\n  return result;\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find;\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace;\n}","map":{"version":3,"names":["escape","visitParents","convert","own","hasOwnProperty","findAndReplace","tree","find","replace","options","settings","schema","RegExp","ignored","ignore","pairs","toPairs","pairIndex","length","visitor","node","parents","index","grandparent","parent","children","indexOf","undefined","handler","start","change","nodes","lastIndex","match","exec","value","position","matchObject","input","stack","type","push","slice","Array","isArray","global","splice","result","TypeError","toExpression","toFunction","key","call"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/Community_Chat-project/client/node_modules/mdast-util-find-and-replace/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').Parent} MdastParent\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast').Content} Content\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n * @typedef {import('mdast').Text} Text\n * @typedef {import('unist-util-visit-parents').Test} Test\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Content | Root} Node\n * @typedef {Extract<Node, MdastParent>} Parent\n * @typedef {Exclude<Parent, Root>} ContentParent\n *\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[Root, ...Array<ContentParent>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | undefined | null}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {string | RegExp} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n * @typedef {Record<string, Replace>} FindAndReplaceSchema\n *   Several find and replaces, in object form.\n * @typedef {[Find, Replace]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n * @typedef {string | ReplaceFunction} Replace\n *   Thing to replace with.\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore.\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\nconst own = {}.hasOwnProperty\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param tree\n *   Tree to change.\n * @param find\n *   Patterns to find.\n * @param replace\n *   Things to replace with (when `find` is `Find`) or configuration.\n * @param options\n *   Configuration (when `find` is not `Find`).\n * @returns\n *   Given, modified, tree.\n */\n// To do: next major: remove `find` & `replace` combo, remove schema.\nexport const findAndReplace =\n  /**\n   * @type {(\n   *   (<Tree extends Node>(tree: Tree, find: Find, replace?: Replace | null | undefined, options?: Options | null | undefined) => Tree) &\n   *   (<Tree extends Node>(tree: Tree, schema: FindAndReplaceSchema | FindAndReplaceList, options?: Options | null | undefined) => Tree)\n   * )}\n   **/\n  (\n    /**\n     * @template {Node} Tree\n     * @param {Tree} tree\n     * @param {Find | FindAndReplaceSchema | FindAndReplaceList} find\n     * @param {Replace | Options | null | undefined} [replace]\n     * @param {Options | null | undefined} [options]\n     * @returns {Tree}\n     */\n    function (tree, find, replace, options) {\n      /** @type {Options | null | undefined} */\n      let settings\n      /** @type {FindAndReplaceSchema|FindAndReplaceList} */\n      let schema\n\n      if (typeof find === 'string' || find instanceof RegExp) {\n        // @ts-expect-error don’t expect options twice.\n        schema = [[find, replace]]\n        settings = options\n      } else {\n        schema = find\n        // @ts-expect-error don’t expect replace twice.\n        settings = replace\n      }\n\n      if (!settings) {\n        settings = {}\n      }\n\n      const ignored = convert(settings.ignore || [])\n      const pairs = toPairs(schema)\n      let pairIndex = -1\n\n      while (++pairIndex < pairs.length) {\n        visitParents(tree, 'text', visitor)\n      }\n\n      // To do next major: don’t return the given tree.\n      return tree\n\n      /** @type {import('unist-util-visit-parents/complex-types.js').BuildVisitor<Root, 'text'>} */\n      function visitor(node, parents) {\n        let index = -1\n        /** @type {Parent | undefined} */\n        let grandparent\n\n        while (++index < parents.length) {\n          const parent = parents[index]\n\n          if (\n            ignored(\n              parent,\n              // @ts-expect-error: TS doesn’t understand but it’s perfect.\n              grandparent ? grandparent.children.indexOf(parent) : undefined,\n              grandparent\n            )\n          ) {\n            return\n          }\n\n          grandparent = parent\n        }\n\n        if (grandparent) {\n          return handler(node, parents)\n        }\n      }\n\n      /**\n       * Handle a text node which is not in an ignored parent.\n       *\n       * @param {Text} node\n       *   Text node.\n       * @param {Array<Parent>} parents\n       *   Parents.\n       * @returns {VisitorResult}\n       *   Result.\n       */\n      function handler(node, parents) {\n        const parent = parents[parents.length - 1]\n        const find = pairs[pairIndex][0]\n        const replace = pairs[pairIndex][1]\n        let start = 0\n        // @ts-expect-error: TS is wrong, some of these children can be text.\n        const index = parent.children.indexOf(node)\n        let change = false\n        /** @type {Array<PhrasingContent>} */\n        let nodes = []\n\n        find.lastIndex = 0\n\n        let match = find.exec(node.value)\n\n        while (match) {\n          const position = match.index\n          /** @type {RegExpMatchObject} */\n          const matchObject = {\n            index: match.index,\n            input: match.input,\n            // @ts-expect-error: stack is fine.\n            stack: [...parents, node]\n          }\n          let value = replace(...match, matchObject)\n\n          if (typeof value === 'string') {\n            value = value.length > 0 ? {type: 'text', value} : undefined\n          }\n\n          // It wasn’t a match after all.\n          if (value !== false) {\n            if (start !== position) {\n              nodes.push({\n                type: 'text',\n                value: node.value.slice(start, position)\n              })\n            }\n\n            if (Array.isArray(value)) {\n              nodes.push(...value)\n            } else if (value) {\n              nodes.push(value)\n            }\n\n            start = position + match[0].length\n            change = true\n          }\n\n          if (!find.global) {\n            break\n          }\n\n          match = find.exec(node.value)\n        }\n\n        if (change) {\n          if (start < node.value.length) {\n            nodes.push({type: 'text', value: node.value.slice(start)})\n          }\n\n          parent.children.splice(index, 1, ...nodes)\n        } else {\n          nodes = [node]\n        }\n\n        return index + nodes.length\n      }\n    }\n  )\n\n/**\n * Turn a schema into pairs.\n *\n * @param {FindAndReplaceSchema | FindAndReplaceList} schema\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(schema) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (typeof schema !== 'object') {\n    throw new TypeError('Expected array or object as schema')\n  }\n\n  if (Array.isArray(schema)) {\n    let index = -1\n\n    while (++index < schema.length) {\n      result.push([\n        toExpression(schema[index][0]),\n        toFunction(schema[index][1])\n      ])\n    }\n  } else {\n    /** @type {string} */\n    let key\n\n    for (key in schema) {\n      if (own.call(schema, key)) {\n        result.push([toExpression(key), toFunction(schema[key])])\n      }\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function' ? replace : () => replace\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}