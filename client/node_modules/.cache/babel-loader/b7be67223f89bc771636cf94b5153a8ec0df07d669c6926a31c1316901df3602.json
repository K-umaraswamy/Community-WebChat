{"ast":null,"code":"'use strict';\n\nexports.__esModule = true;\nexports.tokenize = exports.test = exports.scanner = exports.parser = exports.options = exports.inherits = exports.find = undefined;\nvar _class = require('./linkify/utils/class');\nvar _options = require('./linkify/utils/options');\nvar options = _interopRequireWildcard(_options);\nvar _scanner = require('./linkify/core/scanner');\nvar scanner = _interopRequireWildcard(_scanner);\nvar _parser = require('./linkify/core/parser');\nvar parser = _interopRequireWildcard(_parser);\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];\n      }\n    }\n    newObj.default = obj;\n    return newObj;\n  }\n}\nif (!Array.isArray) {\n  Array.isArray = function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n  };\n}\n\n/**\n\tConverts a string into tokens that represent linkable and non-linkable bits\n\t@method tokenize\n\t@param {String} str\n\t@return {Array} tokens\n*/\nvar tokenize = function tokenize(str) {\n  return parser.run(scanner.run(str));\n};\n\n/**\n\tReturns a list of linkable items in the given string.\n*/\nvar find = function find(str) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var tokens = tokenize(str);\n  var filtered = [];\n  for (var i = 0; i < tokens.length; i++) {\n    var token = tokens[i];\n    if (token.isLink && (!type || token.type === type)) {\n      filtered.push(token.toObject());\n    }\n  }\n  return filtered;\n};\n\n/**\n\tIs the given string valid linkable text of some sort\n\tNote that this does not trim the text for you.\n\n\tOptionally pass in a second `type` param, which is the type of link to test\n\tfor.\n\n\tFor example,\n\n\t\ttest(str, 'email');\n\n\tWill return `true` if str is a valid email.\n*/\nvar test = function test(str) {\n  var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n  var tokens = tokenize(str);\n  return tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].type === type);\n};\n\n// Scanner and parser provide states and tokens for the lexicographic stage\n// (will be used to add additional link types)\nexports.find = find;\nexports.inherits = _class.inherits;\nexports.options = options;\nexports.parser = parser;\nexports.scanner = scanner;\nexports.test = test;\nexports.tokenize = tokenize;","map":{"version":3,"names":["exports","__esModule","tokenize","test","scanner","parser","options","inherits","find","undefined","_class","require","_options","_interopRequireWildcard","_scanner","_parser","obj","newObj","key","Object","prototype","hasOwnProperty","call","default","Array","isArray","arg","toString","str","run","type","arguments","length","tokens","filtered","i","token","isLink","push","toObject"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/chat_Web/client/node_modules/mml-react/node_modules/linkifyjs/lib/linkify.js"],"sourcesContent":["'use strict';\n\nexports.__esModule = true;\nexports.tokenize = exports.test = exports.scanner = exports.parser = exports.options = exports.inherits = exports.find = undefined;\n\nvar _class = require('./linkify/utils/class');\n\nvar _options = require('./linkify/utils/options');\n\nvar options = _interopRequireWildcard(_options);\n\nvar _scanner = require('./linkify/core/scanner');\n\nvar scanner = _interopRequireWildcard(_scanner);\n\nvar _parser = require('./linkify/core/parser');\n\nvar parser = _interopRequireWildcard(_parser);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nif (!Array.isArray) {\n\tArray.isArray = function (arg) {\n\t\treturn Object.prototype.toString.call(arg) === '[object Array]';\n\t};\n}\n\n/**\n\tConverts a string into tokens that represent linkable and non-linkable bits\n\t@method tokenize\n\t@param {String} str\n\t@return {Array} tokens\n*/\nvar tokenize = function tokenize(str) {\n\treturn parser.run(scanner.run(str));\n};\n\n/**\n\tReturns a list of linkable items in the given string.\n*/\nvar find = function find(str) {\n\tvar type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n\tvar tokens = tokenize(str);\n\tvar filtered = [];\n\n\tfor (var i = 0; i < tokens.length; i++) {\n\t\tvar token = tokens[i];\n\t\tif (token.isLink && (!type || token.type === type)) {\n\t\t\tfiltered.push(token.toObject());\n\t\t}\n\t}\n\n\treturn filtered;\n};\n\n/**\n\tIs the given string valid linkable text of some sort\n\tNote that this does not trim the text for you.\n\n\tOptionally pass in a second `type` param, which is the type of link to test\n\tfor.\n\n\tFor example,\n\n\t\ttest(str, 'email');\n\n\tWill return `true` if str is a valid email.\n*/\nvar test = function test(str) {\n\tvar type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n\tvar tokens = tokenize(str);\n\treturn tokens.length === 1 && tokens[0].isLink && (!type || tokens[0].type === type);\n};\n\n// Scanner and parser provide states and tokens for the lexicographic stage\n// (will be used to add additional link types)\nexports.find = find;\nexports.inherits = _class.inherits;\nexports.options = options;\nexports.parser = parser;\nexports.scanner = scanner;\nexports.test = test;\nexports.tokenize = tokenize;"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}