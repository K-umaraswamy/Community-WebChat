{"ast":null,"code":"/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { association } from 'mdast-util-to-markdown/lib/util/association.js';\nimport { containerFlow } from 'mdast-util-to-markdown/lib/util/container-flow.js';\nimport { indentLines } from 'mdast-util-to-markdown/lib/util/indent-lines.js';\nimport { safe } from 'mdast-util-to-markdown/lib/util/safe.js';\nimport { track } from 'mdast-util-to-markdown/lib/util/track.js';\nfootnoteReference.peek = footnoteReferencePeek;\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  };\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{\n      character: '[',\n      inConstruct: ['phrasing', 'label', 'reference']\n    }],\n    handlers: {\n      footnoteDefinition,\n      footnoteReference\n    }\n  };\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter({\n    type: 'footnoteDefinition',\n    identifier: '',\n    label: '',\n    children: []\n  }, token);\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer();\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume();\n  const node = /** @type {FootnoteDefinition} */\n  this.stack[this.stack.length - 1];\n  node.label = label;\n  node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token);\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({\n    type: 'footnoteReference',\n    identifier: '',\n    label: ''\n  }, token);\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer();\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume();\n  const node = /** @type {FootnoteDefinition} */\n  this.stack[this.stack.length - 1];\n  node.label = label;\n  node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token);\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions);\n  let value = tracker.move('[^');\n  const exit = context.enter('footnoteReference');\n  const subexit = context.enter('reference');\n  value += tracker.move(safe(context, association(node), {\n    ...tracker.current(),\n    before: value,\n    after: ']'\n  }));\n  subexit();\n  exit();\n  value += tracker.move(']');\n  return value;\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '[';\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions);\n  let value = tracker.move('[^');\n  const exit = context.enter('footnoteDefinition');\n  const subexit = context.enter('label');\n  value += tracker.move(safe(context, association(node), {\n    ...tracker.current(),\n    before: value,\n    after: ']'\n  }));\n  subexit();\n  value += tracker.move(']:' + (node.children && node.children.length > 0 ? ' ' : ''));\n  tracker.shift(4);\n  value += tracker.move(indentLines(containerFlow(node, context, tracker.current()), map));\n  exit();\n  return value;\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line;\n  }\n  return (blank ? '' : '    ') + line;\n}","map":{"version":3,"names":["normalizeIdentifier","association","containerFlow","indentLines","safe","track","footnoteReference","peek","footnoteReferencePeek","gfmFootnoteFromMarkdown","enter","gfmFootnoteDefinition","enterFootnoteDefinition","gfmFootnoteDefinitionLabelString","enterFootnoteDefinitionLabelString","gfmFootnoteCall","enterFootnoteCall","gfmFootnoteCallString","enterFootnoteCallString","exit","exitFootnoteDefinition","exitFootnoteDefinitionLabelString","exitFootnoteCall","exitFootnoteCallString","gfmFootnoteToMarkdown","unsafe","character","inConstruct","handlers","footnoteDefinition","token","type","identifier","label","children","buffer","resume","node","stack","length","sliceSerialize","toLowerCase","_","context","safeOptions","tracker","value","move","subexit","current","before","after","shift","map","line","index","blank"],"sources":["C:/Users/Amlanjyoti Pegu/Desktop/Community_Chat-project/client/node_modules/mdast-util-gfm-footnote/lib/index.js"],"sourcesContent":["/**\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('mdast').FootnoteDefinition} FootnoteDefinition\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Map} Map\n */\n\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\nimport {association} from 'mdast-util-to-markdown/lib/util/association.js'\nimport {containerFlow} from 'mdast-util-to-markdown/lib/util/container-flow.js'\nimport {indentLines} from 'mdast-util-to-markdown/lib/util/indent-lines.js'\nimport {safe} from 'mdast-util-to-markdown/lib/util/safe.js'\nimport {track} from 'mdast-util-to-markdown/lib/util/track.js'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n// To do: next major: rename `context` -> `state`, `safeOptions` to `info`, use\n// utilities on `state`.\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteDefinition: enterFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteCallString: enterFootnoteCallString\n    },\n    exit: {\n      gfmFootnoteDefinition: exitFootnoteDefinition,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteCallString: exitFootnoteCallString\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown() {\n  return {\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['phrasing', 'label', 'reference']}],\n    handlers: {footnoteDefinition, footnoteReference}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = /** @type {FootnoteDefinition} */ (\n    this.stack[this.stack.length - 1]\n  )\n  node.label = label\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteReference')\n  const subexit = context.enter('reference')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteDefinition} node\n */\nfunction footnoteDefinition(node, _, context, safeOptions) {\n  const tracker = track(safeOptions)\n  let value = tracker.move('[^')\n  const exit = context.enter('footnoteDefinition')\n  const subexit = context.enter('label')\n  value += tracker.move(\n    safe(context, association(node), {\n      ...tracker.current(),\n      before: value,\n      after: ']'\n    })\n  )\n  subexit()\n  value += tracker.move(\n    ']:' + (node.children && node.children.length > 0 ? ' ' : '')\n  )\n  tracker.shift(4)\n  value += tracker.move(\n    indentLines(containerFlow(node, context, tracker.current()), map)\n  )\n  exit()\n\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, index, blank) {\n  if (index === 0) {\n    return line\n  }\n\n  return (blank ? '' : '    ') + line\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}